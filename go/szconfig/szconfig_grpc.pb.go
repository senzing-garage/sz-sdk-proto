// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.30.2
// source: szconfig.proto

package szconfig

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	SzConfig_AddDataSource_FullMethodName    = "/szconfig.SzConfig/AddDataSource"
	SzConfig_DeleteDataSource_FullMethodName = "/szconfig.SzConfig/DeleteDataSource"
	SzConfig_GetDataSources_FullMethodName   = "/szconfig.SzConfig/GetDataSources"
	SzConfig_VerifyConfig_FullMethodName     = "/szconfig.SzConfig/VerifyConfig"
)

// SzConfigClient is the client API for SzConfig service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SzConfigClient interface {
	AddDataSource(ctx context.Context, in *AddDataSourceRequest, opts ...grpc.CallOption) (*AddDataSourceResponse, error)
	DeleteDataSource(ctx context.Context, in *DeleteDataSourceRequest, opts ...grpc.CallOption) (*DeleteDataSourceResponse, error)
	GetDataSources(ctx context.Context, in *GetDataSourcesRequest, opts ...grpc.CallOption) (*GetDataSourcesResponse, error)
	VerifyConfig(ctx context.Context, in *VerifyConfigRequest, opts ...grpc.CallOption) (*VerifyConfigResponse, error)
}

type szConfigClient struct {
	cc grpc.ClientConnInterface
}

func NewSzConfigClient(cc grpc.ClientConnInterface) SzConfigClient {
	return &szConfigClient{cc}
}

func (c *szConfigClient) AddDataSource(ctx context.Context, in *AddDataSourceRequest, opts ...grpc.CallOption) (*AddDataSourceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddDataSourceResponse)
	err := c.cc.Invoke(ctx, SzConfig_AddDataSource_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *szConfigClient) DeleteDataSource(ctx context.Context, in *DeleteDataSourceRequest, opts ...grpc.CallOption) (*DeleteDataSourceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteDataSourceResponse)
	err := c.cc.Invoke(ctx, SzConfig_DeleteDataSource_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *szConfigClient) GetDataSources(ctx context.Context, in *GetDataSourcesRequest, opts ...grpc.CallOption) (*GetDataSourcesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetDataSourcesResponse)
	err := c.cc.Invoke(ctx, SzConfig_GetDataSources_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *szConfigClient) VerifyConfig(ctx context.Context, in *VerifyConfigRequest, opts ...grpc.CallOption) (*VerifyConfigResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VerifyConfigResponse)
	err := c.cc.Invoke(ctx, SzConfig_VerifyConfig_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SzConfigServer is the server API for SzConfig service.
// All implementations must embed UnimplementedSzConfigServer
// for forward compatibility.
type SzConfigServer interface {
	AddDataSource(context.Context, *AddDataSourceRequest) (*AddDataSourceResponse, error)
	DeleteDataSource(context.Context, *DeleteDataSourceRequest) (*DeleteDataSourceResponse, error)
	GetDataSources(context.Context, *GetDataSourcesRequest) (*GetDataSourcesResponse, error)
	VerifyConfig(context.Context, *VerifyConfigRequest) (*VerifyConfigResponse, error)
	mustEmbedUnimplementedSzConfigServer()
}

// UnimplementedSzConfigServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSzConfigServer struct{}

func (UnimplementedSzConfigServer) AddDataSource(context.Context, *AddDataSourceRequest) (*AddDataSourceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddDataSource not implemented")
}
func (UnimplementedSzConfigServer) DeleteDataSource(context.Context, *DeleteDataSourceRequest) (*DeleteDataSourceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDataSource not implemented")
}
func (UnimplementedSzConfigServer) GetDataSources(context.Context, *GetDataSourcesRequest) (*GetDataSourcesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDataSources not implemented")
}
func (UnimplementedSzConfigServer) VerifyConfig(context.Context, *VerifyConfigRequest) (*VerifyConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyConfig not implemented")
}
func (UnimplementedSzConfigServer) mustEmbedUnimplementedSzConfigServer() {}
func (UnimplementedSzConfigServer) testEmbeddedByValue()                  {}

// UnsafeSzConfigServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SzConfigServer will
// result in compilation errors.
type UnsafeSzConfigServer interface {
	mustEmbedUnimplementedSzConfigServer()
}

func RegisterSzConfigServer(s grpc.ServiceRegistrar, srv SzConfigServer) {
	// If the following call pancis, it indicates UnimplementedSzConfigServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&SzConfig_ServiceDesc, srv)
}

func _SzConfig_AddDataSource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddDataSourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SzConfigServer).AddDataSource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SzConfig_AddDataSource_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SzConfigServer).AddDataSource(ctx, req.(*AddDataSourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SzConfig_DeleteDataSource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDataSourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SzConfigServer).DeleteDataSource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SzConfig_DeleteDataSource_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SzConfigServer).DeleteDataSource(ctx, req.(*DeleteDataSourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SzConfig_GetDataSources_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDataSourcesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SzConfigServer).GetDataSources(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SzConfig_GetDataSources_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SzConfigServer).GetDataSources(ctx, req.(*GetDataSourcesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SzConfig_VerifyConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SzConfigServer).VerifyConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SzConfig_VerifyConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SzConfigServer).VerifyConfig(ctx, req.(*VerifyConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SzConfig_ServiceDesc is the grpc.ServiceDesc for SzConfig service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SzConfig_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "szconfig.SzConfig",
	HandlerType: (*SzConfigServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddDataSource",
			Handler:    _SzConfig_AddDataSource_Handler,
		},
		{
			MethodName: "DeleteDataSource",
			Handler:    _SzConfig_DeleteDataSource_Handler,
		},
		{
			MethodName: "GetDataSources",
			Handler:    _SzConfig_GetDataSources_Handler,
		},
		{
			MethodName: "VerifyConfig",
			Handler:    _SzConfig_VerifyConfig_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "szconfig.proto",
}
