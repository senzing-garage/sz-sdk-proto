// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.12.4
// source: szengine.proto

package szengine

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	SzEngine_AddRecord_FullMethodName                         = "/szengine.SzEngine/AddRecord"
	SzEngine_CloseExport_FullMethodName                       = "/szengine.SzEngine/CloseExport"
	SzEngine_CountRedoRecords_FullMethodName                  = "/szengine.SzEngine/CountRedoRecords"
	SzEngine_DeleteRecord_FullMethodName                      = "/szengine.SzEngine/DeleteRecord"
	SzEngine_ExportCsvEntityReport_FullMethodName             = "/szengine.SzEngine/ExportCsvEntityReport"
	SzEngine_ExportJsonEntityReport_FullMethodName            = "/szengine.SzEngine/ExportJsonEntityReport"
	SzEngine_FetchNext_FullMethodName                         = "/szengine.SzEngine/FetchNext"
	SzEngine_FindInterestingEntitiesByEntityId_FullMethodName = "/szengine.SzEngine/FindInterestingEntitiesByEntityId"
	SzEngine_FindInterestingEntitiesByRecordId_FullMethodName = "/szengine.SzEngine/FindInterestingEntitiesByRecordId"
	SzEngine_FindNetworkByEntityId_FullMethodName             = "/szengine.SzEngine/FindNetworkByEntityId"
	SzEngine_FindNetworkByRecordId_FullMethodName             = "/szengine.SzEngine/FindNetworkByRecordId"
	SzEngine_FindPathByEntityId_FullMethodName                = "/szengine.SzEngine/FindPathByEntityId"
	SzEngine_FindPathByRecordId_FullMethodName                = "/szengine.SzEngine/FindPathByRecordId"
	SzEngine_GetActiveConfigId_FullMethodName                 = "/szengine.SzEngine/GetActiveConfigId"
	SzEngine_GetEntityByEntityId_FullMethodName               = "/szengine.SzEngine/GetEntityByEntityId"
	SzEngine_GetEntityByRecordId_FullMethodName               = "/szengine.SzEngine/GetEntityByRecordId"
	SzEngine_GetRecord_FullMethodName                         = "/szengine.SzEngine/GetRecord"
	SzEngine_GetRedoRecord_FullMethodName                     = "/szengine.SzEngine/GetRedoRecord"
	SzEngine_GetStats_FullMethodName                          = "/szengine.SzEngine/GetStats"
	SzEngine_GetVirtualEntityByRecordId_FullMethodName        = "/szengine.SzEngine/GetVirtualEntityByRecordId"
	SzEngine_HowEntityByEntityId_FullMethodName               = "/szengine.SzEngine/HowEntityByEntityId"
	SzEngine_PreprocessRecord_FullMethodName                  = "/szengine.SzEngine/PreprocessRecord"
	SzEngine_PrimeEngine_FullMethodName                       = "/szengine.SzEngine/PrimeEngine"
	SzEngine_ProcessRedoRecord_FullMethodName                 = "/szengine.SzEngine/ProcessRedoRecord"
	SzEngine_ReevaluateEntity_FullMethodName                  = "/szengine.SzEngine/ReevaluateEntity"
	SzEngine_ReevaluateRecord_FullMethodName                  = "/szengine.SzEngine/ReevaluateRecord"
	SzEngine_Reinitialize_FullMethodName                      = "/szengine.SzEngine/Reinitialize"
	SzEngine_SearchByAttributes_FullMethodName                = "/szengine.SzEngine/SearchByAttributes"
	SzEngine_StreamExportCsvEntityReport_FullMethodName       = "/szengine.SzEngine/StreamExportCsvEntityReport"
	SzEngine_StreamExportJsonEntityReport_FullMethodName      = "/szengine.SzEngine/StreamExportJsonEntityReport"
	SzEngine_WhyEntities_FullMethodName                       = "/szengine.SzEngine/WhyEntities"
	SzEngine_WhyRecordInEntity_FullMethodName                 = "/szengine.SzEngine/WhyRecordInEntity"
	SzEngine_WhyRecords_FullMethodName                        = "/szengine.SzEngine/WhyRecords"
)

// SzEngineClient is the client API for SzEngine service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SzEngineClient interface {
	AddRecord(ctx context.Context, in *AddRecordRequest, opts ...grpc.CallOption) (*AddRecordResponse, error)
	CloseExport(ctx context.Context, in *CloseExportRequest, opts ...grpc.CallOption) (*CloseExportResponse, error)
	CountRedoRecords(ctx context.Context, in *CountRedoRecordsRequest, opts ...grpc.CallOption) (*CountRedoRecordsResponse, error)
	DeleteRecord(ctx context.Context, in *DeleteRecordRequest, opts ...grpc.CallOption) (*DeleteRecordResponse, error)
	ExportCsvEntityReport(ctx context.Context, in *ExportCsvEntityReportRequest, opts ...grpc.CallOption) (*ExportCsvEntityReportResponse, error)
	ExportJsonEntityReport(ctx context.Context, in *ExportJsonEntityReportRequest, opts ...grpc.CallOption) (*ExportJsonEntityReportResponse, error)
	FetchNext(ctx context.Context, in *FetchNextRequest, opts ...grpc.CallOption) (*FetchNextResponse, error)
	FindInterestingEntitiesByEntityId(ctx context.Context, in *FindInterestingEntitiesByEntityIdRequest, opts ...grpc.CallOption) (*FindInterestingEntitiesByEntityIdResponse, error)
	FindInterestingEntitiesByRecordId(ctx context.Context, in *FindInterestingEntitiesByRecordIdRequest, opts ...grpc.CallOption) (*FindInterestingEntitiesByRecordIdResponse, error)
	FindNetworkByEntityId(ctx context.Context, in *FindNetworkByEntityIdRequest, opts ...grpc.CallOption) (*FindNetworkByEntityIdResponse, error)
	FindNetworkByRecordId(ctx context.Context, in *FindNetworkByRecordIdRequest, opts ...grpc.CallOption) (*FindNetworkByRecordIdResponse, error)
	FindPathByEntityId(ctx context.Context, in *FindPathByEntityIdRequest, opts ...grpc.CallOption) (*FindPathByEntityIdResponse, error)
	FindPathByRecordId(ctx context.Context, in *FindPathByRecordIdRequest, opts ...grpc.CallOption) (*FindPathByRecordIdResponse, error)
	GetActiveConfigId(ctx context.Context, in *GetActiveConfigIdRequest, opts ...grpc.CallOption) (*GetActiveConfigIdResponse, error)
	GetEntityByEntityId(ctx context.Context, in *GetEntityByEntityIdRequest, opts ...grpc.CallOption) (*GetEntityByEntityIdResponse, error)
	GetEntityByRecordId(ctx context.Context, in *GetEntityByRecordIdRequest, opts ...grpc.CallOption) (*GetEntityByRecordIdResponse, error)
	GetRecord(ctx context.Context, in *GetRecordRequest, opts ...grpc.CallOption) (*GetRecordResponse, error)
	GetRedoRecord(ctx context.Context, in *GetRedoRecordRequest, opts ...grpc.CallOption) (*GetRedoRecordResponse, error)
	GetStats(ctx context.Context, in *GetStatsRequest, opts ...grpc.CallOption) (*GetStatsResponse, error)
	GetVirtualEntityByRecordId(ctx context.Context, in *GetVirtualEntityByRecordIdRequest, opts ...grpc.CallOption) (*GetVirtualEntityByRecordIdResponse, error)
	HowEntityByEntityId(ctx context.Context, in *HowEntityByEntityIdRequest, opts ...grpc.CallOption) (*HowEntityByEntityIdResponse, error)
	PreprocessRecord(ctx context.Context, in *PreprocessRecordRequest, opts ...grpc.CallOption) (*PreprocessRecordResponse, error)
	PrimeEngine(ctx context.Context, in *PrimeEngineRequest, opts ...grpc.CallOption) (*PrimeEngineResponse, error)
	ProcessRedoRecord(ctx context.Context, in *ProcessRedoRecordRequest, opts ...grpc.CallOption) (*ProcessRedoRecordResponse, error)
	ReevaluateEntity(ctx context.Context, in *ReevaluateEntityRequest, opts ...grpc.CallOption) (*ReevaluateEntityResponse, error)
	ReevaluateRecord(ctx context.Context, in *ReevaluateRecordRequest, opts ...grpc.CallOption) (*ReevaluateRecordResponse, error)
	Reinitialize(ctx context.Context, in *ReinitializeRequest, opts ...grpc.CallOption) (*ReinitializeResponse, error)
	SearchByAttributes(ctx context.Context, in *SearchByAttributesRequest, opts ...grpc.CallOption) (*SearchByAttributesResponse, error)
	StreamExportCsvEntityReport(ctx context.Context, in *StreamExportCsvEntityReportRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[StreamExportCsvEntityReportResponse], error)
	StreamExportJsonEntityReport(ctx context.Context, in *StreamExportJsonEntityReportRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[StreamExportJsonEntityReportResponse], error)
	WhyEntities(ctx context.Context, in *WhyEntitiesRequest, opts ...grpc.CallOption) (*WhyEntitiesResponse, error)
	WhyRecordInEntity(ctx context.Context, in *WhyRecordInEntityRequest, opts ...grpc.CallOption) (*WhyRecordInEntityResponse, error)
	WhyRecords(ctx context.Context, in *WhyRecordsRequest, opts ...grpc.CallOption) (*WhyRecordsResponse, error)
}

type szEngineClient struct {
	cc grpc.ClientConnInterface
}

func NewSzEngineClient(cc grpc.ClientConnInterface) SzEngineClient {
	return &szEngineClient{cc}
}

func (c *szEngineClient) AddRecord(ctx context.Context, in *AddRecordRequest, opts ...grpc.CallOption) (*AddRecordResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddRecordResponse)
	err := c.cc.Invoke(ctx, SzEngine_AddRecord_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *szEngineClient) CloseExport(ctx context.Context, in *CloseExportRequest, opts ...grpc.CallOption) (*CloseExportResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CloseExportResponse)
	err := c.cc.Invoke(ctx, SzEngine_CloseExport_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *szEngineClient) CountRedoRecords(ctx context.Context, in *CountRedoRecordsRequest, opts ...grpc.CallOption) (*CountRedoRecordsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CountRedoRecordsResponse)
	err := c.cc.Invoke(ctx, SzEngine_CountRedoRecords_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *szEngineClient) DeleteRecord(ctx context.Context, in *DeleteRecordRequest, opts ...grpc.CallOption) (*DeleteRecordResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteRecordResponse)
	err := c.cc.Invoke(ctx, SzEngine_DeleteRecord_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *szEngineClient) ExportCsvEntityReport(ctx context.Context, in *ExportCsvEntityReportRequest, opts ...grpc.CallOption) (*ExportCsvEntityReportResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ExportCsvEntityReportResponse)
	err := c.cc.Invoke(ctx, SzEngine_ExportCsvEntityReport_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *szEngineClient) ExportJsonEntityReport(ctx context.Context, in *ExportJsonEntityReportRequest, opts ...grpc.CallOption) (*ExportJsonEntityReportResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ExportJsonEntityReportResponse)
	err := c.cc.Invoke(ctx, SzEngine_ExportJsonEntityReport_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *szEngineClient) FetchNext(ctx context.Context, in *FetchNextRequest, opts ...grpc.CallOption) (*FetchNextResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FetchNextResponse)
	err := c.cc.Invoke(ctx, SzEngine_FetchNext_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *szEngineClient) FindInterestingEntitiesByEntityId(ctx context.Context, in *FindInterestingEntitiesByEntityIdRequest, opts ...grpc.CallOption) (*FindInterestingEntitiesByEntityIdResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FindInterestingEntitiesByEntityIdResponse)
	err := c.cc.Invoke(ctx, SzEngine_FindInterestingEntitiesByEntityId_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *szEngineClient) FindInterestingEntitiesByRecordId(ctx context.Context, in *FindInterestingEntitiesByRecordIdRequest, opts ...grpc.CallOption) (*FindInterestingEntitiesByRecordIdResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FindInterestingEntitiesByRecordIdResponse)
	err := c.cc.Invoke(ctx, SzEngine_FindInterestingEntitiesByRecordId_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *szEngineClient) FindNetworkByEntityId(ctx context.Context, in *FindNetworkByEntityIdRequest, opts ...grpc.CallOption) (*FindNetworkByEntityIdResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FindNetworkByEntityIdResponse)
	err := c.cc.Invoke(ctx, SzEngine_FindNetworkByEntityId_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *szEngineClient) FindNetworkByRecordId(ctx context.Context, in *FindNetworkByRecordIdRequest, opts ...grpc.CallOption) (*FindNetworkByRecordIdResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FindNetworkByRecordIdResponse)
	err := c.cc.Invoke(ctx, SzEngine_FindNetworkByRecordId_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *szEngineClient) FindPathByEntityId(ctx context.Context, in *FindPathByEntityIdRequest, opts ...grpc.CallOption) (*FindPathByEntityIdResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FindPathByEntityIdResponse)
	err := c.cc.Invoke(ctx, SzEngine_FindPathByEntityId_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *szEngineClient) FindPathByRecordId(ctx context.Context, in *FindPathByRecordIdRequest, opts ...grpc.CallOption) (*FindPathByRecordIdResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FindPathByRecordIdResponse)
	err := c.cc.Invoke(ctx, SzEngine_FindPathByRecordId_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *szEngineClient) GetActiveConfigId(ctx context.Context, in *GetActiveConfigIdRequest, opts ...grpc.CallOption) (*GetActiveConfigIdResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetActiveConfigIdResponse)
	err := c.cc.Invoke(ctx, SzEngine_GetActiveConfigId_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *szEngineClient) GetEntityByEntityId(ctx context.Context, in *GetEntityByEntityIdRequest, opts ...grpc.CallOption) (*GetEntityByEntityIdResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetEntityByEntityIdResponse)
	err := c.cc.Invoke(ctx, SzEngine_GetEntityByEntityId_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *szEngineClient) GetEntityByRecordId(ctx context.Context, in *GetEntityByRecordIdRequest, opts ...grpc.CallOption) (*GetEntityByRecordIdResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetEntityByRecordIdResponse)
	err := c.cc.Invoke(ctx, SzEngine_GetEntityByRecordId_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *szEngineClient) GetRecord(ctx context.Context, in *GetRecordRequest, opts ...grpc.CallOption) (*GetRecordResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetRecordResponse)
	err := c.cc.Invoke(ctx, SzEngine_GetRecord_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *szEngineClient) GetRedoRecord(ctx context.Context, in *GetRedoRecordRequest, opts ...grpc.CallOption) (*GetRedoRecordResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetRedoRecordResponse)
	err := c.cc.Invoke(ctx, SzEngine_GetRedoRecord_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *szEngineClient) GetStats(ctx context.Context, in *GetStatsRequest, opts ...grpc.CallOption) (*GetStatsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetStatsResponse)
	err := c.cc.Invoke(ctx, SzEngine_GetStats_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *szEngineClient) GetVirtualEntityByRecordId(ctx context.Context, in *GetVirtualEntityByRecordIdRequest, opts ...grpc.CallOption) (*GetVirtualEntityByRecordIdResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetVirtualEntityByRecordIdResponse)
	err := c.cc.Invoke(ctx, SzEngine_GetVirtualEntityByRecordId_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *szEngineClient) HowEntityByEntityId(ctx context.Context, in *HowEntityByEntityIdRequest, opts ...grpc.CallOption) (*HowEntityByEntityIdResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HowEntityByEntityIdResponse)
	err := c.cc.Invoke(ctx, SzEngine_HowEntityByEntityId_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *szEngineClient) PreprocessRecord(ctx context.Context, in *PreprocessRecordRequest, opts ...grpc.CallOption) (*PreprocessRecordResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PreprocessRecordResponse)
	err := c.cc.Invoke(ctx, SzEngine_PreprocessRecord_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *szEngineClient) PrimeEngine(ctx context.Context, in *PrimeEngineRequest, opts ...grpc.CallOption) (*PrimeEngineResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PrimeEngineResponse)
	err := c.cc.Invoke(ctx, SzEngine_PrimeEngine_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *szEngineClient) ProcessRedoRecord(ctx context.Context, in *ProcessRedoRecordRequest, opts ...grpc.CallOption) (*ProcessRedoRecordResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ProcessRedoRecordResponse)
	err := c.cc.Invoke(ctx, SzEngine_ProcessRedoRecord_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *szEngineClient) ReevaluateEntity(ctx context.Context, in *ReevaluateEntityRequest, opts ...grpc.CallOption) (*ReevaluateEntityResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReevaluateEntityResponse)
	err := c.cc.Invoke(ctx, SzEngine_ReevaluateEntity_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *szEngineClient) ReevaluateRecord(ctx context.Context, in *ReevaluateRecordRequest, opts ...grpc.CallOption) (*ReevaluateRecordResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReevaluateRecordResponse)
	err := c.cc.Invoke(ctx, SzEngine_ReevaluateRecord_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *szEngineClient) Reinitialize(ctx context.Context, in *ReinitializeRequest, opts ...grpc.CallOption) (*ReinitializeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReinitializeResponse)
	err := c.cc.Invoke(ctx, SzEngine_Reinitialize_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *szEngineClient) SearchByAttributes(ctx context.Context, in *SearchByAttributesRequest, opts ...grpc.CallOption) (*SearchByAttributesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SearchByAttributesResponse)
	err := c.cc.Invoke(ctx, SzEngine_SearchByAttributes_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *szEngineClient) StreamExportCsvEntityReport(ctx context.Context, in *StreamExportCsvEntityReportRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[StreamExportCsvEntityReportResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &SzEngine_ServiceDesc.Streams[0], SzEngine_StreamExportCsvEntityReport_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[StreamExportCsvEntityReportRequest, StreamExportCsvEntityReportResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type SzEngine_StreamExportCsvEntityReportClient = grpc.ServerStreamingClient[StreamExportCsvEntityReportResponse]

func (c *szEngineClient) StreamExportJsonEntityReport(ctx context.Context, in *StreamExportJsonEntityReportRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[StreamExportJsonEntityReportResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &SzEngine_ServiceDesc.Streams[1], SzEngine_StreamExportJsonEntityReport_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[StreamExportJsonEntityReportRequest, StreamExportJsonEntityReportResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type SzEngine_StreamExportJsonEntityReportClient = grpc.ServerStreamingClient[StreamExportJsonEntityReportResponse]

func (c *szEngineClient) WhyEntities(ctx context.Context, in *WhyEntitiesRequest, opts ...grpc.CallOption) (*WhyEntitiesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(WhyEntitiesResponse)
	err := c.cc.Invoke(ctx, SzEngine_WhyEntities_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *szEngineClient) WhyRecordInEntity(ctx context.Context, in *WhyRecordInEntityRequest, opts ...grpc.CallOption) (*WhyRecordInEntityResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(WhyRecordInEntityResponse)
	err := c.cc.Invoke(ctx, SzEngine_WhyRecordInEntity_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *szEngineClient) WhyRecords(ctx context.Context, in *WhyRecordsRequest, opts ...grpc.CallOption) (*WhyRecordsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(WhyRecordsResponse)
	err := c.cc.Invoke(ctx, SzEngine_WhyRecords_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SzEngineServer is the server API for SzEngine service.
// All implementations must embed UnimplementedSzEngineServer
// for forward compatibility.
type SzEngineServer interface {
	AddRecord(context.Context, *AddRecordRequest) (*AddRecordResponse, error)
	CloseExport(context.Context, *CloseExportRequest) (*CloseExportResponse, error)
	CountRedoRecords(context.Context, *CountRedoRecordsRequest) (*CountRedoRecordsResponse, error)
	DeleteRecord(context.Context, *DeleteRecordRequest) (*DeleteRecordResponse, error)
	ExportCsvEntityReport(context.Context, *ExportCsvEntityReportRequest) (*ExportCsvEntityReportResponse, error)
	ExportJsonEntityReport(context.Context, *ExportJsonEntityReportRequest) (*ExportJsonEntityReportResponse, error)
	FetchNext(context.Context, *FetchNextRequest) (*FetchNextResponse, error)
	FindInterestingEntitiesByEntityId(context.Context, *FindInterestingEntitiesByEntityIdRequest) (*FindInterestingEntitiesByEntityIdResponse, error)
	FindInterestingEntitiesByRecordId(context.Context, *FindInterestingEntitiesByRecordIdRequest) (*FindInterestingEntitiesByRecordIdResponse, error)
	FindNetworkByEntityId(context.Context, *FindNetworkByEntityIdRequest) (*FindNetworkByEntityIdResponse, error)
	FindNetworkByRecordId(context.Context, *FindNetworkByRecordIdRequest) (*FindNetworkByRecordIdResponse, error)
	FindPathByEntityId(context.Context, *FindPathByEntityIdRequest) (*FindPathByEntityIdResponse, error)
	FindPathByRecordId(context.Context, *FindPathByRecordIdRequest) (*FindPathByRecordIdResponse, error)
	GetActiveConfigId(context.Context, *GetActiveConfigIdRequest) (*GetActiveConfigIdResponse, error)
	GetEntityByEntityId(context.Context, *GetEntityByEntityIdRequest) (*GetEntityByEntityIdResponse, error)
	GetEntityByRecordId(context.Context, *GetEntityByRecordIdRequest) (*GetEntityByRecordIdResponse, error)
	GetRecord(context.Context, *GetRecordRequest) (*GetRecordResponse, error)
	GetRedoRecord(context.Context, *GetRedoRecordRequest) (*GetRedoRecordResponse, error)
	GetStats(context.Context, *GetStatsRequest) (*GetStatsResponse, error)
	GetVirtualEntityByRecordId(context.Context, *GetVirtualEntityByRecordIdRequest) (*GetVirtualEntityByRecordIdResponse, error)
	HowEntityByEntityId(context.Context, *HowEntityByEntityIdRequest) (*HowEntityByEntityIdResponse, error)
	PreprocessRecord(context.Context, *PreprocessRecordRequest) (*PreprocessRecordResponse, error)
	PrimeEngine(context.Context, *PrimeEngineRequest) (*PrimeEngineResponse, error)
	ProcessRedoRecord(context.Context, *ProcessRedoRecordRequest) (*ProcessRedoRecordResponse, error)
	ReevaluateEntity(context.Context, *ReevaluateEntityRequest) (*ReevaluateEntityResponse, error)
	ReevaluateRecord(context.Context, *ReevaluateRecordRequest) (*ReevaluateRecordResponse, error)
	Reinitialize(context.Context, *ReinitializeRequest) (*ReinitializeResponse, error)
	SearchByAttributes(context.Context, *SearchByAttributesRequest) (*SearchByAttributesResponse, error)
	StreamExportCsvEntityReport(*StreamExportCsvEntityReportRequest, grpc.ServerStreamingServer[StreamExportCsvEntityReportResponse]) error
	StreamExportJsonEntityReport(*StreamExportJsonEntityReportRequest, grpc.ServerStreamingServer[StreamExportJsonEntityReportResponse]) error
	WhyEntities(context.Context, *WhyEntitiesRequest) (*WhyEntitiesResponse, error)
	WhyRecordInEntity(context.Context, *WhyRecordInEntityRequest) (*WhyRecordInEntityResponse, error)
	WhyRecords(context.Context, *WhyRecordsRequest) (*WhyRecordsResponse, error)
	mustEmbedUnimplementedSzEngineServer()
}

// UnimplementedSzEngineServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSzEngineServer struct{}

func (UnimplementedSzEngineServer) AddRecord(context.Context, *AddRecordRequest) (*AddRecordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddRecord not implemented")
}
func (UnimplementedSzEngineServer) CloseExport(context.Context, *CloseExportRequest) (*CloseExportResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CloseExport not implemented")
}
func (UnimplementedSzEngineServer) CountRedoRecords(context.Context, *CountRedoRecordsRequest) (*CountRedoRecordsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountRedoRecords not implemented")
}
func (UnimplementedSzEngineServer) DeleteRecord(context.Context, *DeleteRecordRequest) (*DeleteRecordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRecord not implemented")
}
func (UnimplementedSzEngineServer) ExportCsvEntityReport(context.Context, *ExportCsvEntityReportRequest) (*ExportCsvEntityReportResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExportCsvEntityReport not implemented")
}
func (UnimplementedSzEngineServer) ExportJsonEntityReport(context.Context, *ExportJsonEntityReportRequest) (*ExportJsonEntityReportResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExportJsonEntityReport not implemented")
}
func (UnimplementedSzEngineServer) FetchNext(context.Context, *FetchNextRequest) (*FetchNextResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchNext not implemented")
}
func (UnimplementedSzEngineServer) FindInterestingEntitiesByEntityId(context.Context, *FindInterestingEntitiesByEntityIdRequest) (*FindInterestingEntitiesByEntityIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindInterestingEntitiesByEntityId not implemented")
}
func (UnimplementedSzEngineServer) FindInterestingEntitiesByRecordId(context.Context, *FindInterestingEntitiesByRecordIdRequest) (*FindInterestingEntitiesByRecordIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindInterestingEntitiesByRecordId not implemented")
}
func (UnimplementedSzEngineServer) FindNetworkByEntityId(context.Context, *FindNetworkByEntityIdRequest) (*FindNetworkByEntityIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindNetworkByEntityId not implemented")
}
func (UnimplementedSzEngineServer) FindNetworkByRecordId(context.Context, *FindNetworkByRecordIdRequest) (*FindNetworkByRecordIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindNetworkByRecordId not implemented")
}
func (UnimplementedSzEngineServer) FindPathByEntityId(context.Context, *FindPathByEntityIdRequest) (*FindPathByEntityIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindPathByEntityId not implemented")
}
func (UnimplementedSzEngineServer) FindPathByRecordId(context.Context, *FindPathByRecordIdRequest) (*FindPathByRecordIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindPathByRecordId not implemented")
}
func (UnimplementedSzEngineServer) GetActiveConfigId(context.Context, *GetActiveConfigIdRequest) (*GetActiveConfigIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetActiveConfigId not implemented")
}
func (UnimplementedSzEngineServer) GetEntityByEntityId(context.Context, *GetEntityByEntityIdRequest) (*GetEntityByEntityIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEntityByEntityId not implemented")
}
func (UnimplementedSzEngineServer) GetEntityByRecordId(context.Context, *GetEntityByRecordIdRequest) (*GetEntityByRecordIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEntityByRecordId not implemented")
}
func (UnimplementedSzEngineServer) GetRecord(context.Context, *GetRecordRequest) (*GetRecordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRecord not implemented")
}
func (UnimplementedSzEngineServer) GetRedoRecord(context.Context, *GetRedoRecordRequest) (*GetRedoRecordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRedoRecord not implemented")
}
func (UnimplementedSzEngineServer) GetStats(context.Context, *GetStatsRequest) (*GetStatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStats not implemented")
}
func (UnimplementedSzEngineServer) GetVirtualEntityByRecordId(context.Context, *GetVirtualEntityByRecordIdRequest) (*GetVirtualEntityByRecordIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVirtualEntityByRecordId not implemented")
}
func (UnimplementedSzEngineServer) HowEntityByEntityId(context.Context, *HowEntityByEntityIdRequest) (*HowEntityByEntityIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HowEntityByEntityId not implemented")
}
func (UnimplementedSzEngineServer) PreprocessRecord(context.Context, *PreprocessRecordRequest) (*PreprocessRecordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PreprocessRecord not implemented")
}
func (UnimplementedSzEngineServer) PrimeEngine(context.Context, *PrimeEngineRequest) (*PrimeEngineResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PrimeEngine not implemented")
}
func (UnimplementedSzEngineServer) ProcessRedoRecord(context.Context, *ProcessRedoRecordRequest) (*ProcessRedoRecordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProcessRedoRecord not implemented")
}
func (UnimplementedSzEngineServer) ReevaluateEntity(context.Context, *ReevaluateEntityRequest) (*ReevaluateEntityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReevaluateEntity not implemented")
}
func (UnimplementedSzEngineServer) ReevaluateRecord(context.Context, *ReevaluateRecordRequest) (*ReevaluateRecordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReevaluateRecord not implemented")
}
func (UnimplementedSzEngineServer) Reinitialize(context.Context, *ReinitializeRequest) (*ReinitializeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Reinitialize not implemented")
}
func (UnimplementedSzEngineServer) SearchByAttributes(context.Context, *SearchByAttributesRequest) (*SearchByAttributesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchByAttributes not implemented")
}
func (UnimplementedSzEngineServer) StreamExportCsvEntityReport(*StreamExportCsvEntityReportRequest, grpc.ServerStreamingServer[StreamExportCsvEntityReportResponse]) error {
	return status.Errorf(codes.Unimplemented, "method StreamExportCsvEntityReport not implemented")
}
func (UnimplementedSzEngineServer) StreamExportJsonEntityReport(*StreamExportJsonEntityReportRequest, grpc.ServerStreamingServer[StreamExportJsonEntityReportResponse]) error {
	return status.Errorf(codes.Unimplemented, "method StreamExportJsonEntityReport not implemented")
}
func (UnimplementedSzEngineServer) WhyEntities(context.Context, *WhyEntitiesRequest) (*WhyEntitiesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WhyEntities not implemented")
}
func (UnimplementedSzEngineServer) WhyRecordInEntity(context.Context, *WhyRecordInEntityRequest) (*WhyRecordInEntityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WhyRecordInEntity not implemented")
}
func (UnimplementedSzEngineServer) WhyRecords(context.Context, *WhyRecordsRequest) (*WhyRecordsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WhyRecords not implemented")
}
func (UnimplementedSzEngineServer) mustEmbedUnimplementedSzEngineServer() {}
func (UnimplementedSzEngineServer) testEmbeddedByValue()                  {}

// UnsafeSzEngineServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SzEngineServer will
// result in compilation errors.
type UnsafeSzEngineServer interface {
	mustEmbedUnimplementedSzEngineServer()
}

func RegisterSzEngineServer(s grpc.ServiceRegistrar, srv SzEngineServer) {
	// If the following call pancis, it indicates UnimplementedSzEngineServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&SzEngine_ServiceDesc, srv)
}

func _SzEngine_AddRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddRecordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SzEngineServer).AddRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SzEngine_AddRecord_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SzEngineServer).AddRecord(ctx, req.(*AddRecordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SzEngine_CloseExport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CloseExportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SzEngineServer).CloseExport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SzEngine_CloseExport_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SzEngineServer).CloseExport(ctx, req.(*CloseExportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SzEngine_CountRedoRecords_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CountRedoRecordsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SzEngineServer).CountRedoRecords(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SzEngine_CountRedoRecords_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SzEngineServer).CountRedoRecords(ctx, req.(*CountRedoRecordsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SzEngine_DeleteRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRecordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SzEngineServer).DeleteRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SzEngine_DeleteRecord_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SzEngineServer).DeleteRecord(ctx, req.(*DeleteRecordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SzEngine_ExportCsvEntityReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExportCsvEntityReportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SzEngineServer).ExportCsvEntityReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SzEngine_ExportCsvEntityReport_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SzEngineServer).ExportCsvEntityReport(ctx, req.(*ExportCsvEntityReportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SzEngine_ExportJsonEntityReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExportJsonEntityReportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SzEngineServer).ExportJsonEntityReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SzEngine_ExportJsonEntityReport_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SzEngineServer).ExportJsonEntityReport(ctx, req.(*ExportJsonEntityReportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SzEngine_FetchNext_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchNextRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SzEngineServer).FetchNext(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SzEngine_FetchNext_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SzEngineServer).FetchNext(ctx, req.(*FetchNextRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SzEngine_FindInterestingEntitiesByEntityId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindInterestingEntitiesByEntityIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SzEngineServer).FindInterestingEntitiesByEntityId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SzEngine_FindInterestingEntitiesByEntityId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SzEngineServer).FindInterestingEntitiesByEntityId(ctx, req.(*FindInterestingEntitiesByEntityIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SzEngine_FindInterestingEntitiesByRecordId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindInterestingEntitiesByRecordIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SzEngineServer).FindInterestingEntitiesByRecordId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SzEngine_FindInterestingEntitiesByRecordId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SzEngineServer).FindInterestingEntitiesByRecordId(ctx, req.(*FindInterestingEntitiesByRecordIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SzEngine_FindNetworkByEntityId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindNetworkByEntityIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SzEngineServer).FindNetworkByEntityId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SzEngine_FindNetworkByEntityId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SzEngineServer).FindNetworkByEntityId(ctx, req.(*FindNetworkByEntityIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SzEngine_FindNetworkByRecordId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindNetworkByRecordIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SzEngineServer).FindNetworkByRecordId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SzEngine_FindNetworkByRecordId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SzEngineServer).FindNetworkByRecordId(ctx, req.(*FindNetworkByRecordIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SzEngine_FindPathByEntityId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindPathByEntityIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SzEngineServer).FindPathByEntityId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SzEngine_FindPathByEntityId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SzEngineServer).FindPathByEntityId(ctx, req.(*FindPathByEntityIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SzEngine_FindPathByRecordId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindPathByRecordIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SzEngineServer).FindPathByRecordId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SzEngine_FindPathByRecordId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SzEngineServer).FindPathByRecordId(ctx, req.(*FindPathByRecordIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SzEngine_GetActiveConfigId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetActiveConfigIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SzEngineServer).GetActiveConfigId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SzEngine_GetActiveConfigId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SzEngineServer).GetActiveConfigId(ctx, req.(*GetActiveConfigIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SzEngine_GetEntityByEntityId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEntityByEntityIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SzEngineServer).GetEntityByEntityId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SzEngine_GetEntityByEntityId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SzEngineServer).GetEntityByEntityId(ctx, req.(*GetEntityByEntityIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SzEngine_GetEntityByRecordId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEntityByRecordIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SzEngineServer).GetEntityByRecordId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SzEngine_GetEntityByRecordId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SzEngineServer).GetEntityByRecordId(ctx, req.(*GetEntityByRecordIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SzEngine_GetRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRecordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SzEngineServer).GetRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SzEngine_GetRecord_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SzEngineServer).GetRecord(ctx, req.(*GetRecordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SzEngine_GetRedoRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRedoRecordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SzEngineServer).GetRedoRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SzEngine_GetRedoRecord_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SzEngineServer).GetRedoRecord(ctx, req.(*GetRedoRecordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SzEngine_GetStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SzEngineServer).GetStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SzEngine_GetStats_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SzEngineServer).GetStats(ctx, req.(*GetStatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SzEngine_GetVirtualEntityByRecordId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVirtualEntityByRecordIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SzEngineServer).GetVirtualEntityByRecordId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SzEngine_GetVirtualEntityByRecordId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SzEngineServer).GetVirtualEntityByRecordId(ctx, req.(*GetVirtualEntityByRecordIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SzEngine_HowEntityByEntityId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HowEntityByEntityIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SzEngineServer).HowEntityByEntityId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SzEngine_HowEntityByEntityId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SzEngineServer).HowEntityByEntityId(ctx, req.(*HowEntityByEntityIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SzEngine_PreprocessRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PreprocessRecordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SzEngineServer).PreprocessRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SzEngine_PreprocessRecord_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SzEngineServer).PreprocessRecord(ctx, req.(*PreprocessRecordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SzEngine_PrimeEngine_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PrimeEngineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SzEngineServer).PrimeEngine(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SzEngine_PrimeEngine_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SzEngineServer).PrimeEngine(ctx, req.(*PrimeEngineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SzEngine_ProcessRedoRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProcessRedoRecordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SzEngineServer).ProcessRedoRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SzEngine_ProcessRedoRecord_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SzEngineServer).ProcessRedoRecord(ctx, req.(*ProcessRedoRecordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SzEngine_ReevaluateEntity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReevaluateEntityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SzEngineServer).ReevaluateEntity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SzEngine_ReevaluateEntity_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SzEngineServer).ReevaluateEntity(ctx, req.(*ReevaluateEntityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SzEngine_ReevaluateRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReevaluateRecordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SzEngineServer).ReevaluateRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SzEngine_ReevaluateRecord_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SzEngineServer).ReevaluateRecord(ctx, req.(*ReevaluateRecordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SzEngine_Reinitialize_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReinitializeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SzEngineServer).Reinitialize(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SzEngine_Reinitialize_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SzEngineServer).Reinitialize(ctx, req.(*ReinitializeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SzEngine_SearchByAttributes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchByAttributesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SzEngineServer).SearchByAttributes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SzEngine_SearchByAttributes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SzEngineServer).SearchByAttributes(ctx, req.(*SearchByAttributesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SzEngine_StreamExportCsvEntityReport_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamExportCsvEntityReportRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SzEngineServer).StreamExportCsvEntityReport(m, &grpc.GenericServerStream[StreamExportCsvEntityReportRequest, StreamExportCsvEntityReportResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type SzEngine_StreamExportCsvEntityReportServer = grpc.ServerStreamingServer[StreamExportCsvEntityReportResponse]

func _SzEngine_StreamExportJsonEntityReport_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamExportJsonEntityReportRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SzEngineServer).StreamExportJsonEntityReport(m, &grpc.GenericServerStream[StreamExportJsonEntityReportRequest, StreamExportJsonEntityReportResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type SzEngine_StreamExportJsonEntityReportServer = grpc.ServerStreamingServer[StreamExportJsonEntityReportResponse]

func _SzEngine_WhyEntities_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WhyEntitiesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SzEngineServer).WhyEntities(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SzEngine_WhyEntities_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SzEngineServer).WhyEntities(ctx, req.(*WhyEntitiesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SzEngine_WhyRecordInEntity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WhyRecordInEntityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SzEngineServer).WhyRecordInEntity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SzEngine_WhyRecordInEntity_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SzEngineServer).WhyRecordInEntity(ctx, req.(*WhyRecordInEntityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SzEngine_WhyRecords_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WhyRecordsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SzEngineServer).WhyRecords(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SzEngine_WhyRecords_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SzEngineServer).WhyRecords(ctx, req.(*WhyRecordsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SzEngine_ServiceDesc is the grpc.ServiceDesc for SzEngine service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SzEngine_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "szengine.SzEngine",
	HandlerType: (*SzEngineServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddRecord",
			Handler:    _SzEngine_AddRecord_Handler,
		},
		{
			MethodName: "CloseExport",
			Handler:    _SzEngine_CloseExport_Handler,
		},
		{
			MethodName: "CountRedoRecords",
			Handler:    _SzEngine_CountRedoRecords_Handler,
		},
		{
			MethodName: "DeleteRecord",
			Handler:    _SzEngine_DeleteRecord_Handler,
		},
		{
			MethodName: "ExportCsvEntityReport",
			Handler:    _SzEngine_ExportCsvEntityReport_Handler,
		},
		{
			MethodName: "ExportJsonEntityReport",
			Handler:    _SzEngine_ExportJsonEntityReport_Handler,
		},
		{
			MethodName: "FetchNext",
			Handler:    _SzEngine_FetchNext_Handler,
		},
		{
			MethodName: "FindInterestingEntitiesByEntityId",
			Handler:    _SzEngine_FindInterestingEntitiesByEntityId_Handler,
		},
		{
			MethodName: "FindInterestingEntitiesByRecordId",
			Handler:    _SzEngine_FindInterestingEntitiesByRecordId_Handler,
		},
		{
			MethodName: "FindNetworkByEntityId",
			Handler:    _SzEngine_FindNetworkByEntityId_Handler,
		},
		{
			MethodName: "FindNetworkByRecordId",
			Handler:    _SzEngine_FindNetworkByRecordId_Handler,
		},
		{
			MethodName: "FindPathByEntityId",
			Handler:    _SzEngine_FindPathByEntityId_Handler,
		},
		{
			MethodName: "FindPathByRecordId",
			Handler:    _SzEngine_FindPathByRecordId_Handler,
		},
		{
			MethodName: "GetActiveConfigId",
			Handler:    _SzEngine_GetActiveConfigId_Handler,
		},
		{
			MethodName: "GetEntityByEntityId",
			Handler:    _SzEngine_GetEntityByEntityId_Handler,
		},
		{
			MethodName: "GetEntityByRecordId",
			Handler:    _SzEngine_GetEntityByRecordId_Handler,
		},
		{
			MethodName: "GetRecord",
			Handler:    _SzEngine_GetRecord_Handler,
		},
		{
			MethodName: "GetRedoRecord",
			Handler:    _SzEngine_GetRedoRecord_Handler,
		},
		{
			MethodName: "GetStats",
			Handler:    _SzEngine_GetStats_Handler,
		},
		{
			MethodName: "GetVirtualEntityByRecordId",
			Handler:    _SzEngine_GetVirtualEntityByRecordId_Handler,
		},
		{
			MethodName: "HowEntityByEntityId",
			Handler:    _SzEngine_HowEntityByEntityId_Handler,
		},
		{
			MethodName: "PreprocessRecord",
			Handler:    _SzEngine_PreprocessRecord_Handler,
		},
		{
			MethodName: "PrimeEngine",
			Handler:    _SzEngine_PrimeEngine_Handler,
		},
		{
			MethodName: "ProcessRedoRecord",
			Handler:    _SzEngine_ProcessRedoRecord_Handler,
		},
		{
			MethodName: "ReevaluateEntity",
			Handler:    _SzEngine_ReevaluateEntity_Handler,
		},
		{
			MethodName: "ReevaluateRecord",
			Handler:    _SzEngine_ReevaluateRecord_Handler,
		},
		{
			MethodName: "Reinitialize",
			Handler:    _SzEngine_Reinitialize_Handler,
		},
		{
			MethodName: "SearchByAttributes",
			Handler:    _SzEngine_SearchByAttributes_Handler,
		},
		{
			MethodName: "WhyEntities",
			Handler:    _SzEngine_WhyEntities_Handler,
		},
		{
			MethodName: "WhyRecordInEntity",
			Handler:    _SzEngine_WhyRecordInEntity_Handler,
		},
		{
			MethodName: "WhyRecords",
			Handler:    _SzEngine_WhyRecords_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamExportCsvEntityReport",
			Handler:       _SzEngine_StreamExportCsvEntityReport_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "StreamExportJsonEntityReport",
			Handler:       _SzEngine_StreamExportJsonEntityReport_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "szengine.proto",
}
