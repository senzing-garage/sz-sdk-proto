// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v4.25.1
// source: szconfigmanager.proto

package szconfigmanager

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	SzConfigManager_GetConfig_FullMethodName              = "/szconfigmanager.SzConfigManager/GetConfig"
	SzConfigManager_GetConfigs_FullMethodName             = "/szconfigmanager.SzConfigManager/GetConfigs"
	SzConfigManager_GetDefaultConfigId_FullMethodName     = "/szconfigmanager.SzConfigManager/GetDefaultConfigId"
	SzConfigManager_GetTemplateConfig_FullMethodName      = "/szconfigmanager.SzConfigManager/GetTemplateConfig"
	SzConfigManager_RegisterConfig_FullMethodName         = "/szconfigmanager.SzConfigManager/RegisterConfig"
	SzConfigManager_ReplaceDefaultConfigId_FullMethodName = "/szconfigmanager.SzConfigManager/ReplaceDefaultConfigId"
	SzConfigManager_SetDefaultConfig_FullMethodName       = "/szconfigmanager.SzConfigManager/SetDefaultConfig"
	SzConfigManager_SetDefaultConfigId_FullMethodName     = "/szconfigmanager.SzConfigManager/SetDefaultConfigId"
)

// SzConfigManagerClient is the client API for SzConfigManager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SzConfigManagerClient interface {
	GetConfig(ctx context.Context, in *GetConfigRequest, opts ...grpc.CallOption) (*GetConfigResponse, error)
	GetConfigs(ctx context.Context, in *GetConfigsRequest, opts ...grpc.CallOption) (*GetConfigsResponse, error)
	GetDefaultConfigId(ctx context.Context, in *GetDefaultConfigIdRequest, opts ...grpc.CallOption) (*GetDefaultConfigIdResponse, error)
	GetTemplateConfig(ctx context.Context, in *GetTemplateConfigRequest, opts ...grpc.CallOption) (*GetTemplateConfigResponse, error)
	RegisterConfig(ctx context.Context, in *RegisterConfigRequest, opts ...grpc.CallOption) (*RegisterConfigResponse, error)
	ReplaceDefaultConfigId(ctx context.Context, in *ReplaceDefaultConfigIdRequest, opts ...grpc.CallOption) (*ReplaceDefaultConfigIdResponse, error)
	SetDefaultConfig(ctx context.Context, in *SetDefaultConfigRequest, opts ...grpc.CallOption) (*SetDefaultConfigResponse, error)
	SetDefaultConfigId(ctx context.Context, in *SetDefaultConfigIdRequest, opts ...grpc.CallOption) (*SetDefaultConfigIdResponse, error)
}

type szConfigManagerClient struct {
	cc grpc.ClientConnInterface
}

func NewSzConfigManagerClient(cc grpc.ClientConnInterface) SzConfigManagerClient {
	return &szConfigManagerClient{cc}
}

func (c *szConfigManagerClient) GetConfig(ctx context.Context, in *GetConfigRequest, opts ...grpc.CallOption) (*GetConfigResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetConfigResponse)
	err := c.cc.Invoke(ctx, SzConfigManager_GetConfig_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *szConfigManagerClient) GetConfigs(ctx context.Context, in *GetConfigsRequest, opts ...grpc.CallOption) (*GetConfigsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetConfigsResponse)
	err := c.cc.Invoke(ctx, SzConfigManager_GetConfigs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *szConfigManagerClient) GetDefaultConfigId(ctx context.Context, in *GetDefaultConfigIdRequest, opts ...grpc.CallOption) (*GetDefaultConfigIdResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetDefaultConfigIdResponse)
	err := c.cc.Invoke(ctx, SzConfigManager_GetDefaultConfigId_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *szConfigManagerClient) GetTemplateConfig(ctx context.Context, in *GetTemplateConfigRequest, opts ...grpc.CallOption) (*GetTemplateConfigResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTemplateConfigResponse)
	err := c.cc.Invoke(ctx, SzConfigManager_GetTemplateConfig_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *szConfigManagerClient) RegisterConfig(ctx context.Context, in *RegisterConfigRequest, opts ...grpc.CallOption) (*RegisterConfigResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RegisterConfigResponse)
	err := c.cc.Invoke(ctx, SzConfigManager_RegisterConfig_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *szConfigManagerClient) ReplaceDefaultConfigId(ctx context.Context, in *ReplaceDefaultConfigIdRequest, opts ...grpc.CallOption) (*ReplaceDefaultConfigIdResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReplaceDefaultConfigIdResponse)
	err := c.cc.Invoke(ctx, SzConfigManager_ReplaceDefaultConfigId_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *szConfigManagerClient) SetDefaultConfig(ctx context.Context, in *SetDefaultConfigRequest, opts ...grpc.CallOption) (*SetDefaultConfigResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetDefaultConfigResponse)
	err := c.cc.Invoke(ctx, SzConfigManager_SetDefaultConfig_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *szConfigManagerClient) SetDefaultConfigId(ctx context.Context, in *SetDefaultConfigIdRequest, opts ...grpc.CallOption) (*SetDefaultConfigIdResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetDefaultConfigIdResponse)
	err := c.cc.Invoke(ctx, SzConfigManager_SetDefaultConfigId_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SzConfigManagerServer is the server API for SzConfigManager service.
// All implementations must embed UnimplementedSzConfigManagerServer
// for forward compatibility.
type SzConfigManagerServer interface {
	GetConfig(context.Context, *GetConfigRequest) (*GetConfigResponse, error)
	GetConfigs(context.Context, *GetConfigsRequest) (*GetConfigsResponse, error)
	GetDefaultConfigId(context.Context, *GetDefaultConfigIdRequest) (*GetDefaultConfigIdResponse, error)
	GetTemplateConfig(context.Context, *GetTemplateConfigRequest) (*GetTemplateConfigResponse, error)
	RegisterConfig(context.Context, *RegisterConfigRequest) (*RegisterConfigResponse, error)
	ReplaceDefaultConfigId(context.Context, *ReplaceDefaultConfigIdRequest) (*ReplaceDefaultConfigIdResponse, error)
	SetDefaultConfig(context.Context, *SetDefaultConfigRequest) (*SetDefaultConfigResponse, error)
	SetDefaultConfigId(context.Context, *SetDefaultConfigIdRequest) (*SetDefaultConfigIdResponse, error)
	mustEmbedUnimplementedSzConfigManagerServer()
}

// UnimplementedSzConfigManagerServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSzConfigManagerServer struct{}

func (UnimplementedSzConfigManagerServer) GetConfig(context.Context, *GetConfigRequest) (*GetConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConfig not implemented")
}
func (UnimplementedSzConfigManagerServer) GetConfigs(context.Context, *GetConfigsRequest) (*GetConfigsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConfigs not implemented")
}
func (UnimplementedSzConfigManagerServer) GetDefaultConfigId(context.Context, *GetDefaultConfigIdRequest) (*GetDefaultConfigIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDefaultConfigId not implemented")
}
func (UnimplementedSzConfigManagerServer) GetTemplateConfig(context.Context, *GetTemplateConfigRequest) (*GetTemplateConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTemplateConfig not implemented")
}
func (UnimplementedSzConfigManagerServer) RegisterConfig(context.Context, *RegisterConfigRequest) (*RegisterConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterConfig not implemented")
}
func (UnimplementedSzConfigManagerServer) ReplaceDefaultConfigId(context.Context, *ReplaceDefaultConfigIdRequest) (*ReplaceDefaultConfigIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReplaceDefaultConfigId not implemented")
}
func (UnimplementedSzConfigManagerServer) SetDefaultConfig(context.Context, *SetDefaultConfigRequest) (*SetDefaultConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetDefaultConfig not implemented")
}
func (UnimplementedSzConfigManagerServer) SetDefaultConfigId(context.Context, *SetDefaultConfigIdRequest) (*SetDefaultConfigIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetDefaultConfigId not implemented")
}
func (UnimplementedSzConfigManagerServer) mustEmbedUnimplementedSzConfigManagerServer() {}
func (UnimplementedSzConfigManagerServer) testEmbeddedByValue()                         {}

// UnsafeSzConfigManagerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SzConfigManagerServer will
// result in compilation errors.
type UnsafeSzConfigManagerServer interface {
	mustEmbedUnimplementedSzConfigManagerServer()
}

func RegisterSzConfigManagerServer(s grpc.ServiceRegistrar, srv SzConfigManagerServer) {
	// If the following call pancis, it indicates UnimplementedSzConfigManagerServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&SzConfigManager_ServiceDesc, srv)
}

func _SzConfigManager_GetConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SzConfigManagerServer).GetConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SzConfigManager_GetConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SzConfigManagerServer).GetConfig(ctx, req.(*GetConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SzConfigManager_GetConfigs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetConfigsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SzConfigManagerServer).GetConfigs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SzConfigManager_GetConfigs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SzConfigManagerServer).GetConfigs(ctx, req.(*GetConfigsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SzConfigManager_GetDefaultConfigId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDefaultConfigIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SzConfigManagerServer).GetDefaultConfigId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SzConfigManager_GetDefaultConfigId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SzConfigManagerServer).GetDefaultConfigId(ctx, req.(*GetDefaultConfigIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SzConfigManager_GetTemplateConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTemplateConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SzConfigManagerServer).GetTemplateConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SzConfigManager_GetTemplateConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SzConfigManagerServer).GetTemplateConfig(ctx, req.(*GetTemplateConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SzConfigManager_RegisterConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SzConfigManagerServer).RegisterConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SzConfigManager_RegisterConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SzConfigManagerServer).RegisterConfig(ctx, req.(*RegisterConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SzConfigManager_ReplaceDefaultConfigId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReplaceDefaultConfigIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SzConfigManagerServer).ReplaceDefaultConfigId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SzConfigManager_ReplaceDefaultConfigId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SzConfigManagerServer).ReplaceDefaultConfigId(ctx, req.(*ReplaceDefaultConfigIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SzConfigManager_SetDefaultConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetDefaultConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SzConfigManagerServer).SetDefaultConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SzConfigManager_SetDefaultConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SzConfigManagerServer).SetDefaultConfig(ctx, req.(*SetDefaultConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SzConfigManager_SetDefaultConfigId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetDefaultConfigIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SzConfigManagerServer).SetDefaultConfigId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SzConfigManager_SetDefaultConfigId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SzConfigManagerServer).SetDefaultConfigId(ctx, req.(*SetDefaultConfigIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SzConfigManager_ServiceDesc is the grpc.ServiceDesc for SzConfigManager service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SzConfigManager_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "szconfigmanager.SzConfigManager",
	HandlerType: (*SzConfigManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetConfig",
			Handler:    _SzConfigManager_GetConfig_Handler,
		},
		{
			MethodName: "GetConfigs",
			Handler:    _SzConfigManager_GetConfigs_Handler,
		},
		{
			MethodName: "GetDefaultConfigId",
			Handler:    _SzConfigManager_GetDefaultConfigId_Handler,
		},
		{
			MethodName: "GetTemplateConfig",
			Handler:    _SzConfigManager_GetTemplateConfig_Handler,
		},
		{
			MethodName: "RegisterConfig",
			Handler:    _SzConfigManager_RegisterConfig_Handler,
		},
		{
			MethodName: "ReplaceDefaultConfigId",
			Handler:    _SzConfigManager_ReplaceDefaultConfigId_Handler,
		},
		{
			MethodName: "SetDefaultConfig",
			Handler:    _SzConfigManager_SetDefaultConfig_Handler,
		},
		{
			MethodName: "SetDefaultConfigId",
			Handler:    _SzConfigManager_SetDefaultConfigId_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "szconfigmanager.proto",
}
