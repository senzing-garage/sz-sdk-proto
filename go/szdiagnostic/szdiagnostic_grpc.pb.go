// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v4.25.1
// source: szdiagnostic.proto

package szdiagnostic

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	SzDiagnostic_CheckDatastorePerformance_FullMethodName = "/szdiagnostic.SzDiagnostic/CheckDatastorePerformance"
	SzDiagnostic_GetDatastoreInfo_FullMethodName          = "/szdiagnostic.SzDiagnostic/GetDatastoreInfo"
	SzDiagnostic_GetFeature_FullMethodName                = "/szdiagnostic.SzDiagnostic/GetFeature"
	SzDiagnostic_PurgeRepository_FullMethodName           = "/szdiagnostic.SzDiagnostic/PurgeRepository"
	SzDiagnostic_Reinitialize_FullMethodName              = "/szdiagnostic.SzDiagnostic/Reinitialize"
)

// SzDiagnosticClient is the client API for SzDiagnostic service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SzDiagnosticClient interface {
	CheckDatastorePerformance(ctx context.Context, in *CheckDatastorePerformanceRequest, opts ...grpc.CallOption) (*CheckDatastorePerformanceResponse, error)
	GetDatastoreInfo(ctx context.Context, in *GetDatastoreInfoRequest, opts ...grpc.CallOption) (*GetDatastoreInfoResponse, error)
	GetFeature(ctx context.Context, in *GetFeatureRequest, opts ...grpc.CallOption) (*GetFeatureResponse, error)
	PurgeRepository(ctx context.Context, in *PurgeRepositoryRequest, opts ...grpc.CallOption) (*PurgeRepositoryResponse, error)
	Reinitialize(ctx context.Context, in *ReinitializeRequest, opts ...grpc.CallOption) (*ReinitializeResponse, error)
}

type szDiagnosticClient struct {
	cc grpc.ClientConnInterface
}

func NewSzDiagnosticClient(cc grpc.ClientConnInterface) SzDiagnosticClient {
	return &szDiagnosticClient{cc}
}

func (c *szDiagnosticClient) CheckDatastorePerformance(ctx context.Context, in *CheckDatastorePerformanceRequest, opts ...grpc.CallOption) (*CheckDatastorePerformanceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CheckDatastorePerformanceResponse)
	err := c.cc.Invoke(ctx, SzDiagnostic_CheckDatastorePerformance_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *szDiagnosticClient) GetDatastoreInfo(ctx context.Context, in *GetDatastoreInfoRequest, opts ...grpc.CallOption) (*GetDatastoreInfoResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetDatastoreInfoResponse)
	err := c.cc.Invoke(ctx, SzDiagnostic_GetDatastoreInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *szDiagnosticClient) GetFeature(ctx context.Context, in *GetFeatureRequest, opts ...grpc.CallOption) (*GetFeatureResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetFeatureResponse)
	err := c.cc.Invoke(ctx, SzDiagnostic_GetFeature_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *szDiagnosticClient) PurgeRepository(ctx context.Context, in *PurgeRepositoryRequest, opts ...grpc.CallOption) (*PurgeRepositoryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PurgeRepositoryResponse)
	err := c.cc.Invoke(ctx, SzDiagnostic_PurgeRepository_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *szDiagnosticClient) Reinitialize(ctx context.Context, in *ReinitializeRequest, opts ...grpc.CallOption) (*ReinitializeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReinitializeResponse)
	err := c.cc.Invoke(ctx, SzDiagnostic_Reinitialize_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SzDiagnosticServer is the server API for SzDiagnostic service.
// All implementations must embed UnimplementedSzDiagnosticServer
// for forward compatibility.
type SzDiagnosticServer interface {
	CheckDatastorePerformance(context.Context, *CheckDatastorePerformanceRequest) (*CheckDatastorePerformanceResponse, error)
	GetDatastoreInfo(context.Context, *GetDatastoreInfoRequest) (*GetDatastoreInfoResponse, error)
	GetFeature(context.Context, *GetFeatureRequest) (*GetFeatureResponse, error)
	PurgeRepository(context.Context, *PurgeRepositoryRequest) (*PurgeRepositoryResponse, error)
	Reinitialize(context.Context, *ReinitializeRequest) (*ReinitializeResponse, error)
	mustEmbedUnimplementedSzDiagnosticServer()
}

// UnimplementedSzDiagnosticServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSzDiagnosticServer struct{}

func (UnimplementedSzDiagnosticServer) CheckDatastorePerformance(context.Context, *CheckDatastorePerformanceRequest) (*CheckDatastorePerformanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckDatastorePerformance not implemented")
}
func (UnimplementedSzDiagnosticServer) GetDatastoreInfo(context.Context, *GetDatastoreInfoRequest) (*GetDatastoreInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDatastoreInfo not implemented")
}
func (UnimplementedSzDiagnosticServer) GetFeature(context.Context, *GetFeatureRequest) (*GetFeatureResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFeature not implemented")
}
func (UnimplementedSzDiagnosticServer) PurgeRepository(context.Context, *PurgeRepositoryRequest) (*PurgeRepositoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PurgeRepository not implemented")
}
func (UnimplementedSzDiagnosticServer) Reinitialize(context.Context, *ReinitializeRequest) (*ReinitializeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Reinitialize not implemented")
}
func (UnimplementedSzDiagnosticServer) mustEmbedUnimplementedSzDiagnosticServer() {}
func (UnimplementedSzDiagnosticServer) testEmbeddedByValue()                      {}

// UnsafeSzDiagnosticServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SzDiagnosticServer will
// result in compilation errors.
type UnsafeSzDiagnosticServer interface {
	mustEmbedUnimplementedSzDiagnosticServer()
}

func RegisterSzDiagnosticServer(s grpc.ServiceRegistrar, srv SzDiagnosticServer) {
	// If the following call pancis, it indicates UnimplementedSzDiagnosticServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&SzDiagnostic_ServiceDesc, srv)
}

func _SzDiagnostic_CheckDatastorePerformance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckDatastorePerformanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SzDiagnosticServer).CheckDatastorePerformance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SzDiagnostic_CheckDatastorePerformance_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SzDiagnosticServer).CheckDatastorePerformance(ctx, req.(*CheckDatastorePerformanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SzDiagnostic_GetDatastoreInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDatastoreInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SzDiagnosticServer).GetDatastoreInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SzDiagnostic_GetDatastoreInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SzDiagnosticServer).GetDatastoreInfo(ctx, req.(*GetDatastoreInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SzDiagnostic_GetFeature_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFeatureRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SzDiagnosticServer).GetFeature(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SzDiagnostic_GetFeature_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SzDiagnosticServer).GetFeature(ctx, req.(*GetFeatureRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SzDiagnostic_PurgeRepository_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PurgeRepositoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SzDiagnosticServer).PurgeRepository(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SzDiagnostic_PurgeRepository_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SzDiagnosticServer).PurgeRepository(ctx, req.(*PurgeRepositoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SzDiagnostic_Reinitialize_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReinitializeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SzDiagnosticServer).Reinitialize(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SzDiagnostic_Reinitialize_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SzDiagnosticServer).Reinitialize(ctx, req.(*ReinitializeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SzDiagnostic_ServiceDesc is the grpc.ServiceDesc for SzDiagnostic service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SzDiagnostic_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "szdiagnostic.SzDiagnostic",
	HandlerType: (*SzDiagnosticServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CheckDatastorePerformance",
			Handler:    _SzDiagnostic_CheckDatastorePerformance_Handler,
		},
		{
			MethodName: "GetDatastoreInfo",
			Handler:    _SzDiagnostic_GetDatastoreInfo_Handler,
		},
		{
			MethodName: "GetFeature",
			Handler:    _SzDiagnostic_GetFeature_Handler,
		},
		{
			MethodName: "PurgeRepository",
			Handler:    _SzDiagnostic_PurgeRepository_Handler,
		},
		{
			MethodName: "Reinitialize",
			Handler:    _SzDiagnostic_Reinitialize_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "szdiagnostic.proto",
}
