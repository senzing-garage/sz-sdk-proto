/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.19.1
 * source: szdiagnostic.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
import * as grpc_1 from "@grpc/grpc-js";
export namespace szdiagnostic {
    export class CheckRepositoryPerformanceRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            seconds_to_run?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("seconds_to_run" in data && data.seconds_to_run != undefined) {
                    this.seconds_to_run = data.seconds_to_run;
                }
            }
        }
        get seconds_to_run() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set seconds_to_run(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            seconds_to_run?: number;
        }): CheckRepositoryPerformanceRequest {
            const message = new CheckRepositoryPerformanceRequest({});
            if (data.seconds_to_run != null) {
                message.seconds_to_run = data.seconds_to_run;
            }
            return message;
        }
        toObject() {
            const data: {
                seconds_to_run?: number;
            } = {};
            if (this.seconds_to_run != null) {
                data.seconds_to_run = this.seconds_to_run;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.seconds_to_run != 0)
                writer.writeInt32(1, this.seconds_to_run);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CheckRepositoryPerformanceRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CheckRepositoryPerformanceRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.seconds_to_run = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CheckRepositoryPerformanceRequest {
            return CheckRepositoryPerformanceRequest.deserialize(bytes);
        }
    }
    export class CheckRepositoryPerformanceResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            result?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("result" in data && data.result != undefined) {
                    this.result = data.result;
                }
            }
        }
        get result() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set result(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            result?: string;
        }): CheckRepositoryPerformanceResponse {
            const message = new CheckRepositoryPerformanceResponse({});
            if (data.result != null) {
                message.result = data.result;
            }
            return message;
        }
        toObject() {
            const data: {
                result?: string;
            } = {};
            if (this.result != null) {
                data.result = this.result;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.result.length)
                writer.writeString(1, this.result);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CheckRepositoryPerformanceResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CheckRepositoryPerformanceResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.result = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CheckRepositoryPerformanceResponse {
            return CheckRepositoryPerformanceResponse.deserialize(bytes);
        }
    }
    export class GetRepositoryInfoRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): GetRepositoryInfoRequest {
            const message = new GetRepositoryInfoRequest({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetRepositoryInfoRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetRepositoryInfoRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetRepositoryInfoRequest {
            return GetRepositoryInfoRequest.deserialize(bytes);
        }
    }
    export class GetRepositoryInfoResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            result?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("result" in data && data.result != undefined) {
                    this.result = data.result;
                }
            }
        }
        get result() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set result(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            result?: string;
        }): GetRepositoryInfoResponse {
            const message = new GetRepositoryInfoResponse({});
            if (data.result != null) {
                message.result = data.result;
            }
            return message;
        }
        toObject() {
            const data: {
                result?: string;
            } = {};
            if (this.result != null) {
                data.result = this.result;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.result.length)
                writer.writeString(1, this.result);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetRepositoryInfoResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetRepositoryInfoResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.result = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetRepositoryInfoResponse {
            return GetRepositoryInfoResponse.deserialize(bytes);
        }
    }
    export class GetFeatureRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            feature_id?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("feature_id" in data && data.feature_id != undefined) {
                    this.feature_id = data.feature_id;
                }
            }
        }
        get feature_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set feature_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            feature_id?: number;
        }): GetFeatureRequest {
            const message = new GetFeatureRequest({});
            if (data.feature_id != null) {
                message.feature_id = data.feature_id;
            }
            return message;
        }
        toObject() {
            const data: {
                feature_id?: number;
            } = {};
            if (this.feature_id != null) {
                data.feature_id = this.feature_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.feature_id != 0)
                writer.writeInt64(1, this.feature_id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetFeatureRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetFeatureRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.feature_id = reader.readInt64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetFeatureRequest {
            return GetFeatureRequest.deserialize(bytes);
        }
    }
    export class GetFeatureResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            result?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("result" in data && data.result != undefined) {
                    this.result = data.result;
                }
            }
        }
        get result() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set result(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            result?: string;
        }): GetFeatureResponse {
            const message = new GetFeatureResponse({});
            if (data.result != null) {
                message.result = data.result;
            }
            return message;
        }
        toObject() {
            const data: {
                result?: string;
            } = {};
            if (this.result != null) {
                data.result = this.result;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.result.length)
                writer.writeString(1, this.result);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetFeatureResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetFeatureResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.result = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetFeatureResponse {
            return GetFeatureResponse.deserialize(bytes);
        }
    }
    export class PurgeRepositoryRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): PurgeRepositoryRequest {
            const message = new PurgeRepositoryRequest({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PurgeRepositoryRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new PurgeRepositoryRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): PurgeRepositoryRequest {
            return PurgeRepositoryRequest.deserialize(bytes);
        }
    }
    export class PurgeRepositoryResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): PurgeRepositoryResponse {
            const message = new PurgeRepositoryResponse({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PurgeRepositoryResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new PurgeRepositoryResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): PurgeRepositoryResponse {
            return PurgeRepositoryResponse.deserialize(bytes);
        }
    }
    export class ReinitializeRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            config_id?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("config_id" in data && data.config_id != undefined) {
                    this.config_id = data.config_id;
                }
            }
        }
        get config_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set config_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            config_id?: number;
        }): ReinitializeRequest {
            const message = new ReinitializeRequest({});
            if (data.config_id != null) {
                message.config_id = data.config_id;
            }
            return message;
        }
        toObject() {
            const data: {
                config_id?: number;
            } = {};
            if (this.config_id != null) {
                data.config_id = this.config_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.config_id != 0)
                writer.writeInt64(1, this.config_id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ReinitializeRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ReinitializeRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.config_id = reader.readInt64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ReinitializeRequest {
            return ReinitializeRequest.deserialize(bytes);
        }
    }
    export class ReinitializeResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): ReinitializeResponse {
            const message = new ReinitializeResponse({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ReinitializeResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ReinitializeResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ReinitializeResponse {
            return ReinitializeResponse.deserialize(bytes);
        }
    }
    interface GrpcUnaryServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    }
    interface GrpcStreamServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
        (message: P, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
    }
    interface GrpWritableServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
    }
    interface GrpcChunkServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
        (options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
    }
    interface GrpcPromiseServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): Promise<R>;
        (message: P, options?: grpc_1.CallOptions): Promise<R>;
    }
    export abstract class UnimplementedSzDiagnosticService {
        static definition = {
            CheckRepositoryPerformance: {
                path: "/szdiagnostic.SzDiagnostic/CheckRepositoryPerformance",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: CheckRepositoryPerformanceRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => CheckRepositoryPerformanceRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: CheckRepositoryPerformanceResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => CheckRepositoryPerformanceResponse.deserialize(new Uint8Array(bytes))
            },
            GetFeature: {
                path: "/szdiagnostic.SzDiagnostic/GetFeature",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: GetFeatureRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => GetFeatureRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: GetFeatureResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => GetFeatureResponse.deserialize(new Uint8Array(bytes))
            },
            GetRepositoryInfo: {
                path: "/szdiagnostic.SzDiagnostic/GetRepositoryInfo",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: GetRepositoryInfoRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => GetRepositoryInfoRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: GetRepositoryInfoResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => GetRepositoryInfoResponse.deserialize(new Uint8Array(bytes))
            },
            PurgeRepository: {
                path: "/szdiagnostic.SzDiagnostic/PurgeRepository",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: PurgeRepositoryRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => PurgeRepositoryRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: PurgeRepositoryResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => PurgeRepositoryResponse.deserialize(new Uint8Array(bytes))
            },
            Reinitialize: {
                path: "/szdiagnostic.SzDiagnostic/Reinitialize",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: ReinitializeRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => ReinitializeRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: ReinitializeResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => ReinitializeResponse.deserialize(new Uint8Array(bytes))
            }
        };
        [method: string]: grpc_1.UntypedHandleCall;
        abstract CheckRepositoryPerformance(call: grpc_1.ServerUnaryCall<CheckRepositoryPerformanceRequest, CheckRepositoryPerformanceResponse>, callback: grpc_1.sendUnaryData<CheckRepositoryPerformanceResponse>): void;
        abstract GetFeature(call: grpc_1.ServerUnaryCall<GetFeatureRequest, GetFeatureResponse>, callback: grpc_1.sendUnaryData<GetFeatureResponse>): void;
        abstract GetRepositoryInfo(call: grpc_1.ServerUnaryCall<GetRepositoryInfoRequest, GetRepositoryInfoResponse>, callback: grpc_1.sendUnaryData<GetRepositoryInfoResponse>): void;
        abstract PurgeRepository(call: grpc_1.ServerUnaryCall<PurgeRepositoryRequest, PurgeRepositoryResponse>, callback: grpc_1.sendUnaryData<PurgeRepositoryResponse>): void;
        abstract Reinitialize(call: grpc_1.ServerUnaryCall<ReinitializeRequest, ReinitializeResponse>, callback: grpc_1.sendUnaryData<ReinitializeResponse>): void;
    }
    export class SzDiagnosticClient extends grpc_1.makeGenericClientConstructor(UnimplementedSzDiagnosticService.definition, "SzDiagnostic", {}) {
        constructor(address: string, credentials: grpc_1.ChannelCredentials, options?: Partial<grpc_1.ChannelOptions>) {
            super(address, credentials, options);
        }
        CheckRepositoryPerformance: GrpcUnaryServiceInterface<CheckRepositoryPerformanceRequest, CheckRepositoryPerformanceResponse> = (message: CheckRepositoryPerformanceRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<CheckRepositoryPerformanceResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<CheckRepositoryPerformanceResponse>, callback?: grpc_1.requestCallback<CheckRepositoryPerformanceResponse>): grpc_1.ClientUnaryCall => {
            return super.CheckRepositoryPerformance(message, metadata, options, callback);
        };
        GetFeature: GrpcUnaryServiceInterface<GetFeatureRequest, GetFeatureResponse> = (message: GetFeatureRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<GetFeatureResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<GetFeatureResponse>, callback?: grpc_1.requestCallback<GetFeatureResponse>): grpc_1.ClientUnaryCall => {
            return super.GetFeature(message, metadata, options, callback);
        };
        GetRepositoryInfo: GrpcUnaryServiceInterface<GetRepositoryInfoRequest, GetRepositoryInfoResponse> = (message: GetRepositoryInfoRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<GetRepositoryInfoResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<GetRepositoryInfoResponse>, callback?: grpc_1.requestCallback<GetRepositoryInfoResponse>): grpc_1.ClientUnaryCall => {
            return super.GetRepositoryInfo(message, metadata, options, callback);
        };
        PurgeRepository: GrpcUnaryServiceInterface<PurgeRepositoryRequest, PurgeRepositoryResponse> = (message: PurgeRepositoryRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<PurgeRepositoryResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<PurgeRepositoryResponse>, callback?: grpc_1.requestCallback<PurgeRepositoryResponse>): grpc_1.ClientUnaryCall => {
            return super.PurgeRepository(message, metadata, options, callback);
        };
        Reinitialize: GrpcUnaryServiceInterface<ReinitializeRequest, ReinitializeResponse> = (message: ReinitializeRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<ReinitializeResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<ReinitializeResponse>, callback?: grpc_1.requestCallback<ReinitializeResponse>): grpc_1.ClientUnaryCall => {
            return super.Reinitialize(message, metadata, options, callback);
        };
    }
}
