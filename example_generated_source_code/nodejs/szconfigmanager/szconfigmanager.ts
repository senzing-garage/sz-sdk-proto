/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.19.1
 * source: szconfigmanager.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
import * as grpc_1 from "@grpc/grpc-js";
export namespace szconfigmanager {
    export class GetConfigRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            config_id?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("config_id" in data && data.config_id != undefined) {
                    this.config_id = data.config_id;
                }
            }
        }
        get config_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set config_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            config_id?: number;
        }): GetConfigRequest {
            const message = new GetConfigRequest({});
            if (data.config_id != null) {
                message.config_id = data.config_id;
            }
            return message;
        }
        toObject() {
            const data: {
                config_id?: number;
            } = {};
            if (this.config_id != null) {
                data.config_id = this.config_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.config_id != 0)
                writer.writeInt64(1, this.config_id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetConfigRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetConfigRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.config_id = reader.readInt64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetConfigRequest {
            return GetConfigRequest.deserialize(bytes);
        }
    }
    export class GetConfigResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            result?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("result" in data && data.result != undefined) {
                    this.result = data.result;
                }
            }
        }
        get result() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set result(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            result?: string;
        }): GetConfigResponse {
            const message = new GetConfigResponse({});
            if (data.result != null) {
                message.result = data.result;
            }
            return message;
        }
        toObject() {
            const data: {
                result?: string;
            } = {};
            if (this.result != null) {
                data.result = this.result;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.result.length)
                writer.writeString(1, this.result);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetConfigResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetConfigResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.result = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetConfigResponse {
            return GetConfigResponse.deserialize(bytes);
        }
    }
    export class GetConfigRegistryRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): GetConfigRegistryRequest {
            const message = new GetConfigRegistryRequest({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetConfigRegistryRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetConfigRegistryRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetConfigRegistryRequest {
            return GetConfigRegistryRequest.deserialize(bytes);
        }
    }
    export class GetConfigRegistryResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            result?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("result" in data && data.result != undefined) {
                    this.result = data.result;
                }
            }
        }
        get result() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set result(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            result?: string;
        }): GetConfigRegistryResponse {
            const message = new GetConfigRegistryResponse({});
            if (data.result != null) {
                message.result = data.result;
            }
            return message;
        }
        toObject() {
            const data: {
                result?: string;
            } = {};
            if (this.result != null) {
                data.result = this.result;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.result.length)
                writer.writeString(1, this.result);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetConfigRegistryResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetConfigRegistryResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.result = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetConfigRegistryResponse {
            return GetConfigRegistryResponse.deserialize(bytes);
        }
    }
    export class GetDefaultConfigIdRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): GetDefaultConfigIdRequest {
            const message = new GetDefaultConfigIdRequest({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetDefaultConfigIdRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetDefaultConfigIdRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetDefaultConfigIdRequest {
            return GetDefaultConfigIdRequest.deserialize(bytes);
        }
    }
    export class GetDefaultConfigIdResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            result?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("result" in data && data.result != undefined) {
                    this.result = data.result;
                }
            }
        }
        get result() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set result(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            result?: number;
        }): GetDefaultConfigIdResponse {
            const message = new GetDefaultConfigIdResponse({});
            if (data.result != null) {
                message.result = data.result;
            }
            return message;
        }
        toObject() {
            const data: {
                result?: number;
            } = {};
            if (this.result != null) {
                data.result = this.result;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.result != 0)
                writer.writeInt64(1, this.result);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetDefaultConfigIdResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetDefaultConfigIdResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.result = reader.readInt64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetDefaultConfigIdResponse {
            return GetDefaultConfigIdResponse.deserialize(bytes);
        }
    }
    export class GetTemplateConfigRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): GetTemplateConfigRequest {
            const message = new GetTemplateConfigRequest({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetTemplateConfigRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetTemplateConfigRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetTemplateConfigRequest {
            return GetTemplateConfigRequest.deserialize(bytes);
        }
    }
    export class GetTemplateConfigResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            result?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("result" in data && data.result != undefined) {
                    this.result = data.result;
                }
            }
        }
        get result() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set result(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            result?: string;
        }): GetTemplateConfigResponse {
            const message = new GetTemplateConfigResponse({});
            if (data.result != null) {
                message.result = data.result;
            }
            return message;
        }
        toObject() {
            const data: {
                result?: string;
            } = {};
            if (this.result != null) {
                data.result = this.result;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.result.length)
                writer.writeString(1, this.result);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetTemplateConfigResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetTemplateConfigResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.result = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetTemplateConfigResponse {
            return GetTemplateConfigResponse.deserialize(bytes);
        }
    }
    export class RegisterConfigRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            config_definition?: string;
            config_comment?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("config_definition" in data && data.config_definition != undefined) {
                    this.config_definition = data.config_definition;
                }
                if ("config_comment" in data && data.config_comment != undefined) {
                    this.config_comment = data.config_comment;
                }
            }
        }
        get config_definition() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set config_definition(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get config_comment() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set config_comment(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            config_definition?: string;
            config_comment?: string;
        }): RegisterConfigRequest {
            const message = new RegisterConfigRequest({});
            if (data.config_definition != null) {
                message.config_definition = data.config_definition;
            }
            if (data.config_comment != null) {
                message.config_comment = data.config_comment;
            }
            return message;
        }
        toObject() {
            const data: {
                config_definition?: string;
                config_comment?: string;
            } = {};
            if (this.config_definition != null) {
                data.config_definition = this.config_definition;
            }
            if (this.config_comment != null) {
                data.config_comment = this.config_comment;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.config_definition.length)
                writer.writeString(1, this.config_definition);
            if (this.config_comment.length)
                writer.writeString(2, this.config_comment);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RegisterConfigRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new RegisterConfigRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.config_definition = reader.readString();
                        break;
                    case 2:
                        message.config_comment = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): RegisterConfigRequest {
            return RegisterConfigRequest.deserialize(bytes);
        }
    }
    export class RegisterConfigResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            result?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("result" in data && data.result != undefined) {
                    this.result = data.result;
                }
            }
        }
        get result() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set result(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            result?: number;
        }): RegisterConfigResponse {
            const message = new RegisterConfigResponse({});
            if (data.result != null) {
                message.result = data.result;
            }
            return message;
        }
        toObject() {
            const data: {
                result?: number;
            } = {};
            if (this.result != null) {
                data.result = this.result;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.result != 0)
                writer.writeInt64(1, this.result);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RegisterConfigResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new RegisterConfigResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.result = reader.readInt64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): RegisterConfigResponse {
            return RegisterConfigResponse.deserialize(bytes);
        }
    }
    export class ReplaceDefaultConfigIdRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            current_default_config_id?: number;
            new_default_config_id?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("current_default_config_id" in data && data.current_default_config_id != undefined) {
                    this.current_default_config_id = data.current_default_config_id;
                }
                if ("new_default_config_id" in data && data.new_default_config_id != undefined) {
                    this.new_default_config_id = data.new_default_config_id;
                }
            }
        }
        get current_default_config_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set current_default_config_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get new_default_config_id() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set new_default_config_id(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            current_default_config_id?: number;
            new_default_config_id?: number;
        }): ReplaceDefaultConfigIdRequest {
            const message = new ReplaceDefaultConfigIdRequest({});
            if (data.current_default_config_id != null) {
                message.current_default_config_id = data.current_default_config_id;
            }
            if (data.new_default_config_id != null) {
                message.new_default_config_id = data.new_default_config_id;
            }
            return message;
        }
        toObject() {
            const data: {
                current_default_config_id?: number;
                new_default_config_id?: number;
            } = {};
            if (this.current_default_config_id != null) {
                data.current_default_config_id = this.current_default_config_id;
            }
            if (this.new_default_config_id != null) {
                data.new_default_config_id = this.new_default_config_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.current_default_config_id != 0)
                writer.writeInt64(1, this.current_default_config_id);
            if (this.new_default_config_id != 0)
                writer.writeInt64(2, this.new_default_config_id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ReplaceDefaultConfigIdRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ReplaceDefaultConfigIdRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.current_default_config_id = reader.readInt64();
                        break;
                    case 2:
                        message.new_default_config_id = reader.readInt64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ReplaceDefaultConfigIdRequest {
            return ReplaceDefaultConfigIdRequest.deserialize(bytes);
        }
    }
    export class ReplaceDefaultConfigIdResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): ReplaceDefaultConfigIdResponse {
            const message = new ReplaceDefaultConfigIdResponse({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ReplaceDefaultConfigIdResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ReplaceDefaultConfigIdResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ReplaceDefaultConfigIdResponse {
            return ReplaceDefaultConfigIdResponse.deserialize(bytes);
        }
    }
    export class SetDefaultConfigRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            config_definition?: string;
            config_comment?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("config_definition" in data && data.config_definition != undefined) {
                    this.config_definition = data.config_definition;
                }
                if ("config_comment" in data && data.config_comment != undefined) {
                    this.config_comment = data.config_comment;
                }
            }
        }
        get config_definition() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set config_definition(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get config_comment() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set config_comment(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            config_definition?: string;
            config_comment?: string;
        }): SetDefaultConfigRequest {
            const message = new SetDefaultConfigRequest({});
            if (data.config_definition != null) {
                message.config_definition = data.config_definition;
            }
            if (data.config_comment != null) {
                message.config_comment = data.config_comment;
            }
            return message;
        }
        toObject() {
            const data: {
                config_definition?: string;
                config_comment?: string;
            } = {};
            if (this.config_definition != null) {
                data.config_definition = this.config_definition;
            }
            if (this.config_comment != null) {
                data.config_comment = this.config_comment;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.config_definition.length)
                writer.writeString(1, this.config_definition);
            if (this.config_comment.length)
                writer.writeString(2, this.config_comment);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SetDefaultConfigRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SetDefaultConfigRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.config_definition = reader.readString();
                        break;
                    case 2:
                        message.config_comment = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SetDefaultConfigRequest {
            return SetDefaultConfigRequest.deserialize(bytes);
        }
    }
    export class SetDefaultConfigResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            result?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("result" in data && data.result != undefined) {
                    this.result = data.result;
                }
            }
        }
        get result() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set result(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            result?: number;
        }): SetDefaultConfigResponse {
            const message = new SetDefaultConfigResponse({});
            if (data.result != null) {
                message.result = data.result;
            }
            return message;
        }
        toObject() {
            const data: {
                result?: number;
            } = {};
            if (this.result != null) {
                data.result = this.result;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.result != 0)
                writer.writeInt64(1, this.result);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SetDefaultConfigResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SetDefaultConfigResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.result = reader.readInt64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SetDefaultConfigResponse {
            return SetDefaultConfigResponse.deserialize(bytes);
        }
    }
    export class SetDefaultConfigIdRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            config_id?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("config_id" in data && data.config_id != undefined) {
                    this.config_id = data.config_id;
                }
            }
        }
        get config_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set config_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            config_id?: number;
        }): SetDefaultConfigIdRequest {
            const message = new SetDefaultConfigIdRequest({});
            if (data.config_id != null) {
                message.config_id = data.config_id;
            }
            return message;
        }
        toObject() {
            const data: {
                config_id?: number;
            } = {};
            if (this.config_id != null) {
                data.config_id = this.config_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.config_id != 0)
                writer.writeInt64(1, this.config_id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SetDefaultConfigIdRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SetDefaultConfigIdRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.config_id = reader.readInt64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SetDefaultConfigIdRequest {
            return SetDefaultConfigIdRequest.deserialize(bytes);
        }
    }
    export class SetDefaultConfigIdResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): SetDefaultConfigIdResponse {
            const message = new SetDefaultConfigIdResponse({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SetDefaultConfigIdResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SetDefaultConfigIdResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SetDefaultConfigIdResponse {
            return SetDefaultConfigIdResponse.deserialize(bytes);
        }
    }
    interface GrpcUnaryServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    }
    interface GrpcStreamServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
        (message: P, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
    }
    interface GrpWritableServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
    }
    interface GrpcChunkServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
        (options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
    }
    interface GrpcPromiseServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): Promise<R>;
        (message: P, options?: grpc_1.CallOptions): Promise<R>;
    }
    export abstract class UnimplementedSzConfigManagerService {
        static definition = {
            GetConfig: {
                path: "/szconfigmanager.SzConfigManager/GetConfig",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: GetConfigRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => GetConfigRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: GetConfigResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => GetConfigResponse.deserialize(new Uint8Array(bytes))
            },
            GetConfigRegistry: {
                path: "/szconfigmanager.SzConfigManager/GetConfigRegistry",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: GetConfigRegistryRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => GetConfigRegistryRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: GetConfigRegistryResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => GetConfigRegistryResponse.deserialize(new Uint8Array(bytes))
            },
            GetDefaultConfigId: {
                path: "/szconfigmanager.SzConfigManager/GetDefaultConfigId",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: GetDefaultConfigIdRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => GetDefaultConfigIdRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: GetDefaultConfigIdResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => GetDefaultConfigIdResponse.deserialize(new Uint8Array(bytes))
            },
            GetTemplateConfig: {
                path: "/szconfigmanager.SzConfigManager/GetTemplateConfig",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: GetTemplateConfigRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => GetTemplateConfigRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: GetTemplateConfigResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => GetTemplateConfigResponse.deserialize(new Uint8Array(bytes))
            },
            RegisterConfig: {
                path: "/szconfigmanager.SzConfigManager/RegisterConfig",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: RegisterConfigRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => RegisterConfigRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: RegisterConfigResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => RegisterConfigResponse.deserialize(new Uint8Array(bytes))
            },
            ReplaceDefaultConfigId: {
                path: "/szconfigmanager.SzConfigManager/ReplaceDefaultConfigId",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: ReplaceDefaultConfigIdRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => ReplaceDefaultConfigIdRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: ReplaceDefaultConfigIdResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => ReplaceDefaultConfigIdResponse.deserialize(new Uint8Array(bytes))
            },
            SetDefaultConfig: {
                path: "/szconfigmanager.SzConfigManager/SetDefaultConfig",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: SetDefaultConfigRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => SetDefaultConfigRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: SetDefaultConfigResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => SetDefaultConfigResponse.deserialize(new Uint8Array(bytes))
            },
            SetDefaultConfigId: {
                path: "/szconfigmanager.SzConfigManager/SetDefaultConfigId",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: SetDefaultConfigIdRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => SetDefaultConfigIdRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: SetDefaultConfigIdResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => SetDefaultConfigIdResponse.deserialize(new Uint8Array(bytes))
            }
        };
        [method: string]: grpc_1.UntypedHandleCall;
        abstract GetConfig(call: grpc_1.ServerUnaryCall<GetConfigRequest, GetConfigResponse>, callback: grpc_1.sendUnaryData<GetConfigResponse>): void;
        abstract GetConfigRegistry(call: grpc_1.ServerUnaryCall<GetConfigRegistryRequest, GetConfigRegistryResponse>, callback: grpc_1.sendUnaryData<GetConfigRegistryResponse>): void;
        abstract GetDefaultConfigId(call: grpc_1.ServerUnaryCall<GetDefaultConfigIdRequest, GetDefaultConfigIdResponse>, callback: grpc_1.sendUnaryData<GetDefaultConfigIdResponse>): void;
        abstract GetTemplateConfig(call: grpc_1.ServerUnaryCall<GetTemplateConfigRequest, GetTemplateConfigResponse>, callback: grpc_1.sendUnaryData<GetTemplateConfigResponse>): void;
        abstract RegisterConfig(call: grpc_1.ServerUnaryCall<RegisterConfigRequest, RegisterConfigResponse>, callback: grpc_1.sendUnaryData<RegisterConfigResponse>): void;
        abstract ReplaceDefaultConfigId(call: grpc_1.ServerUnaryCall<ReplaceDefaultConfigIdRequest, ReplaceDefaultConfigIdResponse>, callback: grpc_1.sendUnaryData<ReplaceDefaultConfigIdResponse>): void;
        abstract SetDefaultConfig(call: grpc_1.ServerUnaryCall<SetDefaultConfigRequest, SetDefaultConfigResponse>, callback: grpc_1.sendUnaryData<SetDefaultConfigResponse>): void;
        abstract SetDefaultConfigId(call: grpc_1.ServerUnaryCall<SetDefaultConfigIdRequest, SetDefaultConfigIdResponse>, callback: grpc_1.sendUnaryData<SetDefaultConfigIdResponse>): void;
    }
    export class SzConfigManagerClient extends grpc_1.makeGenericClientConstructor(UnimplementedSzConfigManagerService.definition, "SzConfigManager", {}) {
        constructor(address: string, credentials: grpc_1.ChannelCredentials, options?: Partial<grpc_1.ChannelOptions>) {
            super(address, credentials, options);
        }
        GetConfig: GrpcUnaryServiceInterface<GetConfigRequest, GetConfigResponse> = (message: GetConfigRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<GetConfigResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<GetConfigResponse>, callback?: grpc_1.requestCallback<GetConfigResponse>): grpc_1.ClientUnaryCall => {
            return super.GetConfig(message, metadata, options, callback);
        };
        GetConfigRegistry: GrpcUnaryServiceInterface<GetConfigRegistryRequest, GetConfigRegistryResponse> = (message: GetConfigRegistryRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<GetConfigRegistryResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<GetConfigRegistryResponse>, callback?: grpc_1.requestCallback<GetConfigRegistryResponse>): grpc_1.ClientUnaryCall => {
            return super.GetConfigRegistry(message, metadata, options, callback);
        };
        GetDefaultConfigId: GrpcUnaryServiceInterface<GetDefaultConfigIdRequest, GetDefaultConfigIdResponse> = (message: GetDefaultConfigIdRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<GetDefaultConfigIdResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<GetDefaultConfigIdResponse>, callback?: grpc_1.requestCallback<GetDefaultConfigIdResponse>): grpc_1.ClientUnaryCall => {
            return super.GetDefaultConfigId(message, metadata, options, callback);
        };
        GetTemplateConfig: GrpcUnaryServiceInterface<GetTemplateConfigRequest, GetTemplateConfigResponse> = (message: GetTemplateConfigRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<GetTemplateConfigResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<GetTemplateConfigResponse>, callback?: grpc_1.requestCallback<GetTemplateConfigResponse>): grpc_1.ClientUnaryCall => {
            return super.GetTemplateConfig(message, metadata, options, callback);
        };
        RegisterConfig: GrpcUnaryServiceInterface<RegisterConfigRequest, RegisterConfigResponse> = (message: RegisterConfigRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<RegisterConfigResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<RegisterConfigResponse>, callback?: grpc_1.requestCallback<RegisterConfigResponse>): grpc_1.ClientUnaryCall => {
            return super.RegisterConfig(message, metadata, options, callback);
        };
        ReplaceDefaultConfigId: GrpcUnaryServiceInterface<ReplaceDefaultConfigIdRequest, ReplaceDefaultConfigIdResponse> = (message: ReplaceDefaultConfigIdRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<ReplaceDefaultConfigIdResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<ReplaceDefaultConfigIdResponse>, callback?: grpc_1.requestCallback<ReplaceDefaultConfigIdResponse>): grpc_1.ClientUnaryCall => {
            return super.ReplaceDefaultConfigId(message, metadata, options, callback);
        };
        SetDefaultConfig: GrpcUnaryServiceInterface<SetDefaultConfigRequest, SetDefaultConfigResponse> = (message: SetDefaultConfigRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<SetDefaultConfigResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<SetDefaultConfigResponse>, callback?: grpc_1.requestCallback<SetDefaultConfigResponse>): grpc_1.ClientUnaryCall => {
            return super.SetDefaultConfig(message, metadata, options, callback);
        };
        SetDefaultConfigId: GrpcUnaryServiceInterface<SetDefaultConfigIdRequest, SetDefaultConfigIdResponse> = (message: SetDefaultConfigIdRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<SetDefaultConfigIdResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<SetDefaultConfigIdResponse>, callback?: grpc_1.requestCallback<SetDefaultConfigIdResponse>): grpc_1.ClientUnaryCall => {
            return super.SetDefaultConfigId(message, metadata, options, callback);
        };
    }
}
