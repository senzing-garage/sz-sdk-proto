/**
 * @fileoverview gRPC-Web generated client stub for szconfigmanager
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.5.0
// 	protoc              v3.19.1
// source: szconfigmanager.proto


/* eslint-disable */
// @ts-nocheck


import * as grpcWeb from 'grpc-web';

import * as szconfigmanager_pb from './szconfigmanager_pb'; // proto import: "szconfigmanager.proto"


export class SzConfigManagerClient {
  client_: grpcWeb.AbstractClientBase;
  hostname_: string;
  credentials_: null | { [index: string]: string; };
  options_: null | { [index: string]: any; };

  constructor (hostname: string,
               credentials?: null | { [index: string]: string; },
               options?: null | { [index: string]: any; }) {
    if (!options) options = {};
    if (!credentials) credentials = {};
    options['format'] = 'text';

    this.client_ = new grpcWeb.GrpcWebClientBase(options);
    this.hostname_ = hostname.replace(/\/+$/, '');
    this.credentials_ = credentials;
    this.options_ = options;
  }

  methodDescriptorAddConfig = new grpcWeb.MethodDescriptor(
    '/szconfigmanager.SzConfigManager/AddConfig',
    grpcWeb.MethodType.UNARY,
    szconfigmanager_pb.AddConfigRequest,
    szconfigmanager_pb.AddConfigResponse,
    (request: szconfigmanager_pb.AddConfigRequest) => {
      return request.serializeBinary();
    },
    szconfigmanager_pb.AddConfigResponse.deserializeBinary
  );

  addConfig(
    request: szconfigmanager_pb.AddConfigRequest,
    metadata?: grpcWeb.Metadata | null): Promise<szconfigmanager_pb.AddConfigResponse>;

  addConfig(
    request: szconfigmanager_pb.AddConfigRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: szconfigmanager_pb.AddConfigResponse) => void): grpcWeb.ClientReadableStream<szconfigmanager_pb.AddConfigResponse>;

  addConfig(
    request: szconfigmanager_pb.AddConfigRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: szconfigmanager_pb.AddConfigResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/szconfigmanager.SzConfigManager/AddConfig',
        request,
        metadata || {},
        this.methodDescriptorAddConfig,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/szconfigmanager.SzConfigManager/AddConfig',
    request,
    metadata || {},
    this.methodDescriptorAddConfig);
  }

  methodDescriptorGetConfig = new grpcWeb.MethodDescriptor(
    '/szconfigmanager.SzConfigManager/GetConfig',
    grpcWeb.MethodType.UNARY,
    szconfigmanager_pb.GetConfigRequest,
    szconfigmanager_pb.GetConfigResponse,
    (request: szconfigmanager_pb.GetConfigRequest) => {
      return request.serializeBinary();
    },
    szconfigmanager_pb.GetConfigResponse.deserializeBinary
  );

  getConfig(
    request: szconfigmanager_pb.GetConfigRequest,
    metadata?: grpcWeb.Metadata | null): Promise<szconfigmanager_pb.GetConfigResponse>;

  getConfig(
    request: szconfigmanager_pb.GetConfigRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: szconfigmanager_pb.GetConfigResponse) => void): grpcWeb.ClientReadableStream<szconfigmanager_pb.GetConfigResponse>;

  getConfig(
    request: szconfigmanager_pb.GetConfigRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: szconfigmanager_pb.GetConfigResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/szconfigmanager.SzConfigManager/GetConfig',
        request,
        metadata || {},
        this.methodDescriptorGetConfig,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/szconfigmanager.SzConfigManager/GetConfig',
    request,
    metadata || {},
    this.methodDescriptorGetConfig);
  }

  methodDescriptorGetConfigs = new grpcWeb.MethodDescriptor(
    '/szconfigmanager.SzConfigManager/GetConfigs',
    grpcWeb.MethodType.UNARY,
    szconfigmanager_pb.GetConfigsRequest,
    szconfigmanager_pb.GetConfigsResponse,
    (request: szconfigmanager_pb.GetConfigsRequest) => {
      return request.serializeBinary();
    },
    szconfigmanager_pb.GetConfigsResponse.deserializeBinary
  );

  getConfigs(
    request: szconfigmanager_pb.GetConfigsRequest,
    metadata?: grpcWeb.Metadata | null): Promise<szconfigmanager_pb.GetConfigsResponse>;

  getConfigs(
    request: szconfigmanager_pb.GetConfigsRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: szconfigmanager_pb.GetConfigsResponse) => void): grpcWeb.ClientReadableStream<szconfigmanager_pb.GetConfigsResponse>;

  getConfigs(
    request: szconfigmanager_pb.GetConfigsRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: szconfigmanager_pb.GetConfigsResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/szconfigmanager.SzConfigManager/GetConfigs',
        request,
        metadata || {},
        this.methodDescriptorGetConfigs,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/szconfigmanager.SzConfigManager/GetConfigs',
    request,
    metadata || {},
    this.methodDescriptorGetConfigs);
  }

  methodDescriptorGetDefaultConfigId = new grpcWeb.MethodDescriptor(
    '/szconfigmanager.SzConfigManager/GetDefaultConfigId',
    grpcWeb.MethodType.UNARY,
    szconfigmanager_pb.GetDefaultConfigIdRequest,
    szconfigmanager_pb.GetDefaultConfigIdResponse,
    (request: szconfigmanager_pb.GetDefaultConfigIdRequest) => {
      return request.serializeBinary();
    },
    szconfigmanager_pb.GetDefaultConfigIdResponse.deserializeBinary
  );

  getDefaultConfigId(
    request: szconfigmanager_pb.GetDefaultConfigIdRequest,
    metadata?: grpcWeb.Metadata | null): Promise<szconfigmanager_pb.GetDefaultConfigIdResponse>;

  getDefaultConfigId(
    request: szconfigmanager_pb.GetDefaultConfigIdRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: szconfigmanager_pb.GetDefaultConfigIdResponse) => void): grpcWeb.ClientReadableStream<szconfigmanager_pb.GetDefaultConfigIdResponse>;

  getDefaultConfigId(
    request: szconfigmanager_pb.GetDefaultConfigIdRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: szconfigmanager_pb.GetDefaultConfigIdResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/szconfigmanager.SzConfigManager/GetDefaultConfigId',
        request,
        metadata || {},
        this.methodDescriptorGetDefaultConfigId,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/szconfigmanager.SzConfigManager/GetDefaultConfigId',
    request,
    metadata || {},
    this.methodDescriptorGetDefaultConfigId);
  }

  methodDescriptorReplaceDefaultConfigId = new grpcWeb.MethodDescriptor(
    '/szconfigmanager.SzConfigManager/ReplaceDefaultConfigId',
    grpcWeb.MethodType.UNARY,
    szconfigmanager_pb.ReplaceDefaultConfigIdRequest,
    szconfigmanager_pb.ReplaceDefaultConfigIdResponse,
    (request: szconfigmanager_pb.ReplaceDefaultConfigIdRequest) => {
      return request.serializeBinary();
    },
    szconfigmanager_pb.ReplaceDefaultConfigIdResponse.deserializeBinary
  );

  replaceDefaultConfigId(
    request: szconfigmanager_pb.ReplaceDefaultConfigIdRequest,
    metadata?: grpcWeb.Metadata | null): Promise<szconfigmanager_pb.ReplaceDefaultConfigIdResponse>;

  replaceDefaultConfigId(
    request: szconfigmanager_pb.ReplaceDefaultConfigIdRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: szconfigmanager_pb.ReplaceDefaultConfigIdResponse) => void): grpcWeb.ClientReadableStream<szconfigmanager_pb.ReplaceDefaultConfigIdResponse>;

  replaceDefaultConfigId(
    request: szconfigmanager_pb.ReplaceDefaultConfigIdRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: szconfigmanager_pb.ReplaceDefaultConfigIdResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/szconfigmanager.SzConfigManager/ReplaceDefaultConfigId',
        request,
        metadata || {},
        this.methodDescriptorReplaceDefaultConfigId,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/szconfigmanager.SzConfigManager/ReplaceDefaultConfigId',
    request,
    metadata || {},
    this.methodDescriptorReplaceDefaultConfigId);
  }

  methodDescriptorSetDefaultConfigId = new grpcWeb.MethodDescriptor(
    '/szconfigmanager.SzConfigManager/SetDefaultConfigId',
    grpcWeb.MethodType.UNARY,
    szconfigmanager_pb.SetDefaultConfigIdRequest,
    szconfigmanager_pb.SetDefaultConfigIdResponse,
    (request: szconfigmanager_pb.SetDefaultConfigIdRequest) => {
      return request.serializeBinary();
    },
    szconfigmanager_pb.SetDefaultConfigIdResponse.deserializeBinary
  );

  setDefaultConfigId(
    request: szconfigmanager_pb.SetDefaultConfigIdRequest,
    metadata?: grpcWeb.Metadata | null): Promise<szconfigmanager_pb.SetDefaultConfigIdResponse>;

  setDefaultConfigId(
    request: szconfigmanager_pb.SetDefaultConfigIdRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: szconfigmanager_pb.SetDefaultConfigIdResponse) => void): grpcWeb.ClientReadableStream<szconfigmanager_pb.SetDefaultConfigIdResponse>;

  setDefaultConfigId(
    request: szconfigmanager_pb.SetDefaultConfigIdRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: szconfigmanager_pb.SetDefaultConfigIdResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/szconfigmanager.SzConfigManager/SetDefaultConfigId',
        request,
        metadata || {},
        this.methodDescriptorSetDefaultConfigId,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/szconfigmanager.SzConfigManager/SetDefaultConfigId',
    request,
    metadata || {},
    this.methodDescriptorSetDefaultConfigId);
  }

}

