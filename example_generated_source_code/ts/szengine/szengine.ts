/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.19.1
 * source: szengine.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
import * as grpc_1 from "@grpc/grpc-js";
export namespace szengine {
    export class AddRecordRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            data_source_code?: string;
            record_id?: string;
            record_definition?: string;
            flags?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("data_source_code" in data && data.data_source_code != undefined) {
                    this.data_source_code = data.data_source_code;
                }
                if ("record_id" in data && data.record_id != undefined) {
                    this.record_id = data.record_id;
                }
                if ("record_definition" in data && data.record_definition != undefined) {
                    this.record_definition = data.record_definition;
                }
                if ("flags" in data && data.flags != undefined) {
                    this.flags = data.flags;
                }
            }
        }
        get data_source_code() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set data_source_code(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get record_id() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set record_id(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get record_definition() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set record_definition(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get flags() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set flags(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            data_source_code?: string;
            record_id?: string;
            record_definition?: string;
            flags?: number;
        }): AddRecordRequest {
            const message = new AddRecordRequest({});
            if (data.data_source_code != null) {
                message.data_source_code = data.data_source_code;
            }
            if (data.record_id != null) {
                message.record_id = data.record_id;
            }
            if (data.record_definition != null) {
                message.record_definition = data.record_definition;
            }
            if (data.flags != null) {
                message.flags = data.flags;
            }
            return message;
        }
        toObject() {
            const data: {
                data_source_code?: string;
                record_id?: string;
                record_definition?: string;
                flags?: number;
            } = {};
            if (this.data_source_code != null) {
                data.data_source_code = this.data_source_code;
            }
            if (this.record_id != null) {
                data.record_id = this.record_id;
            }
            if (this.record_definition != null) {
                data.record_definition = this.record_definition;
            }
            if (this.flags != null) {
                data.flags = this.flags;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.data_source_code.length)
                writer.writeString(1, this.data_source_code);
            if (this.record_id.length)
                writer.writeString(2, this.record_id);
            if (this.record_definition.length)
                writer.writeString(3, this.record_definition);
            if (this.flags != 0)
                writer.writeInt64(4, this.flags);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AddRecordRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AddRecordRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.data_source_code = reader.readString();
                        break;
                    case 2:
                        message.record_id = reader.readString();
                        break;
                    case 3:
                        message.record_definition = reader.readString();
                        break;
                    case 4:
                        message.flags = reader.readInt64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): AddRecordRequest {
            return AddRecordRequest.deserialize(bytes);
        }
    }
    export class AddRecordResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            result?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("result" in data && data.result != undefined) {
                    this.result = data.result;
                }
            }
        }
        get result() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set result(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            result?: string;
        }): AddRecordResponse {
            const message = new AddRecordResponse({});
            if (data.result != null) {
                message.result = data.result;
            }
            return message;
        }
        toObject() {
            const data: {
                result?: string;
            } = {};
            if (this.result != null) {
                data.result = this.result;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.result.length)
                writer.writeString(1, this.result);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AddRecordResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AddRecordResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.result = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): AddRecordResponse {
            return AddRecordResponse.deserialize(bytes);
        }
    }
    export class CountRedoRecordsRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): CountRedoRecordsRequest {
            const message = new CountRedoRecordsRequest({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CountRedoRecordsRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CountRedoRecordsRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CountRedoRecordsRequest {
            return CountRedoRecordsRequest.deserialize(bytes);
        }
    }
    export class CountRedoRecordsResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            result?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("result" in data && data.result != undefined) {
                    this.result = data.result;
                }
            }
        }
        get result() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set result(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            result?: number;
        }): CountRedoRecordsResponse {
            const message = new CountRedoRecordsResponse({});
            if (data.result != null) {
                message.result = data.result;
            }
            return message;
        }
        toObject() {
            const data: {
                result?: number;
            } = {};
            if (this.result != null) {
                data.result = this.result;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.result != 0)
                writer.writeInt64(1, this.result);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CountRedoRecordsResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CountRedoRecordsResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.result = reader.readInt64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CountRedoRecordsResponse {
            return CountRedoRecordsResponse.deserialize(bytes);
        }
    }
    export class DeleteRecordRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            data_source_code?: string;
            record_id?: string;
            flags?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("data_source_code" in data && data.data_source_code != undefined) {
                    this.data_source_code = data.data_source_code;
                }
                if ("record_id" in data && data.record_id != undefined) {
                    this.record_id = data.record_id;
                }
                if ("flags" in data && data.flags != undefined) {
                    this.flags = data.flags;
                }
            }
        }
        get data_source_code() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set data_source_code(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get record_id() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set record_id(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get flags() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set flags(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            data_source_code?: string;
            record_id?: string;
            flags?: number;
        }): DeleteRecordRequest {
            const message = new DeleteRecordRequest({});
            if (data.data_source_code != null) {
                message.data_source_code = data.data_source_code;
            }
            if (data.record_id != null) {
                message.record_id = data.record_id;
            }
            if (data.flags != null) {
                message.flags = data.flags;
            }
            return message;
        }
        toObject() {
            const data: {
                data_source_code?: string;
                record_id?: string;
                flags?: number;
            } = {};
            if (this.data_source_code != null) {
                data.data_source_code = this.data_source_code;
            }
            if (this.record_id != null) {
                data.record_id = this.record_id;
            }
            if (this.flags != null) {
                data.flags = this.flags;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.data_source_code.length)
                writer.writeString(1, this.data_source_code);
            if (this.record_id.length)
                writer.writeString(2, this.record_id);
            if (this.flags != 0)
                writer.writeInt64(3, this.flags);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DeleteRecordRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DeleteRecordRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.data_source_code = reader.readString();
                        break;
                    case 2:
                        message.record_id = reader.readString();
                        break;
                    case 3:
                        message.flags = reader.readInt64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DeleteRecordRequest {
            return DeleteRecordRequest.deserialize(bytes);
        }
    }
    export class DeleteRecordResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            result?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("result" in data && data.result != undefined) {
                    this.result = data.result;
                }
            }
        }
        get result() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set result(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            result?: string;
        }): DeleteRecordResponse {
            const message = new DeleteRecordResponse({});
            if (data.result != null) {
                message.result = data.result;
            }
            return message;
        }
        toObject() {
            const data: {
                result?: string;
            } = {};
            if (this.result != null) {
                data.result = this.result;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.result.length)
                writer.writeString(1, this.result);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DeleteRecordResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DeleteRecordResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.result = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DeleteRecordResponse {
            return DeleteRecordResponse.deserialize(bytes);
        }
    }
    export class FindInterestingEntitiesByEntityIdRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            entity_id?: number;
            flags?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("entity_id" in data && data.entity_id != undefined) {
                    this.entity_id = data.entity_id;
                }
                if ("flags" in data && data.flags != undefined) {
                    this.flags = data.flags;
                }
            }
        }
        get entity_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set entity_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get flags() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set flags(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            entity_id?: number;
            flags?: number;
        }): FindInterestingEntitiesByEntityIdRequest {
            const message = new FindInterestingEntitiesByEntityIdRequest({});
            if (data.entity_id != null) {
                message.entity_id = data.entity_id;
            }
            if (data.flags != null) {
                message.flags = data.flags;
            }
            return message;
        }
        toObject() {
            const data: {
                entity_id?: number;
                flags?: number;
            } = {};
            if (this.entity_id != null) {
                data.entity_id = this.entity_id;
            }
            if (this.flags != null) {
                data.flags = this.flags;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.entity_id != 0)
                writer.writeInt64(1, this.entity_id);
            if (this.flags != 0)
                writer.writeInt64(2, this.flags);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): FindInterestingEntitiesByEntityIdRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new FindInterestingEntitiesByEntityIdRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.entity_id = reader.readInt64();
                        break;
                    case 2:
                        message.flags = reader.readInt64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): FindInterestingEntitiesByEntityIdRequest {
            return FindInterestingEntitiesByEntityIdRequest.deserialize(bytes);
        }
    }
    export class FindInterestingEntitiesByEntityIdResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            result?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("result" in data && data.result != undefined) {
                    this.result = data.result;
                }
            }
        }
        get result() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set result(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            result?: string;
        }): FindInterestingEntitiesByEntityIdResponse {
            const message = new FindInterestingEntitiesByEntityIdResponse({});
            if (data.result != null) {
                message.result = data.result;
            }
            return message;
        }
        toObject() {
            const data: {
                result?: string;
            } = {};
            if (this.result != null) {
                data.result = this.result;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.result.length)
                writer.writeString(1, this.result);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): FindInterestingEntitiesByEntityIdResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new FindInterestingEntitiesByEntityIdResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.result = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): FindInterestingEntitiesByEntityIdResponse {
            return FindInterestingEntitiesByEntityIdResponse.deserialize(bytes);
        }
    }
    export class FindInterestingEntitiesByRecordIdRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            data_source_code?: string;
            record_id?: string;
            flags?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("data_source_code" in data && data.data_source_code != undefined) {
                    this.data_source_code = data.data_source_code;
                }
                if ("record_id" in data && data.record_id != undefined) {
                    this.record_id = data.record_id;
                }
                if ("flags" in data && data.flags != undefined) {
                    this.flags = data.flags;
                }
            }
        }
        get data_source_code() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set data_source_code(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get record_id() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set record_id(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get flags() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set flags(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            data_source_code?: string;
            record_id?: string;
            flags?: number;
        }): FindInterestingEntitiesByRecordIdRequest {
            const message = new FindInterestingEntitiesByRecordIdRequest({});
            if (data.data_source_code != null) {
                message.data_source_code = data.data_source_code;
            }
            if (data.record_id != null) {
                message.record_id = data.record_id;
            }
            if (data.flags != null) {
                message.flags = data.flags;
            }
            return message;
        }
        toObject() {
            const data: {
                data_source_code?: string;
                record_id?: string;
                flags?: number;
            } = {};
            if (this.data_source_code != null) {
                data.data_source_code = this.data_source_code;
            }
            if (this.record_id != null) {
                data.record_id = this.record_id;
            }
            if (this.flags != null) {
                data.flags = this.flags;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.data_source_code.length)
                writer.writeString(1, this.data_source_code);
            if (this.record_id.length)
                writer.writeString(2, this.record_id);
            if (this.flags != 0)
                writer.writeInt64(3, this.flags);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): FindInterestingEntitiesByRecordIdRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new FindInterestingEntitiesByRecordIdRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.data_source_code = reader.readString();
                        break;
                    case 2:
                        message.record_id = reader.readString();
                        break;
                    case 3:
                        message.flags = reader.readInt64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): FindInterestingEntitiesByRecordIdRequest {
            return FindInterestingEntitiesByRecordIdRequest.deserialize(bytes);
        }
    }
    export class FindInterestingEntitiesByRecordIdResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            result?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("result" in data && data.result != undefined) {
                    this.result = data.result;
                }
            }
        }
        get result() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set result(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            result?: string;
        }): FindInterestingEntitiesByRecordIdResponse {
            const message = new FindInterestingEntitiesByRecordIdResponse({});
            if (data.result != null) {
                message.result = data.result;
            }
            return message;
        }
        toObject() {
            const data: {
                result?: string;
            } = {};
            if (this.result != null) {
                data.result = this.result;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.result.length)
                writer.writeString(1, this.result);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): FindInterestingEntitiesByRecordIdResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new FindInterestingEntitiesByRecordIdResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.result = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): FindInterestingEntitiesByRecordIdResponse {
            return FindInterestingEntitiesByRecordIdResponse.deserialize(bytes);
        }
    }
    export class FindNetworkByEntityIdRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            entity_ids?: string;
            max_degrees?: number;
            build_out_degrees?: number;
            build_out_max_entities?: number;
            flags?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("entity_ids" in data && data.entity_ids != undefined) {
                    this.entity_ids = data.entity_ids;
                }
                if ("max_degrees" in data && data.max_degrees != undefined) {
                    this.max_degrees = data.max_degrees;
                }
                if ("build_out_degrees" in data && data.build_out_degrees != undefined) {
                    this.build_out_degrees = data.build_out_degrees;
                }
                if ("build_out_max_entities" in data && data.build_out_max_entities != undefined) {
                    this.build_out_max_entities = data.build_out_max_entities;
                }
                if ("flags" in data && data.flags != undefined) {
                    this.flags = data.flags;
                }
            }
        }
        get entity_ids() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set entity_ids(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get max_degrees() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set max_degrees(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get build_out_degrees() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set build_out_degrees(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get build_out_max_entities() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set build_out_max_entities(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get flags() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
        }
        set flags(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        static fromObject(data: {
            entity_ids?: string;
            max_degrees?: number;
            build_out_degrees?: number;
            build_out_max_entities?: number;
            flags?: number;
        }): FindNetworkByEntityIdRequest {
            const message = new FindNetworkByEntityIdRequest({});
            if (data.entity_ids != null) {
                message.entity_ids = data.entity_ids;
            }
            if (data.max_degrees != null) {
                message.max_degrees = data.max_degrees;
            }
            if (data.build_out_degrees != null) {
                message.build_out_degrees = data.build_out_degrees;
            }
            if (data.build_out_max_entities != null) {
                message.build_out_max_entities = data.build_out_max_entities;
            }
            if (data.flags != null) {
                message.flags = data.flags;
            }
            return message;
        }
        toObject() {
            const data: {
                entity_ids?: string;
                max_degrees?: number;
                build_out_degrees?: number;
                build_out_max_entities?: number;
                flags?: number;
            } = {};
            if (this.entity_ids != null) {
                data.entity_ids = this.entity_ids;
            }
            if (this.max_degrees != null) {
                data.max_degrees = this.max_degrees;
            }
            if (this.build_out_degrees != null) {
                data.build_out_degrees = this.build_out_degrees;
            }
            if (this.build_out_max_entities != null) {
                data.build_out_max_entities = this.build_out_max_entities;
            }
            if (this.flags != null) {
                data.flags = this.flags;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.entity_ids.length)
                writer.writeString(1, this.entity_ids);
            if (this.max_degrees != 0)
                writer.writeInt64(2, this.max_degrees);
            if (this.build_out_degrees != 0)
                writer.writeInt64(3, this.build_out_degrees);
            if (this.build_out_max_entities != 0)
                writer.writeInt64(4, this.build_out_max_entities);
            if (this.flags != 0)
                writer.writeInt64(5, this.flags);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): FindNetworkByEntityIdRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new FindNetworkByEntityIdRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.entity_ids = reader.readString();
                        break;
                    case 2:
                        message.max_degrees = reader.readInt64();
                        break;
                    case 3:
                        message.build_out_degrees = reader.readInt64();
                        break;
                    case 4:
                        message.build_out_max_entities = reader.readInt64();
                        break;
                    case 5:
                        message.flags = reader.readInt64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): FindNetworkByEntityIdRequest {
            return FindNetworkByEntityIdRequest.deserialize(bytes);
        }
    }
    export class FindNetworkByEntityIdResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            result?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("result" in data && data.result != undefined) {
                    this.result = data.result;
                }
            }
        }
        get result() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set result(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            result?: string;
        }): FindNetworkByEntityIdResponse {
            const message = new FindNetworkByEntityIdResponse({});
            if (data.result != null) {
                message.result = data.result;
            }
            return message;
        }
        toObject() {
            const data: {
                result?: string;
            } = {};
            if (this.result != null) {
                data.result = this.result;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.result.length)
                writer.writeString(1, this.result);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): FindNetworkByEntityIdResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new FindNetworkByEntityIdResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.result = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): FindNetworkByEntityIdResponse {
            return FindNetworkByEntityIdResponse.deserialize(bytes);
        }
    }
    export class FindNetworkByRecordIdRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            record_keys?: string;
            max_degrees?: number;
            build_out_degrees?: number;
            build_out_max_entities?: number;
            flags?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("record_keys" in data && data.record_keys != undefined) {
                    this.record_keys = data.record_keys;
                }
                if ("max_degrees" in data && data.max_degrees != undefined) {
                    this.max_degrees = data.max_degrees;
                }
                if ("build_out_degrees" in data && data.build_out_degrees != undefined) {
                    this.build_out_degrees = data.build_out_degrees;
                }
                if ("build_out_max_entities" in data && data.build_out_max_entities != undefined) {
                    this.build_out_max_entities = data.build_out_max_entities;
                }
                if ("flags" in data && data.flags != undefined) {
                    this.flags = data.flags;
                }
            }
        }
        get record_keys() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set record_keys(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get max_degrees() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set max_degrees(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get build_out_degrees() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set build_out_degrees(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get build_out_max_entities() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set build_out_max_entities(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get flags() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
        }
        set flags(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        static fromObject(data: {
            record_keys?: string;
            max_degrees?: number;
            build_out_degrees?: number;
            build_out_max_entities?: number;
            flags?: number;
        }): FindNetworkByRecordIdRequest {
            const message = new FindNetworkByRecordIdRequest({});
            if (data.record_keys != null) {
                message.record_keys = data.record_keys;
            }
            if (data.max_degrees != null) {
                message.max_degrees = data.max_degrees;
            }
            if (data.build_out_degrees != null) {
                message.build_out_degrees = data.build_out_degrees;
            }
            if (data.build_out_max_entities != null) {
                message.build_out_max_entities = data.build_out_max_entities;
            }
            if (data.flags != null) {
                message.flags = data.flags;
            }
            return message;
        }
        toObject() {
            const data: {
                record_keys?: string;
                max_degrees?: number;
                build_out_degrees?: number;
                build_out_max_entities?: number;
                flags?: number;
            } = {};
            if (this.record_keys != null) {
                data.record_keys = this.record_keys;
            }
            if (this.max_degrees != null) {
                data.max_degrees = this.max_degrees;
            }
            if (this.build_out_degrees != null) {
                data.build_out_degrees = this.build_out_degrees;
            }
            if (this.build_out_max_entities != null) {
                data.build_out_max_entities = this.build_out_max_entities;
            }
            if (this.flags != null) {
                data.flags = this.flags;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.record_keys.length)
                writer.writeString(1, this.record_keys);
            if (this.max_degrees != 0)
                writer.writeInt64(2, this.max_degrees);
            if (this.build_out_degrees != 0)
                writer.writeInt64(3, this.build_out_degrees);
            if (this.build_out_max_entities != 0)
                writer.writeInt64(4, this.build_out_max_entities);
            if (this.flags != 0)
                writer.writeInt64(5, this.flags);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): FindNetworkByRecordIdRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new FindNetworkByRecordIdRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.record_keys = reader.readString();
                        break;
                    case 2:
                        message.max_degrees = reader.readInt64();
                        break;
                    case 3:
                        message.build_out_degrees = reader.readInt64();
                        break;
                    case 4:
                        message.build_out_max_entities = reader.readInt64();
                        break;
                    case 5:
                        message.flags = reader.readInt64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): FindNetworkByRecordIdRequest {
            return FindNetworkByRecordIdRequest.deserialize(bytes);
        }
    }
    export class FindNetworkByRecordIdResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            result?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("result" in data && data.result != undefined) {
                    this.result = data.result;
                }
            }
        }
        get result() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set result(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            result?: string;
        }): FindNetworkByRecordIdResponse {
            const message = new FindNetworkByRecordIdResponse({});
            if (data.result != null) {
                message.result = data.result;
            }
            return message;
        }
        toObject() {
            const data: {
                result?: string;
            } = {};
            if (this.result != null) {
                data.result = this.result;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.result.length)
                writer.writeString(1, this.result);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): FindNetworkByRecordIdResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new FindNetworkByRecordIdResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.result = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): FindNetworkByRecordIdResponse {
            return FindNetworkByRecordIdResponse.deserialize(bytes);
        }
    }
    export class FindPathByEntityIdRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            start_entity_id?: number;
            end_entity_id?: number;
            max_degrees?: number;
            avoid_entity_ids?: string;
            required_data_sources?: string;
            flags?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("start_entity_id" in data && data.start_entity_id != undefined) {
                    this.start_entity_id = data.start_entity_id;
                }
                if ("end_entity_id" in data && data.end_entity_id != undefined) {
                    this.end_entity_id = data.end_entity_id;
                }
                if ("max_degrees" in data && data.max_degrees != undefined) {
                    this.max_degrees = data.max_degrees;
                }
                if ("avoid_entity_ids" in data && data.avoid_entity_ids != undefined) {
                    this.avoid_entity_ids = data.avoid_entity_ids;
                }
                if ("required_data_sources" in data && data.required_data_sources != undefined) {
                    this.required_data_sources = data.required_data_sources;
                }
                if ("flags" in data && data.flags != undefined) {
                    this.flags = data.flags;
                }
            }
        }
        get start_entity_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set start_entity_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get end_entity_id() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set end_entity_id(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get max_degrees() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set max_degrees(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get avoid_entity_ids() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set avoid_entity_ids(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get required_data_sources() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set required_data_sources(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        get flags() {
            return pb_1.Message.getFieldWithDefault(this, 6, 0) as number;
        }
        set flags(value: number) {
            pb_1.Message.setField(this, 6, value);
        }
        static fromObject(data: {
            start_entity_id?: number;
            end_entity_id?: number;
            max_degrees?: number;
            avoid_entity_ids?: string;
            required_data_sources?: string;
            flags?: number;
        }): FindPathByEntityIdRequest {
            const message = new FindPathByEntityIdRequest({});
            if (data.start_entity_id != null) {
                message.start_entity_id = data.start_entity_id;
            }
            if (data.end_entity_id != null) {
                message.end_entity_id = data.end_entity_id;
            }
            if (data.max_degrees != null) {
                message.max_degrees = data.max_degrees;
            }
            if (data.avoid_entity_ids != null) {
                message.avoid_entity_ids = data.avoid_entity_ids;
            }
            if (data.required_data_sources != null) {
                message.required_data_sources = data.required_data_sources;
            }
            if (data.flags != null) {
                message.flags = data.flags;
            }
            return message;
        }
        toObject() {
            const data: {
                start_entity_id?: number;
                end_entity_id?: number;
                max_degrees?: number;
                avoid_entity_ids?: string;
                required_data_sources?: string;
                flags?: number;
            } = {};
            if (this.start_entity_id != null) {
                data.start_entity_id = this.start_entity_id;
            }
            if (this.end_entity_id != null) {
                data.end_entity_id = this.end_entity_id;
            }
            if (this.max_degrees != null) {
                data.max_degrees = this.max_degrees;
            }
            if (this.avoid_entity_ids != null) {
                data.avoid_entity_ids = this.avoid_entity_ids;
            }
            if (this.required_data_sources != null) {
                data.required_data_sources = this.required_data_sources;
            }
            if (this.flags != null) {
                data.flags = this.flags;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.start_entity_id != 0)
                writer.writeInt64(1, this.start_entity_id);
            if (this.end_entity_id != 0)
                writer.writeInt64(2, this.end_entity_id);
            if (this.max_degrees != 0)
                writer.writeInt64(3, this.max_degrees);
            if (this.avoid_entity_ids.length)
                writer.writeString(4, this.avoid_entity_ids);
            if (this.required_data_sources.length)
                writer.writeString(5, this.required_data_sources);
            if (this.flags != 0)
                writer.writeInt64(6, this.flags);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): FindPathByEntityIdRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new FindPathByEntityIdRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.start_entity_id = reader.readInt64();
                        break;
                    case 2:
                        message.end_entity_id = reader.readInt64();
                        break;
                    case 3:
                        message.max_degrees = reader.readInt64();
                        break;
                    case 4:
                        message.avoid_entity_ids = reader.readString();
                        break;
                    case 5:
                        message.required_data_sources = reader.readString();
                        break;
                    case 6:
                        message.flags = reader.readInt64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): FindPathByEntityIdRequest {
            return FindPathByEntityIdRequest.deserialize(bytes);
        }
    }
    export class FindPathByEntityIdResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            result?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("result" in data && data.result != undefined) {
                    this.result = data.result;
                }
            }
        }
        get result() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set result(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            result?: string;
        }): FindPathByEntityIdResponse {
            const message = new FindPathByEntityIdResponse({});
            if (data.result != null) {
                message.result = data.result;
            }
            return message;
        }
        toObject() {
            const data: {
                result?: string;
            } = {};
            if (this.result != null) {
                data.result = this.result;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.result.length)
                writer.writeString(1, this.result);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): FindPathByEntityIdResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new FindPathByEntityIdResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.result = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): FindPathByEntityIdResponse {
            return FindPathByEntityIdResponse.deserialize(bytes);
        }
    }
    export class FindPathByRecordIdRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            start_data_source_code?: string;
            start_record_id?: string;
            end_data_source_code?: string;
            end_record_id?: string;
            max_degrees?: number;
            avoid_record_keys?: string;
            required_data_sources?: string;
            flags?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("start_data_source_code" in data && data.start_data_source_code != undefined) {
                    this.start_data_source_code = data.start_data_source_code;
                }
                if ("start_record_id" in data && data.start_record_id != undefined) {
                    this.start_record_id = data.start_record_id;
                }
                if ("end_data_source_code" in data && data.end_data_source_code != undefined) {
                    this.end_data_source_code = data.end_data_source_code;
                }
                if ("end_record_id" in data && data.end_record_id != undefined) {
                    this.end_record_id = data.end_record_id;
                }
                if ("max_degrees" in data && data.max_degrees != undefined) {
                    this.max_degrees = data.max_degrees;
                }
                if ("avoid_record_keys" in data && data.avoid_record_keys != undefined) {
                    this.avoid_record_keys = data.avoid_record_keys;
                }
                if ("required_data_sources" in data && data.required_data_sources != undefined) {
                    this.required_data_sources = data.required_data_sources;
                }
                if ("flags" in data && data.flags != undefined) {
                    this.flags = data.flags;
                }
            }
        }
        get start_data_source_code() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set start_data_source_code(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get start_record_id() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set start_record_id(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get end_data_source_code() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set end_data_source_code(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get end_record_id() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set end_record_id(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get max_degrees() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
        }
        set max_degrees(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        get avoid_record_keys() {
            return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
        }
        set avoid_record_keys(value: string) {
            pb_1.Message.setField(this, 6, value);
        }
        get required_data_sources() {
            return pb_1.Message.getFieldWithDefault(this, 7, "") as string;
        }
        set required_data_sources(value: string) {
            pb_1.Message.setField(this, 7, value);
        }
        get flags() {
            return pb_1.Message.getFieldWithDefault(this, 8, 0) as number;
        }
        set flags(value: number) {
            pb_1.Message.setField(this, 8, value);
        }
        static fromObject(data: {
            start_data_source_code?: string;
            start_record_id?: string;
            end_data_source_code?: string;
            end_record_id?: string;
            max_degrees?: number;
            avoid_record_keys?: string;
            required_data_sources?: string;
            flags?: number;
        }): FindPathByRecordIdRequest {
            const message = new FindPathByRecordIdRequest({});
            if (data.start_data_source_code != null) {
                message.start_data_source_code = data.start_data_source_code;
            }
            if (data.start_record_id != null) {
                message.start_record_id = data.start_record_id;
            }
            if (data.end_data_source_code != null) {
                message.end_data_source_code = data.end_data_source_code;
            }
            if (data.end_record_id != null) {
                message.end_record_id = data.end_record_id;
            }
            if (data.max_degrees != null) {
                message.max_degrees = data.max_degrees;
            }
            if (data.avoid_record_keys != null) {
                message.avoid_record_keys = data.avoid_record_keys;
            }
            if (data.required_data_sources != null) {
                message.required_data_sources = data.required_data_sources;
            }
            if (data.flags != null) {
                message.flags = data.flags;
            }
            return message;
        }
        toObject() {
            const data: {
                start_data_source_code?: string;
                start_record_id?: string;
                end_data_source_code?: string;
                end_record_id?: string;
                max_degrees?: number;
                avoid_record_keys?: string;
                required_data_sources?: string;
                flags?: number;
            } = {};
            if (this.start_data_source_code != null) {
                data.start_data_source_code = this.start_data_source_code;
            }
            if (this.start_record_id != null) {
                data.start_record_id = this.start_record_id;
            }
            if (this.end_data_source_code != null) {
                data.end_data_source_code = this.end_data_source_code;
            }
            if (this.end_record_id != null) {
                data.end_record_id = this.end_record_id;
            }
            if (this.max_degrees != null) {
                data.max_degrees = this.max_degrees;
            }
            if (this.avoid_record_keys != null) {
                data.avoid_record_keys = this.avoid_record_keys;
            }
            if (this.required_data_sources != null) {
                data.required_data_sources = this.required_data_sources;
            }
            if (this.flags != null) {
                data.flags = this.flags;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.start_data_source_code.length)
                writer.writeString(1, this.start_data_source_code);
            if (this.start_record_id.length)
                writer.writeString(2, this.start_record_id);
            if (this.end_data_source_code.length)
                writer.writeString(3, this.end_data_source_code);
            if (this.end_record_id.length)
                writer.writeString(4, this.end_record_id);
            if (this.max_degrees != 0)
                writer.writeInt64(5, this.max_degrees);
            if (this.avoid_record_keys.length)
                writer.writeString(6, this.avoid_record_keys);
            if (this.required_data_sources.length)
                writer.writeString(7, this.required_data_sources);
            if (this.flags != 0)
                writer.writeInt64(8, this.flags);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): FindPathByRecordIdRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new FindPathByRecordIdRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.start_data_source_code = reader.readString();
                        break;
                    case 2:
                        message.start_record_id = reader.readString();
                        break;
                    case 3:
                        message.end_data_source_code = reader.readString();
                        break;
                    case 4:
                        message.end_record_id = reader.readString();
                        break;
                    case 5:
                        message.max_degrees = reader.readInt64();
                        break;
                    case 6:
                        message.avoid_record_keys = reader.readString();
                        break;
                    case 7:
                        message.required_data_sources = reader.readString();
                        break;
                    case 8:
                        message.flags = reader.readInt64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): FindPathByRecordIdRequest {
            return FindPathByRecordIdRequest.deserialize(bytes);
        }
    }
    export class FindPathByRecordIdResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            result?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("result" in data && data.result != undefined) {
                    this.result = data.result;
                }
            }
        }
        get result() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set result(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            result?: string;
        }): FindPathByRecordIdResponse {
            const message = new FindPathByRecordIdResponse({});
            if (data.result != null) {
                message.result = data.result;
            }
            return message;
        }
        toObject() {
            const data: {
                result?: string;
            } = {};
            if (this.result != null) {
                data.result = this.result;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.result.length)
                writer.writeString(1, this.result);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): FindPathByRecordIdResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new FindPathByRecordIdResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.result = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): FindPathByRecordIdResponse {
            return FindPathByRecordIdResponse.deserialize(bytes);
        }
    }
    export class GetActiveConfigIdRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): GetActiveConfigIdRequest {
            const message = new GetActiveConfigIdRequest({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetActiveConfigIdRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetActiveConfigIdRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetActiveConfigIdRequest {
            return GetActiveConfigIdRequest.deserialize(bytes);
        }
    }
    export class GetActiveConfigIdResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            result?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("result" in data && data.result != undefined) {
                    this.result = data.result;
                }
            }
        }
        get result() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set result(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            result?: number;
        }): GetActiveConfigIdResponse {
            const message = new GetActiveConfigIdResponse({});
            if (data.result != null) {
                message.result = data.result;
            }
            return message;
        }
        toObject() {
            const data: {
                result?: number;
            } = {};
            if (this.result != null) {
                data.result = this.result;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.result != 0)
                writer.writeInt64(1, this.result);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetActiveConfigIdResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetActiveConfigIdResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.result = reader.readInt64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetActiveConfigIdResponse {
            return GetActiveConfigIdResponse.deserialize(bytes);
        }
    }
    export class GetEntityByEntityIdRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            entity_id?: number;
            flags?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("entity_id" in data && data.entity_id != undefined) {
                    this.entity_id = data.entity_id;
                }
                if ("flags" in data && data.flags != undefined) {
                    this.flags = data.flags;
                }
            }
        }
        get entity_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set entity_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get flags() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set flags(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            entity_id?: number;
            flags?: number;
        }): GetEntityByEntityIdRequest {
            const message = new GetEntityByEntityIdRequest({});
            if (data.entity_id != null) {
                message.entity_id = data.entity_id;
            }
            if (data.flags != null) {
                message.flags = data.flags;
            }
            return message;
        }
        toObject() {
            const data: {
                entity_id?: number;
                flags?: number;
            } = {};
            if (this.entity_id != null) {
                data.entity_id = this.entity_id;
            }
            if (this.flags != null) {
                data.flags = this.flags;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.entity_id != 0)
                writer.writeInt64(1, this.entity_id);
            if (this.flags != 0)
                writer.writeInt64(2, this.flags);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetEntityByEntityIdRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetEntityByEntityIdRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.entity_id = reader.readInt64();
                        break;
                    case 2:
                        message.flags = reader.readInt64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetEntityByEntityIdRequest {
            return GetEntityByEntityIdRequest.deserialize(bytes);
        }
    }
    export class GetEntityByEntityIdResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            result?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("result" in data && data.result != undefined) {
                    this.result = data.result;
                }
            }
        }
        get result() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set result(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            result?: string;
        }): GetEntityByEntityIdResponse {
            const message = new GetEntityByEntityIdResponse({});
            if (data.result != null) {
                message.result = data.result;
            }
            return message;
        }
        toObject() {
            const data: {
                result?: string;
            } = {};
            if (this.result != null) {
                data.result = this.result;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.result.length)
                writer.writeString(1, this.result);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetEntityByEntityIdResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetEntityByEntityIdResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.result = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetEntityByEntityIdResponse {
            return GetEntityByEntityIdResponse.deserialize(bytes);
        }
    }
    export class GetEntityByRecordIdRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            data_source_code?: string;
            record_id?: string;
            flags?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("data_source_code" in data && data.data_source_code != undefined) {
                    this.data_source_code = data.data_source_code;
                }
                if ("record_id" in data && data.record_id != undefined) {
                    this.record_id = data.record_id;
                }
                if ("flags" in data && data.flags != undefined) {
                    this.flags = data.flags;
                }
            }
        }
        get data_source_code() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set data_source_code(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get record_id() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set record_id(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get flags() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set flags(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            data_source_code?: string;
            record_id?: string;
            flags?: number;
        }): GetEntityByRecordIdRequest {
            const message = new GetEntityByRecordIdRequest({});
            if (data.data_source_code != null) {
                message.data_source_code = data.data_source_code;
            }
            if (data.record_id != null) {
                message.record_id = data.record_id;
            }
            if (data.flags != null) {
                message.flags = data.flags;
            }
            return message;
        }
        toObject() {
            const data: {
                data_source_code?: string;
                record_id?: string;
                flags?: number;
            } = {};
            if (this.data_source_code != null) {
                data.data_source_code = this.data_source_code;
            }
            if (this.record_id != null) {
                data.record_id = this.record_id;
            }
            if (this.flags != null) {
                data.flags = this.flags;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.data_source_code.length)
                writer.writeString(1, this.data_source_code);
            if (this.record_id.length)
                writer.writeString(2, this.record_id);
            if (this.flags != 0)
                writer.writeInt64(3, this.flags);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetEntityByRecordIdRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetEntityByRecordIdRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.data_source_code = reader.readString();
                        break;
                    case 2:
                        message.record_id = reader.readString();
                        break;
                    case 3:
                        message.flags = reader.readInt64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetEntityByRecordIdRequest {
            return GetEntityByRecordIdRequest.deserialize(bytes);
        }
    }
    export class GetEntityByRecordIdResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            result?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("result" in data && data.result != undefined) {
                    this.result = data.result;
                }
            }
        }
        get result() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set result(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            result?: string;
        }): GetEntityByRecordIdResponse {
            const message = new GetEntityByRecordIdResponse({});
            if (data.result != null) {
                message.result = data.result;
            }
            return message;
        }
        toObject() {
            const data: {
                result?: string;
            } = {};
            if (this.result != null) {
                data.result = this.result;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.result.length)
                writer.writeString(1, this.result);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetEntityByRecordIdResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetEntityByRecordIdResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.result = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetEntityByRecordIdResponse {
            return GetEntityByRecordIdResponse.deserialize(bytes);
        }
    }
    export class GetRecordPreviewRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            record_definition?: string;
            flags?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("record_definition" in data && data.record_definition != undefined) {
                    this.record_definition = data.record_definition;
                }
                if ("flags" in data && data.flags != undefined) {
                    this.flags = data.flags;
                }
            }
        }
        get record_definition() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set record_definition(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get flags() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set flags(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            record_definition?: string;
            flags?: number;
        }): GetRecordPreviewRequest {
            const message = new GetRecordPreviewRequest({});
            if (data.record_definition != null) {
                message.record_definition = data.record_definition;
            }
            if (data.flags != null) {
                message.flags = data.flags;
            }
            return message;
        }
        toObject() {
            const data: {
                record_definition?: string;
                flags?: number;
            } = {};
            if (this.record_definition != null) {
                data.record_definition = this.record_definition;
            }
            if (this.flags != null) {
                data.flags = this.flags;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.record_definition.length)
                writer.writeString(1, this.record_definition);
            if (this.flags != 0)
                writer.writeInt64(2, this.flags);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetRecordPreviewRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetRecordPreviewRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.record_definition = reader.readString();
                        break;
                    case 2:
                        message.flags = reader.readInt64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetRecordPreviewRequest {
            return GetRecordPreviewRequest.deserialize(bytes);
        }
    }
    export class GetRecordPreviewResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            result?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("result" in data && data.result != undefined) {
                    this.result = data.result;
                }
            }
        }
        get result() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set result(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            result?: string;
        }): GetRecordPreviewResponse {
            const message = new GetRecordPreviewResponse({});
            if (data.result != null) {
                message.result = data.result;
            }
            return message;
        }
        toObject() {
            const data: {
                result?: string;
            } = {};
            if (this.result != null) {
                data.result = this.result;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.result.length)
                writer.writeString(1, this.result);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetRecordPreviewResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetRecordPreviewResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.result = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetRecordPreviewResponse {
            return GetRecordPreviewResponse.deserialize(bytes);
        }
    }
    export class GetRecordRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            data_source_code?: string;
            record_id?: string;
            flags?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("data_source_code" in data && data.data_source_code != undefined) {
                    this.data_source_code = data.data_source_code;
                }
                if ("record_id" in data && data.record_id != undefined) {
                    this.record_id = data.record_id;
                }
                if ("flags" in data && data.flags != undefined) {
                    this.flags = data.flags;
                }
            }
        }
        get data_source_code() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set data_source_code(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get record_id() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set record_id(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get flags() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set flags(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            data_source_code?: string;
            record_id?: string;
            flags?: number;
        }): GetRecordRequest {
            const message = new GetRecordRequest({});
            if (data.data_source_code != null) {
                message.data_source_code = data.data_source_code;
            }
            if (data.record_id != null) {
                message.record_id = data.record_id;
            }
            if (data.flags != null) {
                message.flags = data.flags;
            }
            return message;
        }
        toObject() {
            const data: {
                data_source_code?: string;
                record_id?: string;
                flags?: number;
            } = {};
            if (this.data_source_code != null) {
                data.data_source_code = this.data_source_code;
            }
            if (this.record_id != null) {
                data.record_id = this.record_id;
            }
            if (this.flags != null) {
                data.flags = this.flags;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.data_source_code.length)
                writer.writeString(1, this.data_source_code);
            if (this.record_id.length)
                writer.writeString(2, this.record_id);
            if (this.flags != 0)
                writer.writeInt64(3, this.flags);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetRecordRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetRecordRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.data_source_code = reader.readString();
                        break;
                    case 2:
                        message.record_id = reader.readString();
                        break;
                    case 3:
                        message.flags = reader.readInt64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetRecordRequest {
            return GetRecordRequest.deserialize(bytes);
        }
    }
    export class GetRecordResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            result?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("result" in data && data.result != undefined) {
                    this.result = data.result;
                }
            }
        }
        get result() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set result(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            result?: string;
        }): GetRecordResponse {
            const message = new GetRecordResponse({});
            if (data.result != null) {
                message.result = data.result;
            }
            return message;
        }
        toObject() {
            const data: {
                result?: string;
            } = {};
            if (this.result != null) {
                data.result = this.result;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.result.length)
                writer.writeString(1, this.result);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetRecordResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetRecordResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.result = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetRecordResponse {
            return GetRecordResponse.deserialize(bytes);
        }
    }
    export class GetRedoRecordRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): GetRedoRecordRequest {
            const message = new GetRedoRecordRequest({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetRedoRecordRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetRedoRecordRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetRedoRecordRequest {
            return GetRedoRecordRequest.deserialize(bytes);
        }
    }
    export class GetRedoRecordResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            result?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("result" in data && data.result != undefined) {
                    this.result = data.result;
                }
            }
        }
        get result() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set result(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            result?: string;
        }): GetRedoRecordResponse {
            const message = new GetRedoRecordResponse({});
            if (data.result != null) {
                message.result = data.result;
            }
            return message;
        }
        toObject() {
            const data: {
                result?: string;
            } = {};
            if (this.result != null) {
                data.result = this.result;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.result.length)
                writer.writeString(1, this.result);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetRedoRecordResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetRedoRecordResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.result = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetRedoRecordResponse {
            return GetRedoRecordResponse.deserialize(bytes);
        }
    }
    export class GetStatsRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): GetStatsRequest {
            const message = new GetStatsRequest({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetStatsRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetStatsRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetStatsRequest {
            return GetStatsRequest.deserialize(bytes);
        }
    }
    export class GetStatsResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            result?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("result" in data && data.result != undefined) {
                    this.result = data.result;
                }
            }
        }
        get result() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set result(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            result?: string;
        }): GetStatsResponse {
            const message = new GetStatsResponse({});
            if (data.result != null) {
                message.result = data.result;
            }
            return message;
        }
        toObject() {
            const data: {
                result?: string;
            } = {};
            if (this.result != null) {
                data.result = this.result;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.result.length)
                writer.writeString(1, this.result);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetStatsResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetStatsResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.result = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetStatsResponse {
            return GetStatsResponse.deserialize(bytes);
        }
    }
    export class GetVirtualEntityByRecordIdRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            record_keys?: string;
            flags?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("record_keys" in data && data.record_keys != undefined) {
                    this.record_keys = data.record_keys;
                }
                if ("flags" in data && data.flags != undefined) {
                    this.flags = data.flags;
                }
            }
        }
        get record_keys() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set record_keys(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get flags() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set flags(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            record_keys?: string;
            flags?: number;
        }): GetVirtualEntityByRecordIdRequest {
            const message = new GetVirtualEntityByRecordIdRequest({});
            if (data.record_keys != null) {
                message.record_keys = data.record_keys;
            }
            if (data.flags != null) {
                message.flags = data.flags;
            }
            return message;
        }
        toObject() {
            const data: {
                record_keys?: string;
                flags?: number;
            } = {};
            if (this.record_keys != null) {
                data.record_keys = this.record_keys;
            }
            if (this.flags != null) {
                data.flags = this.flags;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.record_keys.length)
                writer.writeString(1, this.record_keys);
            if (this.flags != 0)
                writer.writeInt64(2, this.flags);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetVirtualEntityByRecordIdRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetVirtualEntityByRecordIdRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.record_keys = reader.readString();
                        break;
                    case 2:
                        message.flags = reader.readInt64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetVirtualEntityByRecordIdRequest {
            return GetVirtualEntityByRecordIdRequest.deserialize(bytes);
        }
    }
    export class GetVirtualEntityByRecordIdResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            result?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("result" in data && data.result != undefined) {
                    this.result = data.result;
                }
            }
        }
        get result() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set result(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            result?: string;
        }): GetVirtualEntityByRecordIdResponse {
            const message = new GetVirtualEntityByRecordIdResponse({});
            if (data.result != null) {
                message.result = data.result;
            }
            return message;
        }
        toObject() {
            const data: {
                result?: string;
            } = {};
            if (this.result != null) {
                data.result = this.result;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.result.length)
                writer.writeString(1, this.result);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetVirtualEntityByRecordIdResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetVirtualEntityByRecordIdResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.result = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetVirtualEntityByRecordIdResponse {
            return GetVirtualEntityByRecordIdResponse.deserialize(bytes);
        }
    }
    export class HowEntityByEntityIdRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            entity_id?: number;
            flags?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("entity_id" in data && data.entity_id != undefined) {
                    this.entity_id = data.entity_id;
                }
                if ("flags" in data && data.flags != undefined) {
                    this.flags = data.flags;
                }
            }
        }
        get entity_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set entity_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get flags() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set flags(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            entity_id?: number;
            flags?: number;
        }): HowEntityByEntityIdRequest {
            const message = new HowEntityByEntityIdRequest({});
            if (data.entity_id != null) {
                message.entity_id = data.entity_id;
            }
            if (data.flags != null) {
                message.flags = data.flags;
            }
            return message;
        }
        toObject() {
            const data: {
                entity_id?: number;
                flags?: number;
            } = {};
            if (this.entity_id != null) {
                data.entity_id = this.entity_id;
            }
            if (this.flags != null) {
                data.flags = this.flags;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.entity_id != 0)
                writer.writeInt64(1, this.entity_id);
            if (this.flags != 0)
                writer.writeInt64(2, this.flags);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): HowEntityByEntityIdRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new HowEntityByEntityIdRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.entity_id = reader.readInt64();
                        break;
                    case 2:
                        message.flags = reader.readInt64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): HowEntityByEntityIdRequest {
            return HowEntityByEntityIdRequest.deserialize(bytes);
        }
    }
    export class HowEntityByEntityIdResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            result?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("result" in data && data.result != undefined) {
                    this.result = data.result;
                }
            }
        }
        get result() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set result(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            result?: string;
        }): HowEntityByEntityIdResponse {
            const message = new HowEntityByEntityIdResponse({});
            if (data.result != null) {
                message.result = data.result;
            }
            return message;
        }
        toObject() {
            const data: {
                result?: string;
            } = {};
            if (this.result != null) {
                data.result = this.result;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.result.length)
                writer.writeString(1, this.result);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): HowEntityByEntityIdResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new HowEntityByEntityIdResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.result = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): HowEntityByEntityIdResponse {
            return HowEntityByEntityIdResponse.deserialize(bytes);
        }
    }
    export class PrimeEngineRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): PrimeEngineRequest {
            const message = new PrimeEngineRequest({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PrimeEngineRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new PrimeEngineRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): PrimeEngineRequest {
            return PrimeEngineRequest.deserialize(bytes);
        }
    }
    export class PrimeEngineResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): PrimeEngineResponse {
            const message = new PrimeEngineResponse({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PrimeEngineResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new PrimeEngineResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): PrimeEngineResponse {
            return PrimeEngineResponse.deserialize(bytes);
        }
    }
    export class ProcessRedoRecordRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            redo_record?: string;
            flags?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("redo_record" in data && data.redo_record != undefined) {
                    this.redo_record = data.redo_record;
                }
                if ("flags" in data && data.flags != undefined) {
                    this.flags = data.flags;
                }
            }
        }
        get redo_record() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set redo_record(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get flags() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set flags(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            redo_record?: string;
            flags?: number;
        }): ProcessRedoRecordRequest {
            const message = new ProcessRedoRecordRequest({});
            if (data.redo_record != null) {
                message.redo_record = data.redo_record;
            }
            if (data.flags != null) {
                message.flags = data.flags;
            }
            return message;
        }
        toObject() {
            const data: {
                redo_record?: string;
                flags?: number;
            } = {};
            if (this.redo_record != null) {
                data.redo_record = this.redo_record;
            }
            if (this.flags != null) {
                data.flags = this.flags;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.redo_record.length)
                writer.writeString(1, this.redo_record);
            if (this.flags != 0)
                writer.writeInt64(2, this.flags);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ProcessRedoRecordRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ProcessRedoRecordRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.redo_record = reader.readString();
                        break;
                    case 2:
                        message.flags = reader.readInt64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ProcessRedoRecordRequest {
            return ProcessRedoRecordRequest.deserialize(bytes);
        }
    }
    export class ProcessRedoRecordResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            result?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("result" in data && data.result != undefined) {
                    this.result = data.result;
                }
            }
        }
        get result() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set result(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            result?: string;
        }): ProcessRedoRecordResponse {
            const message = new ProcessRedoRecordResponse({});
            if (data.result != null) {
                message.result = data.result;
            }
            return message;
        }
        toObject() {
            const data: {
                result?: string;
            } = {};
            if (this.result != null) {
                data.result = this.result;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.result.length)
                writer.writeString(1, this.result);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ProcessRedoRecordResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ProcessRedoRecordResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.result = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ProcessRedoRecordResponse {
            return ProcessRedoRecordResponse.deserialize(bytes);
        }
    }
    export class ReevaluateEntityRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            entity_id?: number;
            flags?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("entity_id" in data && data.entity_id != undefined) {
                    this.entity_id = data.entity_id;
                }
                if ("flags" in data && data.flags != undefined) {
                    this.flags = data.flags;
                }
            }
        }
        get entity_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set entity_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get flags() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set flags(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            entity_id?: number;
            flags?: number;
        }): ReevaluateEntityRequest {
            const message = new ReevaluateEntityRequest({});
            if (data.entity_id != null) {
                message.entity_id = data.entity_id;
            }
            if (data.flags != null) {
                message.flags = data.flags;
            }
            return message;
        }
        toObject() {
            const data: {
                entity_id?: number;
                flags?: number;
            } = {};
            if (this.entity_id != null) {
                data.entity_id = this.entity_id;
            }
            if (this.flags != null) {
                data.flags = this.flags;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.entity_id != 0)
                writer.writeInt64(1, this.entity_id);
            if (this.flags != 0)
                writer.writeInt64(2, this.flags);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ReevaluateEntityRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ReevaluateEntityRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.entity_id = reader.readInt64();
                        break;
                    case 2:
                        message.flags = reader.readInt64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ReevaluateEntityRequest {
            return ReevaluateEntityRequest.deserialize(bytes);
        }
    }
    export class ReevaluateEntityResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            result?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("result" in data && data.result != undefined) {
                    this.result = data.result;
                }
            }
        }
        get result() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set result(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            result?: string;
        }): ReevaluateEntityResponse {
            const message = new ReevaluateEntityResponse({});
            if (data.result != null) {
                message.result = data.result;
            }
            return message;
        }
        toObject() {
            const data: {
                result?: string;
            } = {};
            if (this.result != null) {
                data.result = this.result;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.result.length)
                writer.writeString(1, this.result);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ReevaluateEntityResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ReevaluateEntityResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.result = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ReevaluateEntityResponse {
            return ReevaluateEntityResponse.deserialize(bytes);
        }
    }
    export class ReevaluateRecordRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            data_source_code?: string;
            record_id?: string;
            flags?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("data_source_code" in data && data.data_source_code != undefined) {
                    this.data_source_code = data.data_source_code;
                }
                if ("record_id" in data && data.record_id != undefined) {
                    this.record_id = data.record_id;
                }
                if ("flags" in data && data.flags != undefined) {
                    this.flags = data.flags;
                }
            }
        }
        get data_source_code() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set data_source_code(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get record_id() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set record_id(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get flags() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set flags(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            data_source_code?: string;
            record_id?: string;
            flags?: number;
        }): ReevaluateRecordRequest {
            const message = new ReevaluateRecordRequest({});
            if (data.data_source_code != null) {
                message.data_source_code = data.data_source_code;
            }
            if (data.record_id != null) {
                message.record_id = data.record_id;
            }
            if (data.flags != null) {
                message.flags = data.flags;
            }
            return message;
        }
        toObject() {
            const data: {
                data_source_code?: string;
                record_id?: string;
                flags?: number;
            } = {};
            if (this.data_source_code != null) {
                data.data_source_code = this.data_source_code;
            }
            if (this.record_id != null) {
                data.record_id = this.record_id;
            }
            if (this.flags != null) {
                data.flags = this.flags;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.data_source_code.length)
                writer.writeString(1, this.data_source_code);
            if (this.record_id.length)
                writer.writeString(2, this.record_id);
            if (this.flags != 0)
                writer.writeInt64(3, this.flags);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ReevaluateRecordRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ReevaluateRecordRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.data_source_code = reader.readString();
                        break;
                    case 2:
                        message.record_id = reader.readString();
                        break;
                    case 3:
                        message.flags = reader.readInt64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ReevaluateRecordRequest {
            return ReevaluateRecordRequest.deserialize(bytes);
        }
    }
    export class ReevaluateRecordResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            result?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("result" in data && data.result != undefined) {
                    this.result = data.result;
                }
            }
        }
        get result() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set result(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            result?: string;
        }): ReevaluateRecordResponse {
            const message = new ReevaluateRecordResponse({});
            if (data.result != null) {
                message.result = data.result;
            }
            return message;
        }
        toObject() {
            const data: {
                result?: string;
            } = {};
            if (this.result != null) {
                data.result = this.result;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.result.length)
                writer.writeString(1, this.result);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ReevaluateRecordResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ReevaluateRecordResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.result = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ReevaluateRecordResponse {
            return ReevaluateRecordResponse.deserialize(bytes);
        }
    }
    export class ReinitializeRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            config_id?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("config_id" in data && data.config_id != undefined) {
                    this.config_id = data.config_id;
                }
            }
        }
        get config_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set config_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            config_id?: number;
        }): ReinitializeRequest {
            const message = new ReinitializeRequest({});
            if (data.config_id != null) {
                message.config_id = data.config_id;
            }
            return message;
        }
        toObject() {
            const data: {
                config_id?: number;
            } = {};
            if (this.config_id != null) {
                data.config_id = this.config_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.config_id != 0)
                writer.writeInt64(1, this.config_id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ReinitializeRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ReinitializeRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.config_id = reader.readInt64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ReinitializeRequest {
            return ReinitializeRequest.deserialize(bytes);
        }
    }
    export class ReinitializeResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): ReinitializeResponse {
            const message = new ReinitializeResponse({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ReinitializeResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ReinitializeResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ReinitializeResponse {
            return ReinitializeResponse.deserialize(bytes);
        }
    }
    export class SearchByAttributesRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            attributes?: string;
            search_profile?: string;
            flags?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("attributes" in data && data.attributes != undefined) {
                    this.attributes = data.attributes;
                }
                if ("search_profile" in data && data.search_profile != undefined) {
                    this.search_profile = data.search_profile;
                }
                if ("flags" in data && data.flags != undefined) {
                    this.flags = data.flags;
                }
            }
        }
        get attributes() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set attributes(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get search_profile() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set search_profile(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get flags() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set flags(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            attributes?: string;
            search_profile?: string;
            flags?: number;
        }): SearchByAttributesRequest {
            const message = new SearchByAttributesRequest({});
            if (data.attributes != null) {
                message.attributes = data.attributes;
            }
            if (data.search_profile != null) {
                message.search_profile = data.search_profile;
            }
            if (data.flags != null) {
                message.flags = data.flags;
            }
            return message;
        }
        toObject() {
            const data: {
                attributes?: string;
                search_profile?: string;
                flags?: number;
            } = {};
            if (this.attributes != null) {
                data.attributes = this.attributes;
            }
            if (this.search_profile != null) {
                data.search_profile = this.search_profile;
            }
            if (this.flags != null) {
                data.flags = this.flags;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.attributes.length)
                writer.writeString(1, this.attributes);
            if (this.search_profile.length)
                writer.writeString(2, this.search_profile);
            if (this.flags != 0)
                writer.writeInt64(3, this.flags);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SearchByAttributesRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SearchByAttributesRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.attributes = reader.readString();
                        break;
                    case 2:
                        message.search_profile = reader.readString();
                        break;
                    case 3:
                        message.flags = reader.readInt64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SearchByAttributesRequest {
            return SearchByAttributesRequest.deserialize(bytes);
        }
    }
    export class SearchByAttributesResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            result?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("result" in data && data.result != undefined) {
                    this.result = data.result;
                }
            }
        }
        get result() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set result(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            result?: string;
        }): SearchByAttributesResponse {
            const message = new SearchByAttributesResponse({});
            if (data.result != null) {
                message.result = data.result;
            }
            return message;
        }
        toObject() {
            const data: {
                result?: string;
            } = {};
            if (this.result != null) {
                data.result = this.result;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.result.length)
                writer.writeString(1, this.result);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SearchByAttributesResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SearchByAttributesResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.result = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SearchByAttributesResponse {
            return SearchByAttributesResponse.deserialize(bytes);
        }
    }
    export class StreamExportCsvEntityReportRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            csv_column_list?: string;
            flags?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("csv_column_list" in data && data.csv_column_list != undefined) {
                    this.csv_column_list = data.csv_column_list;
                }
                if ("flags" in data && data.flags != undefined) {
                    this.flags = data.flags;
                }
            }
        }
        get csv_column_list() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set csv_column_list(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get flags() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set flags(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            csv_column_list?: string;
            flags?: number;
        }): StreamExportCsvEntityReportRequest {
            const message = new StreamExportCsvEntityReportRequest({});
            if (data.csv_column_list != null) {
                message.csv_column_list = data.csv_column_list;
            }
            if (data.flags != null) {
                message.flags = data.flags;
            }
            return message;
        }
        toObject() {
            const data: {
                csv_column_list?: string;
                flags?: number;
            } = {};
            if (this.csv_column_list != null) {
                data.csv_column_list = this.csv_column_list;
            }
            if (this.flags != null) {
                data.flags = this.flags;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.csv_column_list.length)
                writer.writeString(1, this.csv_column_list);
            if (this.flags != 0)
                writer.writeInt64(2, this.flags);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): StreamExportCsvEntityReportRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new StreamExportCsvEntityReportRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.csv_column_list = reader.readString();
                        break;
                    case 2:
                        message.flags = reader.readInt64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): StreamExportCsvEntityReportRequest {
            return StreamExportCsvEntityReportRequest.deserialize(bytes);
        }
    }
    export class StreamExportCsvEntityReportResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            result?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("result" in data && data.result != undefined) {
                    this.result = data.result;
                }
            }
        }
        get result() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set result(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            result?: string;
        }): StreamExportCsvEntityReportResponse {
            const message = new StreamExportCsvEntityReportResponse({});
            if (data.result != null) {
                message.result = data.result;
            }
            return message;
        }
        toObject() {
            const data: {
                result?: string;
            } = {};
            if (this.result != null) {
                data.result = this.result;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.result.length)
                writer.writeString(1, this.result);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): StreamExportCsvEntityReportResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new StreamExportCsvEntityReportResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.result = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): StreamExportCsvEntityReportResponse {
            return StreamExportCsvEntityReportResponse.deserialize(bytes);
        }
    }
    export class StreamExportJsonEntityReportRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            flags?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("flags" in data && data.flags != undefined) {
                    this.flags = data.flags;
                }
            }
        }
        get flags() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set flags(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            flags?: number;
        }): StreamExportJsonEntityReportRequest {
            const message = new StreamExportJsonEntityReportRequest({});
            if (data.flags != null) {
                message.flags = data.flags;
            }
            return message;
        }
        toObject() {
            const data: {
                flags?: number;
            } = {};
            if (this.flags != null) {
                data.flags = this.flags;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.flags != 0)
                writer.writeInt64(1, this.flags);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): StreamExportJsonEntityReportRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new StreamExportJsonEntityReportRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.flags = reader.readInt64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): StreamExportJsonEntityReportRequest {
            return StreamExportJsonEntityReportRequest.deserialize(bytes);
        }
    }
    export class StreamExportJsonEntityReportResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            result?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("result" in data && data.result != undefined) {
                    this.result = data.result;
                }
            }
        }
        get result() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set result(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            result?: string;
        }): StreamExportJsonEntityReportResponse {
            const message = new StreamExportJsonEntityReportResponse({});
            if (data.result != null) {
                message.result = data.result;
            }
            return message;
        }
        toObject() {
            const data: {
                result?: string;
            } = {};
            if (this.result != null) {
                data.result = this.result;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.result.length)
                writer.writeString(1, this.result);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): StreamExportJsonEntityReportResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new StreamExportJsonEntityReportResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.result = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): StreamExportJsonEntityReportResponse {
            return StreamExportJsonEntityReportResponse.deserialize(bytes);
        }
    }
    export class WhyEntitiesRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            entity_id_1?: number;
            entity_id_2?: number;
            flags?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("entity_id_1" in data && data.entity_id_1 != undefined) {
                    this.entity_id_1 = data.entity_id_1;
                }
                if ("entity_id_2" in data && data.entity_id_2 != undefined) {
                    this.entity_id_2 = data.entity_id_2;
                }
                if ("flags" in data && data.flags != undefined) {
                    this.flags = data.flags;
                }
            }
        }
        get entity_id_1() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set entity_id_1(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get entity_id_2() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set entity_id_2(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get flags() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set flags(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            entity_id_1?: number;
            entity_id_2?: number;
            flags?: number;
        }): WhyEntitiesRequest {
            const message = new WhyEntitiesRequest({});
            if (data.entity_id_1 != null) {
                message.entity_id_1 = data.entity_id_1;
            }
            if (data.entity_id_2 != null) {
                message.entity_id_2 = data.entity_id_2;
            }
            if (data.flags != null) {
                message.flags = data.flags;
            }
            return message;
        }
        toObject() {
            const data: {
                entity_id_1?: number;
                entity_id_2?: number;
                flags?: number;
            } = {};
            if (this.entity_id_1 != null) {
                data.entity_id_1 = this.entity_id_1;
            }
            if (this.entity_id_2 != null) {
                data.entity_id_2 = this.entity_id_2;
            }
            if (this.flags != null) {
                data.flags = this.flags;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.entity_id_1 != 0)
                writer.writeInt64(1, this.entity_id_1);
            if (this.entity_id_2 != 0)
                writer.writeInt64(2, this.entity_id_2);
            if (this.flags != 0)
                writer.writeInt64(3, this.flags);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): WhyEntitiesRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new WhyEntitiesRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.entity_id_1 = reader.readInt64();
                        break;
                    case 2:
                        message.entity_id_2 = reader.readInt64();
                        break;
                    case 3:
                        message.flags = reader.readInt64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): WhyEntitiesRequest {
            return WhyEntitiesRequest.deserialize(bytes);
        }
    }
    export class WhyEntitiesResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            result?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("result" in data && data.result != undefined) {
                    this.result = data.result;
                }
            }
        }
        get result() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set result(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            result?: string;
        }): WhyEntitiesResponse {
            const message = new WhyEntitiesResponse({});
            if (data.result != null) {
                message.result = data.result;
            }
            return message;
        }
        toObject() {
            const data: {
                result?: string;
            } = {};
            if (this.result != null) {
                data.result = this.result;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.result.length)
                writer.writeString(1, this.result);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): WhyEntitiesResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new WhyEntitiesResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.result = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): WhyEntitiesResponse {
            return WhyEntitiesResponse.deserialize(bytes);
        }
    }
    export class WhyRecordInEntityRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            data_source_code?: string;
            record_id?: string;
            flags?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("data_source_code" in data && data.data_source_code != undefined) {
                    this.data_source_code = data.data_source_code;
                }
                if ("record_id" in data && data.record_id != undefined) {
                    this.record_id = data.record_id;
                }
                if ("flags" in data && data.flags != undefined) {
                    this.flags = data.flags;
                }
            }
        }
        get data_source_code() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set data_source_code(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get record_id() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set record_id(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get flags() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set flags(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            data_source_code?: string;
            record_id?: string;
            flags?: number;
        }): WhyRecordInEntityRequest {
            const message = new WhyRecordInEntityRequest({});
            if (data.data_source_code != null) {
                message.data_source_code = data.data_source_code;
            }
            if (data.record_id != null) {
                message.record_id = data.record_id;
            }
            if (data.flags != null) {
                message.flags = data.flags;
            }
            return message;
        }
        toObject() {
            const data: {
                data_source_code?: string;
                record_id?: string;
                flags?: number;
            } = {};
            if (this.data_source_code != null) {
                data.data_source_code = this.data_source_code;
            }
            if (this.record_id != null) {
                data.record_id = this.record_id;
            }
            if (this.flags != null) {
                data.flags = this.flags;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.data_source_code.length)
                writer.writeString(1, this.data_source_code);
            if (this.record_id.length)
                writer.writeString(2, this.record_id);
            if (this.flags != 0)
                writer.writeInt64(3, this.flags);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): WhyRecordInEntityRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new WhyRecordInEntityRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.data_source_code = reader.readString();
                        break;
                    case 2:
                        message.record_id = reader.readString();
                        break;
                    case 3:
                        message.flags = reader.readInt64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): WhyRecordInEntityRequest {
            return WhyRecordInEntityRequest.deserialize(bytes);
        }
    }
    export class WhyRecordInEntityResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            result?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("result" in data && data.result != undefined) {
                    this.result = data.result;
                }
            }
        }
        get result() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set result(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            result?: string;
        }): WhyRecordInEntityResponse {
            const message = new WhyRecordInEntityResponse({});
            if (data.result != null) {
                message.result = data.result;
            }
            return message;
        }
        toObject() {
            const data: {
                result?: string;
            } = {};
            if (this.result != null) {
                data.result = this.result;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.result.length)
                writer.writeString(1, this.result);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): WhyRecordInEntityResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new WhyRecordInEntityResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.result = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): WhyRecordInEntityResponse {
            return WhyRecordInEntityResponse.deserialize(bytes);
        }
    }
    export class WhyRecordsRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            data_source_code_1?: string;
            record_id_1?: string;
            data_source_code_2?: string;
            record_id_2?: string;
            flags?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("data_source_code_1" in data && data.data_source_code_1 != undefined) {
                    this.data_source_code_1 = data.data_source_code_1;
                }
                if ("record_id_1" in data && data.record_id_1 != undefined) {
                    this.record_id_1 = data.record_id_1;
                }
                if ("data_source_code_2" in data && data.data_source_code_2 != undefined) {
                    this.data_source_code_2 = data.data_source_code_2;
                }
                if ("record_id_2" in data && data.record_id_2 != undefined) {
                    this.record_id_2 = data.record_id_2;
                }
                if ("flags" in data && data.flags != undefined) {
                    this.flags = data.flags;
                }
            }
        }
        get data_source_code_1() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set data_source_code_1(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get record_id_1() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set record_id_1(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get data_source_code_2() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set data_source_code_2(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get record_id_2() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set record_id_2(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get flags() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
        }
        set flags(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        static fromObject(data: {
            data_source_code_1?: string;
            record_id_1?: string;
            data_source_code_2?: string;
            record_id_2?: string;
            flags?: number;
        }): WhyRecordsRequest {
            const message = new WhyRecordsRequest({});
            if (data.data_source_code_1 != null) {
                message.data_source_code_1 = data.data_source_code_1;
            }
            if (data.record_id_1 != null) {
                message.record_id_1 = data.record_id_1;
            }
            if (data.data_source_code_2 != null) {
                message.data_source_code_2 = data.data_source_code_2;
            }
            if (data.record_id_2 != null) {
                message.record_id_2 = data.record_id_2;
            }
            if (data.flags != null) {
                message.flags = data.flags;
            }
            return message;
        }
        toObject() {
            const data: {
                data_source_code_1?: string;
                record_id_1?: string;
                data_source_code_2?: string;
                record_id_2?: string;
                flags?: number;
            } = {};
            if (this.data_source_code_1 != null) {
                data.data_source_code_1 = this.data_source_code_1;
            }
            if (this.record_id_1 != null) {
                data.record_id_1 = this.record_id_1;
            }
            if (this.data_source_code_2 != null) {
                data.data_source_code_2 = this.data_source_code_2;
            }
            if (this.record_id_2 != null) {
                data.record_id_2 = this.record_id_2;
            }
            if (this.flags != null) {
                data.flags = this.flags;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.data_source_code_1.length)
                writer.writeString(1, this.data_source_code_1);
            if (this.record_id_1.length)
                writer.writeString(2, this.record_id_1);
            if (this.data_source_code_2.length)
                writer.writeString(3, this.data_source_code_2);
            if (this.record_id_2.length)
                writer.writeString(4, this.record_id_2);
            if (this.flags != 0)
                writer.writeInt64(5, this.flags);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): WhyRecordsRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new WhyRecordsRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.data_source_code_1 = reader.readString();
                        break;
                    case 2:
                        message.record_id_1 = reader.readString();
                        break;
                    case 3:
                        message.data_source_code_2 = reader.readString();
                        break;
                    case 4:
                        message.record_id_2 = reader.readString();
                        break;
                    case 5:
                        message.flags = reader.readInt64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): WhyRecordsRequest {
            return WhyRecordsRequest.deserialize(bytes);
        }
    }
    export class WhyRecordsResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            result?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("result" in data && data.result != undefined) {
                    this.result = data.result;
                }
            }
        }
        get result() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set result(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            result?: string;
        }): WhyRecordsResponse {
            const message = new WhyRecordsResponse({});
            if (data.result != null) {
                message.result = data.result;
            }
            return message;
        }
        toObject() {
            const data: {
                result?: string;
            } = {};
            if (this.result != null) {
                data.result = this.result;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.result.length)
                writer.writeString(1, this.result);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): WhyRecordsResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new WhyRecordsResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.result = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): WhyRecordsResponse {
            return WhyRecordsResponse.deserialize(bytes);
        }
    }
    export class WhySearchRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            attributes?: string;
            entity_id?: number;
            search_profile?: string;
            flags?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("attributes" in data && data.attributes != undefined) {
                    this.attributes = data.attributes;
                }
                if ("entity_id" in data && data.entity_id != undefined) {
                    this.entity_id = data.entity_id;
                }
                if ("search_profile" in data && data.search_profile != undefined) {
                    this.search_profile = data.search_profile;
                }
                if ("flags" in data && data.flags != undefined) {
                    this.flags = data.flags;
                }
            }
        }
        get attributes() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set attributes(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get entity_id() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set entity_id(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get search_profile() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set search_profile(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get flags() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set flags(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            attributes?: string;
            entity_id?: number;
            search_profile?: string;
            flags?: number;
        }): WhySearchRequest {
            const message = new WhySearchRequest({});
            if (data.attributes != null) {
                message.attributes = data.attributes;
            }
            if (data.entity_id != null) {
                message.entity_id = data.entity_id;
            }
            if (data.search_profile != null) {
                message.search_profile = data.search_profile;
            }
            if (data.flags != null) {
                message.flags = data.flags;
            }
            return message;
        }
        toObject() {
            const data: {
                attributes?: string;
                entity_id?: number;
                search_profile?: string;
                flags?: number;
            } = {};
            if (this.attributes != null) {
                data.attributes = this.attributes;
            }
            if (this.entity_id != null) {
                data.entity_id = this.entity_id;
            }
            if (this.search_profile != null) {
                data.search_profile = this.search_profile;
            }
            if (this.flags != null) {
                data.flags = this.flags;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.attributes.length)
                writer.writeString(1, this.attributes);
            if (this.entity_id != 0)
                writer.writeInt64(2, this.entity_id);
            if (this.search_profile.length)
                writer.writeString(3, this.search_profile);
            if (this.flags != 0)
                writer.writeInt64(4, this.flags);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): WhySearchRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new WhySearchRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.attributes = reader.readString();
                        break;
                    case 2:
                        message.entity_id = reader.readInt64();
                        break;
                    case 3:
                        message.search_profile = reader.readString();
                        break;
                    case 4:
                        message.flags = reader.readInt64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): WhySearchRequest {
            return WhySearchRequest.deserialize(bytes);
        }
    }
    export class WhySearchResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            result?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("result" in data && data.result != undefined) {
                    this.result = data.result;
                }
            }
        }
        get result() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set result(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            result?: string;
        }): WhySearchResponse {
            const message = new WhySearchResponse({});
            if (data.result != null) {
                message.result = data.result;
            }
            return message;
        }
        toObject() {
            const data: {
                result?: string;
            } = {};
            if (this.result != null) {
                data.result = this.result;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.result.length)
                writer.writeString(1, this.result);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): WhySearchResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new WhySearchResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.result = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): WhySearchResponse {
            return WhySearchResponse.deserialize(bytes);
        }
    }
    interface GrpcUnaryServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    }
    interface GrpcStreamServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
        (message: P, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
    }
    interface GrpWritableServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
    }
    interface GrpcChunkServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
        (options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
    }
    interface GrpcPromiseServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): Promise<R>;
        (message: P, options?: grpc_1.CallOptions): Promise<R>;
    }
    export abstract class UnimplementedSzEngineService {
        static definition = {
            AddRecord: {
                path: "/szengine.SzEngine/AddRecord",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: AddRecordRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => AddRecordRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: AddRecordResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => AddRecordResponse.deserialize(new Uint8Array(bytes))
            },
            CountRedoRecords: {
                path: "/szengine.SzEngine/CountRedoRecords",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: CountRedoRecordsRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => CountRedoRecordsRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: CountRedoRecordsResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => CountRedoRecordsResponse.deserialize(new Uint8Array(bytes))
            },
            DeleteRecord: {
                path: "/szengine.SzEngine/DeleteRecord",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: DeleteRecordRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => DeleteRecordRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: DeleteRecordResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => DeleteRecordResponse.deserialize(new Uint8Array(bytes))
            },
            FindInterestingEntitiesByEntityId: {
                path: "/szengine.SzEngine/FindInterestingEntitiesByEntityId",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: FindInterestingEntitiesByEntityIdRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => FindInterestingEntitiesByEntityIdRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: FindInterestingEntitiesByEntityIdResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => FindInterestingEntitiesByEntityIdResponse.deserialize(new Uint8Array(bytes))
            },
            FindInterestingEntitiesByRecordId: {
                path: "/szengine.SzEngine/FindInterestingEntitiesByRecordId",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: FindInterestingEntitiesByRecordIdRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => FindInterestingEntitiesByRecordIdRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: FindInterestingEntitiesByRecordIdResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => FindInterestingEntitiesByRecordIdResponse.deserialize(new Uint8Array(bytes))
            },
            FindNetworkByEntityId: {
                path: "/szengine.SzEngine/FindNetworkByEntityId",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: FindNetworkByEntityIdRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => FindNetworkByEntityIdRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: FindNetworkByEntityIdResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => FindNetworkByEntityIdResponse.deserialize(new Uint8Array(bytes))
            },
            FindNetworkByRecordId: {
                path: "/szengine.SzEngine/FindNetworkByRecordId",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: FindNetworkByRecordIdRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => FindNetworkByRecordIdRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: FindNetworkByRecordIdResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => FindNetworkByRecordIdResponse.deserialize(new Uint8Array(bytes))
            },
            FindPathByEntityId: {
                path: "/szengine.SzEngine/FindPathByEntityId",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: FindPathByEntityIdRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => FindPathByEntityIdRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: FindPathByEntityIdResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => FindPathByEntityIdResponse.deserialize(new Uint8Array(bytes))
            },
            FindPathByRecordId: {
                path: "/szengine.SzEngine/FindPathByRecordId",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: FindPathByRecordIdRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => FindPathByRecordIdRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: FindPathByRecordIdResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => FindPathByRecordIdResponse.deserialize(new Uint8Array(bytes))
            },
            GetActiveConfigId: {
                path: "/szengine.SzEngine/GetActiveConfigId",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: GetActiveConfigIdRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => GetActiveConfigIdRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: GetActiveConfigIdResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => GetActiveConfigIdResponse.deserialize(new Uint8Array(bytes))
            },
            GetEntityByEntityId: {
                path: "/szengine.SzEngine/GetEntityByEntityId",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: GetEntityByEntityIdRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => GetEntityByEntityIdRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: GetEntityByEntityIdResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => GetEntityByEntityIdResponse.deserialize(new Uint8Array(bytes))
            },
            GetEntityByRecordId: {
                path: "/szengine.SzEngine/GetEntityByRecordId",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: GetEntityByRecordIdRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => GetEntityByRecordIdRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: GetEntityByRecordIdResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => GetEntityByRecordIdResponse.deserialize(new Uint8Array(bytes))
            },
            GetRecord: {
                path: "/szengine.SzEngine/GetRecord",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: GetRecordRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => GetRecordRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: GetRecordResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => GetRecordResponse.deserialize(new Uint8Array(bytes))
            },
            GetRecordPreview: {
                path: "/szengine.SzEngine/GetRecordPreview",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: GetRecordPreviewRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => GetRecordPreviewRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: GetRecordPreviewResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => GetRecordPreviewResponse.deserialize(new Uint8Array(bytes))
            },
            GetRedoRecord: {
                path: "/szengine.SzEngine/GetRedoRecord",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: GetRedoRecordRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => GetRedoRecordRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: GetRedoRecordResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => GetRedoRecordResponse.deserialize(new Uint8Array(bytes))
            },
            GetStats: {
                path: "/szengine.SzEngine/GetStats",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: GetStatsRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => GetStatsRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: GetStatsResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => GetStatsResponse.deserialize(new Uint8Array(bytes))
            },
            GetVirtualEntityByRecordId: {
                path: "/szengine.SzEngine/GetVirtualEntityByRecordId",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: GetVirtualEntityByRecordIdRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => GetVirtualEntityByRecordIdRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: GetVirtualEntityByRecordIdResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => GetVirtualEntityByRecordIdResponse.deserialize(new Uint8Array(bytes))
            },
            HowEntityByEntityId: {
                path: "/szengine.SzEngine/HowEntityByEntityId",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: HowEntityByEntityIdRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => HowEntityByEntityIdRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: HowEntityByEntityIdResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => HowEntityByEntityIdResponse.deserialize(new Uint8Array(bytes))
            },
            PrimeEngine: {
                path: "/szengine.SzEngine/PrimeEngine",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: PrimeEngineRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => PrimeEngineRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: PrimeEngineResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => PrimeEngineResponse.deserialize(new Uint8Array(bytes))
            },
            ProcessRedoRecord: {
                path: "/szengine.SzEngine/ProcessRedoRecord",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: ProcessRedoRecordRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => ProcessRedoRecordRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: ProcessRedoRecordResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => ProcessRedoRecordResponse.deserialize(new Uint8Array(bytes))
            },
            ReevaluateEntity: {
                path: "/szengine.SzEngine/ReevaluateEntity",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: ReevaluateEntityRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => ReevaluateEntityRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: ReevaluateEntityResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => ReevaluateEntityResponse.deserialize(new Uint8Array(bytes))
            },
            ReevaluateRecord: {
                path: "/szengine.SzEngine/ReevaluateRecord",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: ReevaluateRecordRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => ReevaluateRecordRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: ReevaluateRecordResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => ReevaluateRecordResponse.deserialize(new Uint8Array(bytes))
            },
            Reinitialize: {
                path: "/szengine.SzEngine/Reinitialize",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: ReinitializeRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => ReinitializeRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: ReinitializeResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => ReinitializeResponse.deserialize(new Uint8Array(bytes))
            },
            SearchByAttributes: {
                path: "/szengine.SzEngine/SearchByAttributes",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: SearchByAttributesRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => SearchByAttributesRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: SearchByAttributesResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => SearchByAttributesResponse.deserialize(new Uint8Array(bytes))
            },
            StreamExportCsvEntityReport: {
                path: "/szengine.SzEngine/StreamExportCsvEntityReport",
                requestStream: false,
                responseStream: true,
                requestSerialize: (message: StreamExportCsvEntityReportRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => StreamExportCsvEntityReportRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: StreamExportCsvEntityReportResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => StreamExportCsvEntityReportResponse.deserialize(new Uint8Array(bytes))
            },
            StreamExportJsonEntityReport: {
                path: "/szengine.SzEngine/StreamExportJsonEntityReport",
                requestStream: false,
                responseStream: true,
                requestSerialize: (message: StreamExportJsonEntityReportRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => StreamExportJsonEntityReportRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: StreamExportJsonEntityReportResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => StreamExportJsonEntityReportResponse.deserialize(new Uint8Array(bytes))
            },
            WhyEntities: {
                path: "/szengine.SzEngine/WhyEntities",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: WhyEntitiesRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => WhyEntitiesRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: WhyEntitiesResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => WhyEntitiesResponse.deserialize(new Uint8Array(bytes))
            },
            WhyRecordInEntity: {
                path: "/szengine.SzEngine/WhyRecordInEntity",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: WhyRecordInEntityRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => WhyRecordInEntityRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: WhyRecordInEntityResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => WhyRecordInEntityResponse.deserialize(new Uint8Array(bytes))
            },
            WhyRecords: {
                path: "/szengine.SzEngine/WhyRecords",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: WhyRecordsRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => WhyRecordsRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: WhyRecordsResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => WhyRecordsResponse.deserialize(new Uint8Array(bytes))
            },
            WhySearch: {
                path: "/szengine.SzEngine/WhySearch",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: WhySearchRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => WhySearchRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: WhySearchResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => WhySearchResponse.deserialize(new Uint8Array(bytes))
            }
        };
        [method: string]: grpc_1.UntypedHandleCall;
        abstract AddRecord(call: grpc_1.ServerUnaryCall<AddRecordRequest, AddRecordResponse>, callback: grpc_1.sendUnaryData<AddRecordResponse>): void;
        abstract CountRedoRecords(call: grpc_1.ServerUnaryCall<CountRedoRecordsRequest, CountRedoRecordsResponse>, callback: grpc_1.sendUnaryData<CountRedoRecordsResponse>): void;
        abstract DeleteRecord(call: grpc_1.ServerUnaryCall<DeleteRecordRequest, DeleteRecordResponse>, callback: grpc_1.sendUnaryData<DeleteRecordResponse>): void;
        abstract FindInterestingEntitiesByEntityId(call: grpc_1.ServerUnaryCall<FindInterestingEntitiesByEntityIdRequest, FindInterestingEntitiesByEntityIdResponse>, callback: grpc_1.sendUnaryData<FindInterestingEntitiesByEntityIdResponse>): void;
        abstract FindInterestingEntitiesByRecordId(call: grpc_1.ServerUnaryCall<FindInterestingEntitiesByRecordIdRequest, FindInterestingEntitiesByRecordIdResponse>, callback: grpc_1.sendUnaryData<FindInterestingEntitiesByRecordIdResponse>): void;
        abstract FindNetworkByEntityId(call: grpc_1.ServerUnaryCall<FindNetworkByEntityIdRequest, FindNetworkByEntityIdResponse>, callback: grpc_1.sendUnaryData<FindNetworkByEntityIdResponse>): void;
        abstract FindNetworkByRecordId(call: grpc_1.ServerUnaryCall<FindNetworkByRecordIdRequest, FindNetworkByRecordIdResponse>, callback: grpc_1.sendUnaryData<FindNetworkByRecordIdResponse>): void;
        abstract FindPathByEntityId(call: grpc_1.ServerUnaryCall<FindPathByEntityIdRequest, FindPathByEntityIdResponse>, callback: grpc_1.sendUnaryData<FindPathByEntityIdResponse>): void;
        abstract FindPathByRecordId(call: grpc_1.ServerUnaryCall<FindPathByRecordIdRequest, FindPathByRecordIdResponse>, callback: grpc_1.sendUnaryData<FindPathByRecordIdResponse>): void;
        abstract GetActiveConfigId(call: grpc_1.ServerUnaryCall<GetActiveConfigIdRequest, GetActiveConfigIdResponse>, callback: grpc_1.sendUnaryData<GetActiveConfigIdResponse>): void;
        abstract GetEntityByEntityId(call: grpc_1.ServerUnaryCall<GetEntityByEntityIdRequest, GetEntityByEntityIdResponse>, callback: grpc_1.sendUnaryData<GetEntityByEntityIdResponse>): void;
        abstract GetEntityByRecordId(call: grpc_1.ServerUnaryCall<GetEntityByRecordIdRequest, GetEntityByRecordIdResponse>, callback: grpc_1.sendUnaryData<GetEntityByRecordIdResponse>): void;
        abstract GetRecord(call: grpc_1.ServerUnaryCall<GetRecordRequest, GetRecordResponse>, callback: grpc_1.sendUnaryData<GetRecordResponse>): void;
        abstract GetRecordPreview(call: grpc_1.ServerUnaryCall<GetRecordPreviewRequest, GetRecordPreviewResponse>, callback: grpc_1.sendUnaryData<GetRecordPreviewResponse>): void;
        abstract GetRedoRecord(call: grpc_1.ServerUnaryCall<GetRedoRecordRequest, GetRedoRecordResponse>, callback: grpc_1.sendUnaryData<GetRedoRecordResponse>): void;
        abstract GetStats(call: grpc_1.ServerUnaryCall<GetStatsRequest, GetStatsResponse>, callback: grpc_1.sendUnaryData<GetStatsResponse>): void;
        abstract GetVirtualEntityByRecordId(call: grpc_1.ServerUnaryCall<GetVirtualEntityByRecordIdRequest, GetVirtualEntityByRecordIdResponse>, callback: grpc_1.sendUnaryData<GetVirtualEntityByRecordIdResponse>): void;
        abstract HowEntityByEntityId(call: grpc_1.ServerUnaryCall<HowEntityByEntityIdRequest, HowEntityByEntityIdResponse>, callback: grpc_1.sendUnaryData<HowEntityByEntityIdResponse>): void;
        abstract PrimeEngine(call: grpc_1.ServerUnaryCall<PrimeEngineRequest, PrimeEngineResponse>, callback: grpc_1.sendUnaryData<PrimeEngineResponse>): void;
        abstract ProcessRedoRecord(call: grpc_1.ServerUnaryCall<ProcessRedoRecordRequest, ProcessRedoRecordResponse>, callback: grpc_1.sendUnaryData<ProcessRedoRecordResponse>): void;
        abstract ReevaluateEntity(call: grpc_1.ServerUnaryCall<ReevaluateEntityRequest, ReevaluateEntityResponse>, callback: grpc_1.sendUnaryData<ReevaluateEntityResponse>): void;
        abstract ReevaluateRecord(call: grpc_1.ServerUnaryCall<ReevaluateRecordRequest, ReevaluateRecordResponse>, callback: grpc_1.sendUnaryData<ReevaluateRecordResponse>): void;
        abstract Reinitialize(call: grpc_1.ServerUnaryCall<ReinitializeRequest, ReinitializeResponse>, callback: grpc_1.sendUnaryData<ReinitializeResponse>): void;
        abstract SearchByAttributes(call: grpc_1.ServerUnaryCall<SearchByAttributesRequest, SearchByAttributesResponse>, callback: grpc_1.sendUnaryData<SearchByAttributesResponse>): void;
        abstract StreamExportCsvEntityReport(call: grpc_1.ServerWritableStream<StreamExportCsvEntityReportRequest, StreamExportCsvEntityReportResponse>): void;
        abstract StreamExportJsonEntityReport(call: grpc_1.ServerWritableStream<StreamExportJsonEntityReportRequest, StreamExportJsonEntityReportResponse>): void;
        abstract WhyEntities(call: grpc_1.ServerUnaryCall<WhyEntitiesRequest, WhyEntitiesResponse>, callback: grpc_1.sendUnaryData<WhyEntitiesResponse>): void;
        abstract WhyRecordInEntity(call: grpc_1.ServerUnaryCall<WhyRecordInEntityRequest, WhyRecordInEntityResponse>, callback: grpc_1.sendUnaryData<WhyRecordInEntityResponse>): void;
        abstract WhyRecords(call: grpc_1.ServerUnaryCall<WhyRecordsRequest, WhyRecordsResponse>, callback: grpc_1.sendUnaryData<WhyRecordsResponse>): void;
        abstract WhySearch(call: grpc_1.ServerUnaryCall<WhySearchRequest, WhySearchResponse>, callback: grpc_1.sendUnaryData<WhySearchResponse>): void;
    }
    export class SzEngineClient extends grpc_1.makeGenericClientConstructor(UnimplementedSzEngineService.definition, "SzEngine", {}) {
        constructor(address: string, credentials: grpc_1.ChannelCredentials, options?: Partial<grpc_1.ChannelOptions>) {
            super(address, credentials, options);
        }
        AddRecord: GrpcUnaryServiceInterface<AddRecordRequest, AddRecordResponse> = (message: AddRecordRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<AddRecordResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<AddRecordResponse>, callback?: grpc_1.requestCallback<AddRecordResponse>): grpc_1.ClientUnaryCall => {
            return super.AddRecord(message, metadata, options, callback);
        };
        CountRedoRecords: GrpcUnaryServiceInterface<CountRedoRecordsRequest, CountRedoRecordsResponse> = (message: CountRedoRecordsRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<CountRedoRecordsResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<CountRedoRecordsResponse>, callback?: grpc_1.requestCallback<CountRedoRecordsResponse>): grpc_1.ClientUnaryCall => {
            return super.CountRedoRecords(message, metadata, options, callback);
        };
        DeleteRecord: GrpcUnaryServiceInterface<DeleteRecordRequest, DeleteRecordResponse> = (message: DeleteRecordRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<DeleteRecordResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<DeleteRecordResponse>, callback?: grpc_1.requestCallback<DeleteRecordResponse>): grpc_1.ClientUnaryCall => {
            return super.DeleteRecord(message, metadata, options, callback);
        };
        FindInterestingEntitiesByEntityId: GrpcUnaryServiceInterface<FindInterestingEntitiesByEntityIdRequest, FindInterestingEntitiesByEntityIdResponse> = (message: FindInterestingEntitiesByEntityIdRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<FindInterestingEntitiesByEntityIdResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<FindInterestingEntitiesByEntityIdResponse>, callback?: grpc_1.requestCallback<FindInterestingEntitiesByEntityIdResponse>): grpc_1.ClientUnaryCall => {
            return super.FindInterestingEntitiesByEntityId(message, metadata, options, callback);
        };
        FindInterestingEntitiesByRecordId: GrpcUnaryServiceInterface<FindInterestingEntitiesByRecordIdRequest, FindInterestingEntitiesByRecordIdResponse> = (message: FindInterestingEntitiesByRecordIdRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<FindInterestingEntitiesByRecordIdResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<FindInterestingEntitiesByRecordIdResponse>, callback?: grpc_1.requestCallback<FindInterestingEntitiesByRecordIdResponse>): grpc_1.ClientUnaryCall => {
            return super.FindInterestingEntitiesByRecordId(message, metadata, options, callback);
        };
        FindNetworkByEntityId: GrpcUnaryServiceInterface<FindNetworkByEntityIdRequest, FindNetworkByEntityIdResponse> = (message: FindNetworkByEntityIdRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<FindNetworkByEntityIdResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<FindNetworkByEntityIdResponse>, callback?: grpc_1.requestCallback<FindNetworkByEntityIdResponse>): grpc_1.ClientUnaryCall => {
            return super.FindNetworkByEntityId(message, metadata, options, callback);
        };
        FindNetworkByRecordId: GrpcUnaryServiceInterface<FindNetworkByRecordIdRequest, FindNetworkByRecordIdResponse> = (message: FindNetworkByRecordIdRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<FindNetworkByRecordIdResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<FindNetworkByRecordIdResponse>, callback?: grpc_1.requestCallback<FindNetworkByRecordIdResponse>): grpc_1.ClientUnaryCall => {
            return super.FindNetworkByRecordId(message, metadata, options, callback);
        };
        FindPathByEntityId: GrpcUnaryServiceInterface<FindPathByEntityIdRequest, FindPathByEntityIdResponse> = (message: FindPathByEntityIdRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<FindPathByEntityIdResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<FindPathByEntityIdResponse>, callback?: grpc_1.requestCallback<FindPathByEntityIdResponse>): grpc_1.ClientUnaryCall => {
            return super.FindPathByEntityId(message, metadata, options, callback);
        };
        FindPathByRecordId: GrpcUnaryServiceInterface<FindPathByRecordIdRequest, FindPathByRecordIdResponse> = (message: FindPathByRecordIdRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<FindPathByRecordIdResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<FindPathByRecordIdResponse>, callback?: grpc_1.requestCallback<FindPathByRecordIdResponse>): grpc_1.ClientUnaryCall => {
            return super.FindPathByRecordId(message, metadata, options, callback);
        };
        GetActiveConfigId: GrpcUnaryServiceInterface<GetActiveConfigIdRequest, GetActiveConfigIdResponse> = (message: GetActiveConfigIdRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<GetActiveConfigIdResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<GetActiveConfigIdResponse>, callback?: grpc_1.requestCallback<GetActiveConfigIdResponse>): grpc_1.ClientUnaryCall => {
            return super.GetActiveConfigId(message, metadata, options, callback);
        };
        GetEntityByEntityId: GrpcUnaryServiceInterface<GetEntityByEntityIdRequest, GetEntityByEntityIdResponse> = (message: GetEntityByEntityIdRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<GetEntityByEntityIdResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<GetEntityByEntityIdResponse>, callback?: grpc_1.requestCallback<GetEntityByEntityIdResponse>): grpc_1.ClientUnaryCall => {
            return super.GetEntityByEntityId(message, metadata, options, callback);
        };
        GetEntityByRecordId: GrpcUnaryServiceInterface<GetEntityByRecordIdRequest, GetEntityByRecordIdResponse> = (message: GetEntityByRecordIdRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<GetEntityByRecordIdResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<GetEntityByRecordIdResponse>, callback?: grpc_1.requestCallback<GetEntityByRecordIdResponse>): grpc_1.ClientUnaryCall => {
            return super.GetEntityByRecordId(message, metadata, options, callback);
        };
        GetRecord: GrpcUnaryServiceInterface<GetRecordRequest, GetRecordResponse> = (message: GetRecordRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<GetRecordResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<GetRecordResponse>, callback?: grpc_1.requestCallback<GetRecordResponse>): grpc_1.ClientUnaryCall => {
            return super.GetRecord(message, metadata, options, callback);
        };
        GetRecordPreview: GrpcUnaryServiceInterface<GetRecordPreviewRequest, GetRecordPreviewResponse> = (message: GetRecordPreviewRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<GetRecordPreviewResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<GetRecordPreviewResponse>, callback?: grpc_1.requestCallback<GetRecordPreviewResponse>): grpc_1.ClientUnaryCall => {
            return super.GetRecordPreview(message, metadata, options, callback);
        };
        GetRedoRecord: GrpcUnaryServiceInterface<GetRedoRecordRequest, GetRedoRecordResponse> = (message: GetRedoRecordRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<GetRedoRecordResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<GetRedoRecordResponse>, callback?: grpc_1.requestCallback<GetRedoRecordResponse>): grpc_1.ClientUnaryCall => {
            return super.GetRedoRecord(message, metadata, options, callback);
        };
        GetStats: GrpcUnaryServiceInterface<GetStatsRequest, GetStatsResponse> = (message: GetStatsRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<GetStatsResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<GetStatsResponse>, callback?: grpc_1.requestCallback<GetStatsResponse>): grpc_1.ClientUnaryCall => {
            return super.GetStats(message, metadata, options, callback);
        };
        GetVirtualEntityByRecordId: GrpcUnaryServiceInterface<GetVirtualEntityByRecordIdRequest, GetVirtualEntityByRecordIdResponse> = (message: GetVirtualEntityByRecordIdRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<GetVirtualEntityByRecordIdResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<GetVirtualEntityByRecordIdResponse>, callback?: grpc_1.requestCallback<GetVirtualEntityByRecordIdResponse>): grpc_1.ClientUnaryCall => {
            return super.GetVirtualEntityByRecordId(message, metadata, options, callback);
        };
        HowEntityByEntityId: GrpcUnaryServiceInterface<HowEntityByEntityIdRequest, HowEntityByEntityIdResponse> = (message: HowEntityByEntityIdRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<HowEntityByEntityIdResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<HowEntityByEntityIdResponse>, callback?: grpc_1.requestCallback<HowEntityByEntityIdResponse>): grpc_1.ClientUnaryCall => {
            return super.HowEntityByEntityId(message, metadata, options, callback);
        };
        PrimeEngine: GrpcUnaryServiceInterface<PrimeEngineRequest, PrimeEngineResponse> = (message: PrimeEngineRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<PrimeEngineResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<PrimeEngineResponse>, callback?: grpc_1.requestCallback<PrimeEngineResponse>): grpc_1.ClientUnaryCall => {
            return super.PrimeEngine(message, metadata, options, callback);
        };
        ProcessRedoRecord: GrpcUnaryServiceInterface<ProcessRedoRecordRequest, ProcessRedoRecordResponse> = (message: ProcessRedoRecordRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<ProcessRedoRecordResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<ProcessRedoRecordResponse>, callback?: grpc_1.requestCallback<ProcessRedoRecordResponse>): grpc_1.ClientUnaryCall => {
            return super.ProcessRedoRecord(message, metadata, options, callback);
        };
        ReevaluateEntity: GrpcUnaryServiceInterface<ReevaluateEntityRequest, ReevaluateEntityResponse> = (message: ReevaluateEntityRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<ReevaluateEntityResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<ReevaluateEntityResponse>, callback?: grpc_1.requestCallback<ReevaluateEntityResponse>): grpc_1.ClientUnaryCall => {
            return super.ReevaluateEntity(message, metadata, options, callback);
        };
        ReevaluateRecord: GrpcUnaryServiceInterface<ReevaluateRecordRequest, ReevaluateRecordResponse> = (message: ReevaluateRecordRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<ReevaluateRecordResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<ReevaluateRecordResponse>, callback?: grpc_1.requestCallback<ReevaluateRecordResponse>): grpc_1.ClientUnaryCall => {
            return super.ReevaluateRecord(message, metadata, options, callback);
        };
        Reinitialize: GrpcUnaryServiceInterface<ReinitializeRequest, ReinitializeResponse> = (message: ReinitializeRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<ReinitializeResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<ReinitializeResponse>, callback?: grpc_1.requestCallback<ReinitializeResponse>): grpc_1.ClientUnaryCall => {
            return super.Reinitialize(message, metadata, options, callback);
        };
        SearchByAttributes: GrpcUnaryServiceInterface<SearchByAttributesRequest, SearchByAttributesResponse> = (message: SearchByAttributesRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<SearchByAttributesResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<SearchByAttributesResponse>, callback?: grpc_1.requestCallback<SearchByAttributesResponse>): grpc_1.ClientUnaryCall => {
            return super.SearchByAttributes(message, metadata, options, callback);
        };
        StreamExportCsvEntityReport: GrpcStreamServiceInterface<StreamExportCsvEntityReportRequest, StreamExportCsvEntityReportResponse> = (message: StreamExportCsvEntityReportRequest, metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<StreamExportCsvEntityReportResponse> => {
            return super.StreamExportCsvEntityReport(message, metadata, options);
        };
        StreamExportJsonEntityReport: GrpcStreamServiceInterface<StreamExportJsonEntityReportRequest, StreamExportJsonEntityReportResponse> = (message: StreamExportJsonEntityReportRequest, metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<StreamExportJsonEntityReportResponse> => {
            return super.StreamExportJsonEntityReport(message, metadata, options);
        };
        WhyEntities: GrpcUnaryServiceInterface<WhyEntitiesRequest, WhyEntitiesResponse> = (message: WhyEntitiesRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<WhyEntitiesResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<WhyEntitiesResponse>, callback?: grpc_1.requestCallback<WhyEntitiesResponse>): grpc_1.ClientUnaryCall => {
            return super.WhyEntities(message, metadata, options, callback);
        };
        WhyRecordInEntity: GrpcUnaryServiceInterface<WhyRecordInEntityRequest, WhyRecordInEntityResponse> = (message: WhyRecordInEntityRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<WhyRecordInEntityResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<WhyRecordInEntityResponse>, callback?: grpc_1.requestCallback<WhyRecordInEntityResponse>): grpc_1.ClientUnaryCall => {
            return super.WhyRecordInEntity(message, metadata, options, callback);
        };
        WhyRecords: GrpcUnaryServiceInterface<WhyRecordsRequest, WhyRecordsResponse> = (message: WhyRecordsRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<WhyRecordsResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<WhyRecordsResponse>, callback?: grpc_1.requestCallback<WhyRecordsResponse>): grpc_1.ClientUnaryCall => {
            return super.WhyRecords(message, metadata, options, callback);
        };
        WhySearch: GrpcUnaryServiceInterface<WhySearchRequest, WhySearchResponse> = (message: WhySearchRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<WhySearchResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<WhySearchResponse>, callback?: grpc_1.requestCallback<WhySearchResponse>): grpc_1.ClientUnaryCall => {
            return super.WhySearch(message, metadata, options, callback);
        };
    }
}
