/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.19.1
 * source: szconfig.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
import * as grpc_1 from "@grpc/grpc-js";
export namespace szconfig {
    export class GetDataSourceRegistryRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            config_definition?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("config_definition" in data && data.config_definition != undefined) {
                    this.config_definition = data.config_definition;
                }
            }
        }
        get config_definition() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set config_definition(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            config_definition?: string;
        }): GetDataSourceRegistryRequest {
            const message = new GetDataSourceRegistryRequest({});
            if (data.config_definition != null) {
                message.config_definition = data.config_definition;
            }
            return message;
        }
        toObject() {
            const data: {
                config_definition?: string;
            } = {};
            if (this.config_definition != null) {
                data.config_definition = this.config_definition;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.config_definition.length)
                writer.writeString(1, this.config_definition);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetDataSourceRegistryRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetDataSourceRegistryRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.config_definition = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetDataSourceRegistryRequest {
            return GetDataSourceRegistryRequest.deserialize(bytes);
        }
    }
    export class GetDataSourceRegistryResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            result?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("result" in data && data.result != undefined) {
                    this.result = data.result;
                }
            }
        }
        get result() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set result(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            result?: string;
        }): GetDataSourceRegistryResponse {
            const message = new GetDataSourceRegistryResponse({});
            if (data.result != null) {
                message.result = data.result;
            }
            return message;
        }
        toObject() {
            const data: {
                result?: string;
            } = {};
            if (this.result != null) {
                data.result = this.result;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.result.length)
                writer.writeString(1, this.result);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetDataSourceRegistryResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetDataSourceRegistryResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.result = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetDataSourceRegistryResponse {
            return GetDataSourceRegistryResponse.deserialize(bytes);
        }
    }
    export class RegisterDataSourceRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            config_definition?: string;
            data_source_code?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("config_definition" in data && data.config_definition != undefined) {
                    this.config_definition = data.config_definition;
                }
                if ("data_source_code" in data && data.data_source_code != undefined) {
                    this.data_source_code = data.data_source_code;
                }
            }
        }
        get config_definition() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set config_definition(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get data_source_code() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set data_source_code(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            config_definition?: string;
            data_source_code?: string;
        }): RegisterDataSourceRequest {
            const message = new RegisterDataSourceRequest({});
            if (data.config_definition != null) {
                message.config_definition = data.config_definition;
            }
            if (data.data_source_code != null) {
                message.data_source_code = data.data_source_code;
            }
            return message;
        }
        toObject() {
            const data: {
                config_definition?: string;
                data_source_code?: string;
            } = {};
            if (this.config_definition != null) {
                data.config_definition = this.config_definition;
            }
            if (this.data_source_code != null) {
                data.data_source_code = this.data_source_code;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.config_definition.length)
                writer.writeString(1, this.config_definition);
            if (this.data_source_code.length)
                writer.writeString(2, this.data_source_code);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RegisterDataSourceRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new RegisterDataSourceRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.config_definition = reader.readString();
                        break;
                    case 2:
                        message.data_source_code = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): RegisterDataSourceRequest {
            return RegisterDataSourceRequest.deserialize(bytes);
        }
    }
    export class RegisterDataSourceResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            result?: string;
            config_definition?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("result" in data && data.result != undefined) {
                    this.result = data.result;
                }
                if ("config_definition" in data && data.config_definition != undefined) {
                    this.config_definition = data.config_definition;
                }
            }
        }
        get result() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set result(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get config_definition() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set config_definition(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            result?: string;
            config_definition?: string;
        }): RegisterDataSourceResponse {
            const message = new RegisterDataSourceResponse({});
            if (data.result != null) {
                message.result = data.result;
            }
            if (data.config_definition != null) {
                message.config_definition = data.config_definition;
            }
            return message;
        }
        toObject() {
            const data: {
                result?: string;
                config_definition?: string;
            } = {};
            if (this.result != null) {
                data.result = this.result;
            }
            if (this.config_definition != null) {
                data.config_definition = this.config_definition;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.result.length)
                writer.writeString(1, this.result);
            if (this.config_definition.length)
                writer.writeString(2, this.config_definition);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RegisterDataSourceResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new RegisterDataSourceResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.result = reader.readString();
                        break;
                    case 2:
                        message.config_definition = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): RegisterDataSourceResponse {
            return RegisterDataSourceResponse.deserialize(bytes);
        }
    }
    export class UnregisterDataSourceRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            config_definition?: string;
            data_source_code?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("config_definition" in data && data.config_definition != undefined) {
                    this.config_definition = data.config_definition;
                }
                if ("data_source_code" in data && data.data_source_code != undefined) {
                    this.data_source_code = data.data_source_code;
                }
            }
        }
        get config_definition() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set config_definition(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get data_source_code() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set data_source_code(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            config_definition?: string;
            data_source_code?: string;
        }): UnregisterDataSourceRequest {
            const message = new UnregisterDataSourceRequest({});
            if (data.config_definition != null) {
                message.config_definition = data.config_definition;
            }
            if (data.data_source_code != null) {
                message.data_source_code = data.data_source_code;
            }
            return message;
        }
        toObject() {
            const data: {
                config_definition?: string;
                data_source_code?: string;
            } = {};
            if (this.config_definition != null) {
                data.config_definition = this.config_definition;
            }
            if (this.data_source_code != null) {
                data.data_source_code = this.data_source_code;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.config_definition.length)
                writer.writeString(1, this.config_definition);
            if (this.data_source_code.length)
                writer.writeString(2, this.data_source_code);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UnregisterDataSourceRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UnregisterDataSourceRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.config_definition = reader.readString();
                        break;
                    case 2:
                        message.data_source_code = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): UnregisterDataSourceRequest {
            return UnregisterDataSourceRequest.deserialize(bytes);
        }
    }
    export class UnregisterDataSourceResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            result?: string;
            config_definition?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("result" in data && data.result != undefined) {
                    this.result = data.result;
                }
                if ("config_definition" in data && data.config_definition != undefined) {
                    this.config_definition = data.config_definition;
                }
            }
        }
        get result() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set result(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get config_definition() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set config_definition(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            result?: string;
            config_definition?: string;
        }): UnregisterDataSourceResponse {
            const message = new UnregisterDataSourceResponse({});
            if (data.result != null) {
                message.result = data.result;
            }
            if (data.config_definition != null) {
                message.config_definition = data.config_definition;
            }
            return message;
        }
        toObject() {
            const data: {
                result?: string;
                config_definition?: string;
            } = {};
            if (this.result != null) {
                data.result = this.result;
            }
            if (this.config_definition != null) {
                data.config_definition = this.config_definition;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.result.length)
                writer.writeString(1, this.result);
            if (this.config_definition.length)
                writer.writeString(2, this.config_definition);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UnregisterDataSourceResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UnregisterDataSourceResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.result = reader.readString();
                        break;
                    case 2:
                        message.config_definition = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): UnregisterDataSourceResponse {
            return UnregisterDataSourceResponse.deserialize(bytes);
        }
    }
    export class VerifyConfigRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            config_definition?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("config_definition" in data && data.config_definition != undefined) {
                    this.config_definition = data.config_definition;
                }
            }
        }
        get config_definition() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set config_definition(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            config_definition?: string;
        }): VerifyConfigRequest {
            const message = new VerifyConfigRequest({});
            if (data.config_definition != null) {
                message.config_definition = data.config_definition;
            }
            return message;
        }
        toObject() {
            const data: {
                config_definition?: string;
            } = {};
            if (this.config_definition != null) {
                data.config_definition = this.config_definition;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.config_definition.length)
                writer.writeString(1, this.config_definition);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): VerifyConfigRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new VerifyConfigRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.config_definition = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): VerifyConfigRequest {
            return VerifyConfigRequest.deserialize(bytes);
        }
    }
    export class VerifyConfigResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            result?: boolean;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("result" in data && data.result != undefined) {
                    this.result = data.result;
                }
            }
        }
        get result() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set result(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            result?: boolean;
        }): VerifyConfigResponse {
            const message = new VerifyConfigResponse({});
            if (data.result != null) {
                message.result = data.result;
            }
            return message;
        }
        toObject() {
            const data: {
                result?: boolean;
            } = {};
            if (this.result != null) {
                data.result = this.result;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.result != false)
                writer.writeBool(1, this.result);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): VerifyConfigResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new VerifyConfigResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.result = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): VerifyConfigResponse {
            return VerifyConfigResponse.deserialize(bytes);
        }
    }
    interface GrpcUnaryServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    }
    interface GrpcStreamServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
        (message: P, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
    }
    interface GrpWritableServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
    }
    interface GrpcChunkServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
        (options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
    }
    interface GrpcPromiseServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): Promise<R>;
        (message: P, options?: grpc_1.CallOptions): Promise<R>;
    }
    export abstract class UnimplementedSzConfigService {
        static definition = {
            GetDataSourceRegistry: {
                path: "/szconfig.SzConfig/GetDataSourceRegistry",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: GetDataSourceRegistryRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => GetDataSourceRegistryRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: GetDataSourceRegistryResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => GetDataSourceRegistryResponse.deserialize(new Uint8Array(bytes))
            },
            RegisterDataSource: {
                path: "/szconfig.SzConfig/RegisterDataSource",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: RegisterDataSourceRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => RegisterDataSourceRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: RegisterDataSourceResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => RegisterDataSourceResponse.deserialize(new Uint8Array(bytes))
            },
            UnregisterDataSource: {
                path: "/szconfig.SzConfig/UnregisterDataSource",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: UnregisterDataSourceRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => UnregisterDataSourceRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: UnregisterDataSourceResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => UnregisterDataSourceResponse.deserialize(new Uint8Array(bytes))
            },
            VerifyConfig: {
                path: "/szconfig.SzConfig/VerifyConfig",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: VerifyConfigRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => VerifyConfigRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: VerifyConfigResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => VerifyConfigResponse.deserialize(new Uint8Array(bytes))
            }
        };
        [method: string]: grpc_1.UntypedHandleCall;
        abstract GetDataSourceRegistry(call: grpc_1.ServerUnaryCall<GetDataSourceRegistryRequest, GetDataSourceRegistryResponse>, callback: grpc_1.sendUnaryData<GetDataSourceRegistryResponse>): void;
        abstract RegisterDataSource(call: grpc_1.ServerUnaryCall<RegisterDataSourceRequest, RegisterDataSourceResponse>, callback: grpc_1.sendUnaryData<RegisterDataSourceResponse>): void;
        abstract UnregisterDataSource(call: grpc_1.ServerUnaryCall<UnregisterDataSourceRequest, UnregisterDataSourceResponse>, callback: grpc_1.sendUnaryData<UnregisterDataSourceResponse>): void;
        abstract VerifyConfig(call: grpc_1.ServerUnaryCall<VerifyConfigRequest, VerifyConfigResponse>, callback: grpc_1.sendUnaryData<VerifyConfigResponse>): void;
    }
    export class SzConfigClient extends grpc_1.makeGenericClientConstructor(UnimplementedSzConfigService.definition, "SzConfig", {}) {
        constructor(address: string, credentials: grpc_1.ChannelCredentials, options?: Partial<grpc_1.ChannelOptions>) {
            super(address, credentials, options);
        }
        GetDataSourceRegistry: GrpcUnaryServiceInterface<GetDataSourceRegistryRequest, GetDataSourceRegistryResponse> = (message: GetDataSourceRegistryRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<GetDataSourceRegistryResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<GetDataSourceRegistryResponse>, callback?: grpc_1.requestCallback<GetDataSourceRegistryResponse>): grpc_1.ClientUnaryCall => {
            return super.GetDataSourceRegistry(message, metadata, options, callback);
        };
        RegisterDataSource: GrpcUnaryServiceInterface<RegisterDataSourceRequest, RegisterDataSourceResponse> = (message: RegisterDataSourceRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<RegisterDataSourceResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<RegisterDataSourceResponse>, callback?: grpc_1.requestCallback<RegisterDataSourceResponse>): grpc_1.ClientUnaryCall => {
            return super.RegisterDataSource(message, metadata, options, callback);
        };
        UnregisterDataSource: GrpcUnaryServiceInterface<UnregisterDataSourceRequest, UnregisterDataSourceResponse> = (message: UnregisterDataSourceRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<UnregisterDataSourceResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<UnregisterDataSourceResponse>, callback?: grpc_1.requestCallback<UnregisterDataSourceResponse>): grpc_1.ClientUnaryCall => {
            return super.UnregisterDataSource(message, metadata, options, callback);
        };
        VerifyConfig: GrpcUnaryServiceInterface<VerifyConfigRequest, VerifyConfigResponse> = (message: VerifyConfigRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<VerifyConfigResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<VerifyConfigResponse>, callback?: grpc_1.requestCallback<VerifyConfigResponse>): grpc_1.ClientUnaryCall => {
            return super.VerifyConfig(message, metadata, options, callback);
        };
    }
}
