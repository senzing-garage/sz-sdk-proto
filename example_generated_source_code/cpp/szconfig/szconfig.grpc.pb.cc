// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: szconfig.proto

#include "szconfig.pb.h"
#include "szconfig.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace szconfig {

static const char* SzConfig_method_names[] = {
  "/szconfig.SzConfig/RegisterDataSource",
  "/szconfig.SzConfig/UnregisterDataSource",
  "/szconfig.SzConfig/GetDataSourceRegistry",
  "/szconfig.SzConfig/VerifyConfig",
};

std::unique_ptr< SzConfig::Stub> SzConfig::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< SzConfig::Stub> stub(new SzConfig::Stub(channel, options));
  return stub;
}

SzConfig::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_RegisterDataSource_(SzConfig_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UnregisterDataSource_(SzConfig_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetDataSourceRegistry_(SzConfig_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_VerifyConfig_(SzConfig_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status SzConfig::Stub::RegisterDataSource(::grpc::ClientContext* context, const ::szconfig::RegisterDataSourceRequest& request, ::szconfig::RegisterDataSourceResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::szconfig::RegisterDataSourceRequest, ::szconfig::RegisterDataSourceResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_RegisterDataSource_, context, request, response);
}

void SzConfig::Stub::async::RegisterDataSource(::grpc::ClientContext* context, const ::szconfig::RegisterDataSourceRequest* request, ::szconfig::RegisterDataSourceResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::szconfig::RegisterDataSourceRequest, ::szconfig::RegisterDataSourceResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RegisterDataSource_, context, request, response, std::move(f));
}

void SzConfig::Stub::async::RegisterDataSource(::grpc::ClientContext* context, const ::szconfig::RegisterDataSourceRequest* request, ::szconfig::RegisterDataSourceResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RegisterDataSource_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::szconfig::RegisterDataSourceResponse>* SzConfig::Stub::PrepareAsyncRegisterDataSourceRaw(::grpc::ClientContext* context, const ::szconfig::RegisterDataSourceRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::szconfig::RegisterDataSourceResponse, ::szconfig::RegisterDataSourceRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_RegisterDataSource_, context, request);
}

::grpc::ClientAsyncResponseReader< ::szconfig::RegisterDataSourceResponse>* SzConfig::Stub::AsyncRegisterDataSourceRaw(::grpc::ClientContext* context, const ::szconfig::RegisterDataSourceRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncRegisterDataSourceRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status SzConfig::Stub::UnregisterDataSource(::grpc::ClientContext* context, const ::szconfig::UnregisterDataSourceRequest& request, ::szconfig::UnregisterDataSourceResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::szconfig::UnregisterDataSourceRequest, ::szconfig::UnregisterDataSourceResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_UnregisterDataSource_, context, request, response);
}

void SzConfig::Stub::async::UnregisterDataSource(::grpc::ClientContext* context, const ::szconfig::UnregisterDataSourceRequest* request, ::szconfig::UnregisterDataSourceResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::szconfig::UnregisterDataSourceRequest, ::szconfig::UnregisterDataSourceResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UnregisterDataSource_, context, request, response, std::move(f));
}

void SzConfig::Stub::async::UnregisterDataSource(::grpc::ClientContext* context, const ::szconfig::UnregisterDataSourceRequest* request, ::szconfig::UnregisterDataSourceResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UnregisterDataSource_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::szconfig::UnregisterDataSourceResponse>* SzConfig::Stub::PrepareAsyncUnregisterDataSourceRaw(::grpc::ClientContext* context, const ::szconfig::UnregisterDataSourceRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::szconfig::UnregisterDataSourceResponse, ::szconfig::UnregisterDataSourceRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_UnregisterDataSource_, context, request);
}

::grpc::ClientAsyncResponseReader< ::szconfig::UnregisterDataSourceResponse>* SzConfig::Stub::AsyncUnregisterDataSourceRaw(::grpc::ClientContext* context, const ::szconfig::UnregisterDataSourceRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncUnregisterDataSourceRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status SzConfig::Stub::GetDataSourceRegistry(::grpc::ClientContext* context, const ::szconfig::GetDataSourceRegistryRequest& request, ::szconfig::GetDataSourceRegistryResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::szconfig::GetDataSourceRegistryRequest, ::szconfig::GetDataSourceRegistryResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetDataSourceRegistry_, context, request, response);
}

void SzConfig::Stub::async::GetDataSourceRegistry(::grpc::ClientContext* context, const ::szconfig::GetDataSourceRegistryRequest* request, ::szconfig::GetDataSourceRegistryResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::szconfig::GetDataSourceRegistryRequest, ::szconfig::GetDataSourceRegistryResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetDataSourceRegistry_, context, request, response, std::move(f));
}

void SzConfig::Stub::async::GetDataSourceRegistry(::grpc::ClientContext* context, const ::szconfig::GetDataSourceRegistryRequest* request, ::szconfig::GetDataSourceRegistryResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetDataSourceRegistry_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::szconfig::GetDataSourceRegistryResponse>* SzConfig::Stub::PrepareAsyncGetDataSourceRegistryRaw(::grpc::ClientContext* context, const ::szconfig::GetDataSourceRegistryRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::szconfig::GetDataSourceRegistryResponse, ::szconfig::GetDataSourceRegistryRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetDataSourceRegistry_, context, request);
}

::grpc::ClientAsyncResponseReader< ::szconfig::GetDataSourceRegistryResponse>* SzConfig::Stub::AsyncGetDataSourceRegistryRaw(::grpc::ClientContext* context, const ::szconfig::GetDataSourceRegistryRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetDataSourceRegistryRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status SzConfig::Stub::VerifyConfig(::grpc::ClientContext* context, const ::szconfig::VerifyConfigRequest& request, ::szconfig::VerifyConfigResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::szconfig::VerifyConfigRequest, ::szconfig::VerifyConfigResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_VerifyConfig_, context, request, response);
}

void SzConfig::Stub::async::VerifyConfig(::grpc::ClientContext* context, const ::szconfig::VerifyConfigRequest* request, ::szconfig::VerifyConfigResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::szconfig::VerifyConfigRequest, ::szconfig::VerifyConfigResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_VerifyConfig_, context, request, response, std::move(f));
}

void SzConfig::Stub::async::VerifyConfig(::grpc::ClientContext* context, const ::szconfig::VerifyConfigRequest* request, ::szconfig::VerifyConfigResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_VerifyConfig_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::szconfig::VerifyConfigResponse>* SzConfig::Stub::PrepareAsyncVerifyConfigRaw(::grpc::ClientContext* context, const ::szconfig::VerifyConfigRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::szconfig::VerifyConfigResponse, ::szconfig::VerifyConfigRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_VerifyConfig_, context, request);
}

::grpc::ClientAsyncResponseReader< ::szconfig::VerifyConfigResponse>* SzConfig::Stub::AsyncVerifyConfigRaw(::grpc::ClientContext* context, const ::szconfig::VerifyConfigRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncVerifyConfigRaw(context, request, cq);
  result->StartCall();
  return result;
}

SzConfig::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SzConfig_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SzConfig::Service, ::szconfig::RegisterDataSourceRequest, ::szconfig::RegisterDataSourceResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](SzConfig::Service* service,
             ::grpc::ServerContext* ctx,
             const ::szconfig::RegisterDataSourceRequest* req,
             ::szconfig::RegisterDataSourceResponse* resp) {
               return service->RegisterDataSource(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SzConfig_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SzConfig::Service, ::szconfig::UnregisterDataSourceRequest, ::szconfig::UnregisterDataSourceResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](SzConfig::Service* service,
             ::grpc::ServerContext* ctx,
             const ::szconfig::UnregisterDataSourceRequest* req,
             ::szconfig::UnregisterDataSourceResponse* resp) {
               return service->UnregisterDataSource(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SzConfig_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SzConfig::Service, ::szconfig::GetDataSourceRegistryRequest, ::szconfig::GetDataSourceRegistryResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](SzConfig::Service* service,
             ::grpc::ServerContext* ctx,
             const ::szconfig::GetDataSourceRegistryRequest* req,
             ::szconfig::GetDataSourceRegistryResponse* resp) {
               return service->GetDataSourceRegistry(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SzConfig_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SzConfig::Service, ::szconfig::VerifyConfigRequest, ::szconfig::VerifyConfigResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](SzConfig::Service* service,
             ::grpc::ServerContext* ctx,
             const ::szconfig::VerifyConfigRequest* req,
             ::szconfig::VerifyConfigResponse* resp) {
               return service->VerifyConfig(ctx, req, resp);
             }, this)));
}

SzConfig::Service::~Service() {
}

::grpc::Status SzConfig::Service::RegisterDataSource(::grpc::ServerContext* context, const ::szconfig::RegisterDataSourceRequest* request, ::szconfig::RegisterDataSourceResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SzConfig::Service::UnregisterDataSource(::grpc::ServerContext* context, const ::szconfig::UnregisterDataSourceRequest* request, ::szconfig::UnregisterDataSourceResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SzConfig::Service::GetDataSourceRegistry(::grpc::ServerContext* context, const ::szconfig::GetDataSourceRegistryRequest* request, ::szconfig::GetDataSourceRegistryResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SzConfig::Service::VerifyConfig(::grpc::ServerContext* context, const ::szconfig::VerifyConfigRequest* request, ::szconfig::VerifyConfigResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace szconfig

