// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: szconfig.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_szconfig_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_szconfig_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_szconfig_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_szconfig_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_szconfig_2eproto;
namespace szconfig {
class AddDataSourceRequest;
struct AddDataSourceRequestDefaultTypeInternal;
extern AddDataSourceRequestDefaultTypeInternal _AddDataSourceRequest_default_instance_;
class AddDataSourceResponse;
struct AddDataSourceResponseDefaultTypeInternal;
extern AddDataSourceResponseDefaultTypeInternal _AddDataSourceResponse_default_instance_;
class DeleteDataSourceRequest;
struct DeleteDataSourceRequestDefaultTypeInternal;
extern DeleteDataSourceRequestDefaultTypeInternal _DeleteDataSourceRequest_default_instance_;
class DeleteDataSourceResponse;
struct DeleteDataSourceResponseDefaultTypeInternal;
extern DeleteDataSourceResponseDefaultTypeInternal _DeleteDataSourceResponse_default_instance_;
class GetDataSourcesRequest;
struct GetDataSourcesRequestDefaultTypeInternal;
extern GetDataSourcesRequestDefaultTypeInternal _GetDataSourcesRequest_default_instance_;
class GetDataSourcesResponse;
struct GetDataSourcesResponseDefaultTypeInternal;
extern GetDataSourcesResponseDefaultTypeInternal _GetDataSourcesResponse_default_instance_;
class VerifyConfigRequest;
struct VerifyConfigRequestDefaultTypeInternal;
extern VerifyConfigRequestDefaultTypeInternal _VerifyConfigRequest_default_instance_;
class VerifyConfigResponse;
struct VerifyConfigResponseDefaultTypeInternal;
extern VerifyConfigResponseDefaultTypeInternal _VerifyConfigResponse_default_instance_;
}  // namespace szconfig
PROTOBUF_NAMESPACE_OPEN
template<> ::szconfig::AddDataSourceRequest* Arena::CreateMaybeMessage<::szconfig::AddDataSourceRequest>(Arena*);
template<> ::szconfig::AddDataSourceResponse* Arena::CreateMaybeMessage<::szconfig::AddDataSourceResponse>(Arena*);
template<> ::szconfig::DeleteDataSourceRequest* Arena::CreateMaybeMessage<::szconfig::DeleteDataSourceRequest>(Arena*);
template<> ::szconfig::DeleteDataSourceResponse* Arena::CreateMaybeMessage<::szconfig::DeleteDataSourceResponse>(Arena*);
template<> ::szconfig::GetDataSourcesRequest* Arena::CreateMaybeMessage<::szconfig::GetDataSourcesRequest>(Arena*);
template<> ::szconfig::GetDataSourcesResponse* Arena::CreateMaybeMessage<::szconfig::GetDataSourcesResponse>(Arena*);
template<> ::szconfig::VerifyConfigRequest* Arena::CreateMaybeMessage<::szconfig::VerifyConfigRequest>(Arena*);
template<> ::szconfig::VerifyConfigResponse* Arena::CreateMaybeMessage<::szconfig::VerifyConfigResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace szconfig {

// ===================================================================

class AddDataSourceRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:szconfig.AddDataSourceRequest) */ {
 public:
  inline AddDataSourceRequest() : AddDataSourceRequest(nullptr) {}
  ~AddDataSourceRequest() override;
  explicit PROTOBUF_CONSTEXPR AddDataSourceRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AddDataSourceRequest(const AddDataSourceRequest& from);
  AddDataSourceRequest(AddDataSourceRequest&& from) noexcept
    : AddDataSourceRequest() {
    *this = ::std::move(from);
  }

  inline AddDataSourceRequest& operator=(const AddDataSourceRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddDataSourceRequest& operator=(AddDataSourceRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AddDataSourceRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const AddDataSourceRequest* internal_default_instance() {
    return reinterpret_cast<const AddDataSourceRequest*>(
               &_AddDataSourceRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(AddDataSourceRequest& a, AddDataSourceRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(AddDataSourceRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AddDataSourceRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AddDataSourceRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AddDataSourceRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AddDataSourceRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const AddDataSourceRequest& from) {
    AddDataSourceRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddDataSourceRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "szconfig.AddDataSourceRequest";
  }
  protected:
  explicit AddDataSourceRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConfigDefinitionFieldNumber = 1,
    kDataSourceCodeFieldNumber = 2,
  };
  // string config_definition = 1;
  void clear_config_definition();
  const std::string& config_definition() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_config_definition(ArgT0&& arg0, ArgT... args);
  std::string* mutable_config_definition();
  PROTOBUF_NODISCARD std::string* release_config_definition();
  void set_allocated_config_definition(std::string* config_definition);
  private:
  const std::string& _internal_config_definition() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_config_definition(const std::string& value);
  std::string* _internal_mutable_config_definition();
  public:

  // string data_source_code = 2;
  void clear_data_source_code();
  const std::string& data_source_code() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_data_source_code(ArgT0&& arg0, ArgT... args);
  std::string* mutable_data_source_code();
  PROTOBUF_NODISCARD std::string* release_data_source_code();
  void set_allocated_data_source_code(std::string* data_source_code);
  private:
  const std::string& _internal_data_source_code() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_data_source_code(const std::string& value);
  std::string* _internal_mutable_data_source_code();
  public:

  // @@protoc_insertion_point(class_scope:szconfig.AddDataSourceRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr config_definition_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_source_code_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_szconfig_2eproto;
};
// -------------------------------------------------------------------

class AddDataSourceResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:szconfig.AddDataSourceResponse) */ {
 public:
  inline AddDataSourceResponse() : AddDataSourceResponse(nullptr) {}
  ~AddDataSourceResponse() override;
  explicit PROTOBUF_CONSTEXPR AddDataSourceResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AddDataSourceResponse(const AddDataSourceResponse& from);
  AddDataSourceResponse(AddDataSourceResponse&& from) noexcept
    : AddDataSourceResponse() {
    *this = ::std::move(from);
  }

  inline AddDataSourceResponse& operator=(const AddDataSourceResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddDataSourceResponse& operator=(AddDataSourceResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AddDataSourceResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const AddDataSourceResponse* internal_default_instance() {
    return reinterpret_cast<const AddDataSourceResponse*>(
               &_AddDataSourceResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(AddDataSourceResponse& a, AddDataSourceResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(AddDataSourceResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AddDataSourceResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AddDataSourceResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AddDataSourceResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AddDataSourceResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const AddDataSourceResponse& from) {
    AddDataSourceResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddDataSourceResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "szconfig.AddDataSourceResponse";
  }
  protected:
  explicit AddDataSourceResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
    kConfigDefinitionFieldNumber = 2,
  };
  // string result = 1;
  void clear_result();
  const std::string& result() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_result(ArgT0&& arg0, ArgT... args);
  std::string* mutable_result();
  PROTOBUF_NODISCARD std::string* release_result();
  void set_allocated_result(std::string* result);
  private:
  const std::string& _internal_result() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_result(const std::string& value);
  std::string* _internal_mutable_result();
  public:

  // string config_definition = 2;
  void clear_config_definition();
  const std::string& config_definition() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_config_definition(ArgT0&& arg0, ArgT... args);
  std::string* mutable_config_definition();
  PROTOBUF_NODISCARD std::string* release_config_definition();
  void set_allocated_config_definition(std::string* config_definition);
  private:
  const std::string& _internal_config_definition() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_config_definition(const std::string& value);
  std::string* _internal_mutable_config_definition();
  public:

  // @@protoc_insertion_point(class_scope:szconfig.AddDataSourceResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr result_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr config_definition_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_szconfig_2eproto;
};
// -------------------------------------------------------------------

class DeleteDataSourceRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:szconfig.DeleteDataSourceRequest) */ {
 public:
  inline DeleteDataSourceRequest() : DeleteDataSourceRequest(nullptr) {}
  ~DeleteDataSourceRequest() override;
  explicit PROTOBUF_CONSTEXPR DeleteDataSourceRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeleteDataSourceRequest(const DeleteDataSourceRequest& from);
  DeleteDataSourceRequest(DeleteDataSourceRequest&& from) noexcept
    : DeleteDataSourceRequest() {
    *this = ::std::move(from);
  }

  inline DeleteDataSourceRequest& operator=(const DeleteDataSourceRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteDataSourceRequest& operator=(DeleteDataSourceRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeleteDataSourceRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeleteDataSourceRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteDataSourceRequest*>(
               &_DeleteDataSourceRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(DeleteDataSourceRequest& a, DeleteDataSourceRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteDataSourceRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteDataSourceRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DeleteDataSourceRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DeleteDataSourceRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DeleteDataSourceRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DeleteDataSourceRequest& from) {
    DeleteDataSourceRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteDataSourceRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "szconfig.DeleteDataSourceRequest";
  }
  protected:
  explicit DeleteDataSourceRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConfigDefinitionFieldNumber = 1,
    kDataSourceCodeFieldNumber = 2,
  };
  // string config_definition = 1;
  void clear_config_definition();
  const std::string& config_definition() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_config_definition(ArgT0&& arg0, ArgT... args);
  std::string* mutable_config_definition();
  PROTOBUF_NODISCARD std::string* release_config_definition();
  void set_allocated_config_definition(std::string* config_definition);
  private:
  const std::string& _internal_config_definition() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_config_definition(const std::string& value);
  std::string* _internal_mutable_config_definition();
  public:

  // string data_source_code = 2;
  void clear_data_source_code();
  const std::string& data_source_code() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_data_source_code(ArgT0&& arg0, ArgT... args);
  std::string* mutable_data_source_code();
  PROTOBUF_NODISCARD std::string* release_data_source_code();
  void set_allocated_data_source_code(std::string* data_source_code);
  private:
  const std::string& _internal_data_source_code() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_data_source_code(const std::string& value);
  std::string* _internal_mutable_data_source_code();
  public:

  // @@protoc_insertion_point(class_scope:szconfig.DeleteDataSourceRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr config_definition_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_source_code_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_szconfig_2eproto;
};
// -------------------------------------------------------------------

class DeleteDataSourceResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:szconfig.DeleteDataSourceResponse) */ {
 public:
  inline DeleteDataSourceResponse() : DeleteDataSourceResponse(nullptr) {}
  ~DeleteDataSourceResponse() override;
  explicit PROTOBUF_CONSTEXPR DeleteDataSourceResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeleteDataSourceResponse(const DeleteDataSourceResponse& from);
  DeleteDataSourceResponse(DeleteDataSourceResponse&& from) noexcept
    : DeleteDataSourceResponse() {
    *this = ::std::move(from);
  }

  inline DeleteDataSourceResponse& operator=(const DeleteDataSourceResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteDataSourceResponse& operator=(DeleteDataSourceResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeleteDataSourceResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeleteDataSourceResponse* internal_default_instance() {
    return reinterpret_cast<const DeleteDataSourceResponse*>(
               &_DeleteDataSourceResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(DeleteDataSourceResponse& a, DeleteDataSourceResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteDataSourceResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteDataSourceResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DeleteDataSourceResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DeleteDataSourceResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DeleteDataSourceResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DeleteDataSourceResponse& from) {
    DeleteDataSourceResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteDataSourceResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "szconfig.DeleteDataSourceResponse";
  }
  protected:
  explicit DeleteDataSourceResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
    kConfigDefinitionFieldNumber = 2,
  };
  // string result = 1;
  void clear_result();
  const std::string& result() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_result(ArgT0&& arg0, ArgT... args);
  std::string* mutable_result();
  PROTOBUF_NODISCARD std::string* release_result();
  void set_allocated_result(std::string* result);
  private:
  const std::string& _internal_result() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_result(const std::string& value);
  std::string* _internal_mutable_result();
  public:

  // string config_definition = 2;
  void clear_config_definition();
  const std::string& config_definition() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_config_definition(ArgT0&& arg0, ArgT... args);
  std::string* mutable_config_definition();
  PROTOBUF_NODISCARD std::string* release_config_definition();
  void set_allocated_config_definition(std::string* config_definition);
  private:
  const std::string& _internal_config_definition() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_config_definition(const std::string& value);
  std::string* _internal_mutable_config_definition();
  public:

  // @@protoc_insertion_point(class_scope:szconfig.DeleteDataSourceResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr result_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr config_definition_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_szconfig_2eproto;
};
// -------------------------------------------------------------------

class GetDataSourcesRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:szconfig.GetDataSourcesRequest) */ {
 public:
  inline GetDataSourcesRequest() : GetDataSourcesRequest(nullptr) {}
  ~GetDataSourcesRequest() override;
  explicit PROTOBUF_CONSTEXPR GetDataSourcesRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetDataSourcesRequest(const GetDataSourcesRequest& from);
  GetDataSourcesRequest(GetDataSourcesRequest&& from) noexcept
    : GetDataSourcesRequest() {
    *this = ::std::move(from);
  }

  inline GetDataSourcesRequest& operator=(const GetDataSourcesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetDataSourcesRequest& operator=(GetDataSourcesRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetDataSourcesRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetDataSourcesRequest* internal_default_instance() {
    return reinterpret_cast<const GetDataSourcesRequest*>(
               &_GetDataSourcesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(GetDataSourcesRequest& a, GetDataSourcesRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetDataSourcesRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetDataSourcesRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetDataSourcesRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetDataSourcesRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetDataSourcesRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetDataSourcesRequest& from) {
    GetDataSourcesRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetDataSourcesRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "szconfig.GetDataSourcesRequest";
  }
  protected:
  explicit GetDataSourcesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConfigDefinitionFieldNumber = 1,
  };
  // string config_definition = 1;
  void clear_config_definition();
  const std::string& config_definition() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_config_definition(ArgT0&& arg0, ArgT... args);
  std::string* mutable_config_definition();
  PROTOBUF_NODISCARD std::string* release_config_definition();
  void set_allocated_config_definition(std::string* config_definition);
  private:
  const std::string& _internal_config_definition() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_config_definition(const std::string& value);
  std::string* _internal_mutable_config_definition();
  public:

  // @@protoc_insertion_point(class_scope:szconfig.GetDataSourcesRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr config_definition_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_szconfig_2eproto;
};
// -------------------------------------------------------------------

class GetDataSourcesResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:szconfig.GetDataSourcesResponse) */ {
 public:
  inline GetDataSourcesResponse() : GetDataSourcesResponse(nullptr) {}
  ~GetDataSourcesResponse() override;
  explicit PROTOBUF_CONSTEXPR GetDataSourcesResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetDataSourcesResponse(const GetDataSourcesResponse& from);
  GetDataSourcesResponse(GetDataSourcesResponse&& from) noexcept
    : GetDataSourcesResponse() {
    *this = ::std::move(from);
  }

  inline GetDataSourcesResponse& operator=(const GetDataSourcesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetDataSourcesResponse& operator=(GetDataSourcesResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetDataSourcesResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetDataSourcesResponse* internal_default_instance() {
    return reinterpret_cast<const GetDataSourcesResponse*>(
               &_GetDataSourcesResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(GetDataSourcesResponse& a, GetDataSourcesResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetDataSourcesResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetDataSourcesResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetDataSourcesResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetDataSourcesResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetDataSourcesResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetDataSourcesResponse& from) {
    GetDataSourcesResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetDataSourcesResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "szconfig.GetDataSourcesResponse";
  }
  protected:
  explicit GetDataSourcesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
  };
  // string result = 1;
  void clear_result();
  const std::string& result() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_result(ArgT0&& arg0, ArgT... args);
  std::string* mutable_result();
  PROTOBUF_NODISCARD std::string* release_result();
  void set_allocated_result(std::string* result);
  private:
  const std::string& _internal_result() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_result(const std::string& value);
  std::string* _internal_mutable_result();
  public:

  // @@protoc_insertion_point(class_scope:szconfig.GetDataSourcesResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr result_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_szconfig_2eproto;
};
// -------------------------------------------------------------------

class VerifyConfigRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:szconfig.VerifyConfigRequest) */ {
 public:
  inline VerifyConfigRequest() : VerifyConfigRequest(nullptr) {}
  ~VerifyConfigRequest() override;
  explicit PROTOBUF_CONSTEXPR VerifyConfigRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  VerifyConfigRequest(const VerifyConfigRequest& from);
  VerifyConfigRequest(VerifyConfigRequest&& from) noexcept
    : VerifyConfigRequest() {
    *this = ::std::move(from);
  }

  inline VerifyConfigRequest& operator=(const VerifyConfigRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline VerifyConfigRequest& operator=(VerifyConfigRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const VerifyConfigRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const VerifyConfigRequest* internal_default_instance() {
    return reinterpret_cast<const VerifyConfigRequest*>(
               &_VerifyConfigRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(VerifyConfigRequest& a, VerifyConfigRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(VerifyConfigRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VerifyConfigRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  VerifyConfigRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<VerifyConfigRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const VerifyConfigRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const VerifyConfigRequest& from) {
    VerifyConfigRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VerifyConfigRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "szconfig.VerifyConfigRequest";
  }
  protected:
  explicit VerifyConfigRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConfigDefinitionFieldNumber = 1,
  };
  // string config_definition = 1;
  void clear_config_definition();
  const std::string& config_definition() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_config_definition(ArgT0&& arg0, ArgT... args);
  std::string* mutable_config_definition();
  PROTOBUF_NODISCARD std::string* release_config_definition();
  void set_allocated_config_definition(std::string* config_definition);
  private:
  const std::string& _internal_config_definition() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_config_definition(const std::string& value);
  std::string* _internal_mutable_config_definition();
  public:

  // @@protoc_insertion_point(class_scope:szconfig.VerifyConfigRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr config_definition_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_szconfig_2eproto;
};
// -------------------------------------------------------------------

class VerifyConfigResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:szconfig.VerifyConfigResponse) */ {
 public:
  inline VerifyConfigResponse() : VerifyConfigResponse(nullptr) {}
  ~VerifyConfigResponse() override;
  explicit PROTOBUF_CONSTEXPR VerifyConfigResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  VerifyConfigResponse(const VerifyConfigResponse& from);
  VerifyConfigResponse(VerifyConfigResponse&& from) noexcept
    : VerifyConfigResponse() {
    *this = ::std::move(from);
  }

  inline VerifyConfigResponse& operator=(const VerifyConfigResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline VerifyConfigResponse& operator=(VerifyConfigResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const VerifyConfigResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const VerifyConfigResponse* internal_default_instance() {
    return reinterpret_cast<const VerifyConfigResponse*>(
               &_VerifyConfigResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(VerifyConfigResponse& a, VerifyConfigResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(VerifyConfigResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VerifyConfigResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  VerifyConfigResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<VerifyConfigResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const VerifyConfigResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const VerifyConfigResponse& from) {
    VerifyConfigResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VerifyConfigResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "szconfig.VerifyConfigResponse";
  }
  protected:
  explicit VerifyConfigResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
  };
  // bool result = 1;
  void clear_result();
  bool result() const;
  void set_result(bool value);
  private:
  bool _internal_result() const;
  void _internal_set_result(bool value);
  public:

  // @@protoc_insertion_point(class_scope:szconfig.VerifyConfigResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    bool result_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_szconfig_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// AddDataSourceRequest

// string config_definition = 1;
inline void AddDataSourceRequest::clear_config_definition() {
  _impl_.config_definition_.ClearToEmpty();
}
inline const std::string& AddDataSourceRequest::config_definition() const {
  // @@protoc_insertion_point(field_get:szconfig.AddDataSourceRequest.config_definition)
  return _internal_config_definition();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AddDataSourceRequest::set_config_definition(ArgT0&& arg0, ArgT... args) {
 
 _impl_.config_definition_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:szconfig.AddDataSourceRequest.config_definition)
}
inline std::string* AddDataSourceRequest::mutable_config_definition() {
  std::string* _s = _internal_mutable_config_definition();
  // @@protoc_insertion_point(field_mutable:szconfig.AddDataSourceRequest.config_definition)
  return _s;
}
inline const std::string& AddDataSourceRequest::_internal_config_definition() const {
  return _impl_.config_definition_.Get();
}
inline void AddDataSourceRequest::_internal_set_config_definition(const std::string& value) {
  
  _impl_.config_definition_.Set(value, GetArenaForAllocation());
}
inline std::string* AddDataSourceRequest::_internal_mutable_config_definition() {
  
  return _impl_.config_definition_.Mutable(GetArenaForAllocation());
}
inline std::string* AddDataSourceRequest::release_config_definition() {
  // @@protoc_insertion_point(field_release:szconfig.AddDataSourceRequest.config_definition)
  return _impl_.config_definition_.Release();
}
inline void AddDataSourceRequest::set_allocated_config_definition(std::string* config_definition) {
  if (config_definition != nullptr) {
    
  } else {
    
  }
  _impl_.config_definition_.SetAllocated(config_definition, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.config_definition_.IsDefault()) {
    _impl_.config_definition_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:szconfig.AddDataSourceRequest.config_definition)
}

// string data_source_code = 2;
inline void AddDataSourceRequest::clear_data_source_code() {
  _impl_.data_source_code_.ClearToEmpty();
}
inline const std::string& AddDataSourceRequest::data_source_code() const {
  // @@protoc_insertion_point(field_get:szconfig.AddDataSourceRequest.data_source_code)
  return _internal_data_source_code();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AddDataSourceRequest::set_data_source_code(ArgT0&& arg0, ArgT... args) {
 
 _impl_.data_source_code_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:szconfig.AddDataSourceRequest.data_source_code)
}
inline std::string* AddDataSourceRequest::mutable_data_source_code() {
  std::string* _s = _internal_mutable_data_source_code();
  // @@protoc_insertion_point(field_mutable:szconfig.AddDataSourceRequest.data_source_code)
  return _s;
}
inline const std::string& AddDataSourceRequest::_internal_data_source_code() const {
  return _impl_.data_source_code_.Get();
}
inline void AddDataSourceRequest::_internal_set_data_source_code(const std::string& value) {
  
  _impl_.data_source_code_.Set(value, GetArenaForAllocation());
}
inline std::string* AddDataSourceRequest::_internal_mutable_data_source_code() {
  
  return _impl_.data_source_code_.Mutable(GetArenaForAllocation());
}
inline std::string* AddDataSourceRequest::release_data_source_code() {
  // @@protoc_insertion_point(field_release:szconfig.AddDataSourceRequest.data_source_code)
  return _impl_.data_source_code_.Release();
}
inline void AddDataSourceRequest::set_allocated_data_source_code(std::string* data_source_code) {
  if (data_source_code != nullptr) {
    
  } else {
    
  }
  _impl_.data_source_code_.SetAllocated(data_source_code, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.data_source_code_.IsDefault()) {
    _impl_.data_source_code_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:szconfig.AddDataSourceRequest.data_source_code)
}

// -------------------------------------------------------------------

// AddDataSourceResponse

// string result = 1;
inline void AddDataSourceResponse::clear_result() {
  _impl_.result_.ClearToEmpty();
}
inline const std::string& AddDataSourceResponse::result() const {
  // @@protoc_insertion_point(field_get:szconfig.AddDataSourceResponse.result)
  return _internal_result();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AddDataSourceResponse::set_result(ArgT0&& arg0, ArgT... args) {
 
 _impl_.result_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:szconfig.AddDataSourceResponse.result)
}
inline std::string* AddDataSourceResponse::mutable_result() {
  std::string* _s = _internal_mutable_result();
  // @@protoc_insertion_point(field_mutable:szconfig.AddDataSourceResponse.result)
  return _s;
}
inline const std::string& AddDataSourceResponse::_internal_result() const {
  return _impl_.result_.Get();
}
inline void AddDataSourceResponse::_internal_set_result(const std::string& value) {
  
  _impl_.result_.Set(value, GetArenaForAllocation());
}
inline std::string* AddDataSourceResponse::_internal_mutable_result() {
  
  return _impl_.result_.Mutable(GetArenaForAllocation());
}
inline std::string* AddDataSourceResponse::release_result() {
  // @@protoc_insertion_point(field_release:szconfig.AddDataSourceResponse.result)
  return _impl_.result_.Release();
}
inline void AddDataSourceResponse::set_allocated_result(std::string* result) {
  if (result != nullptr) {
    
  } else {
    
  }
  _impl_.result_.SetAllocated(result, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.result_.IsDefault()) {
    _impl_.result_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:szconfig.AddDataSourceResponse.result)
}

// string config_definition = 2;
inline void AddDataSourceResponse::clear_config_definition() {
  _impl_.config_definition_.ClearToEmpty();
}
inline const std::string& AddDataSourceResponse::config_definition() const {
  // @@protoc_insertion_point(field_get:szconfig.AddDataSourceResponse.config_definition)
  return _internal_config_definition();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AddDataSourceResponse::set_config_definition(ArgT0&& arg0, ArgT... args) {
 
 _impl_.config_definition_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:szconfig.AddDataSourceResponse.config_definition)
}
inline std::string* AddDataSourceResponse::mutable_config_definition() {
  std::string* _s = _internal_mutable_config_definition();
  // @@protoc_insertion_point(field_mutable:szconfig.AddDataSourceResponse.config_definition)
  return _s;
}
inline const std::string& AddDataSourceResponse::_internal_config_definition() const {
  return _impl_.config_definition_.Get();
}
inline void AddDataSourceResponse::_internal_set_config_definition(const std::string& value) {
  
  _impl_.config_definition_.Set(value, GetArenaForAllocation());
}
inline std::string* AddDataSourceResponse::_internal_mutable_config_definition() {
  
  return _impl_.config_definition_.Mutable(GetArenaForAllocation());
}
inline std::string* AddDataSourceResponse::release_config_definition() {
  // @@protoc_insertion_point(field_release:szconfig.AddDataSourceResponse.config_definition)
  return _impl_.config_definition_.Release();
}
inline void AddDataSourceResponse::set_allocated_config_definition(std::string* config_definition) {
  if (config_definition != nullptr) {
    
  } else {
    
  }
  _impl_.config_definition_.SetAllocated(config_definition, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.config_definition_.IsDefault()) {
    _impl_.config_definition_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:szconfig.AddDataSourceResponse.config_definition)
}

// -------------------------------------------------------------------

// DeleteDataSourceRequest

// string config_definition = 1;
inline void DeleteDataSourceRequest::clear_config_definition() {
  _impl_.config_definition_.ClearToEmpty();
}
inline const std::string& DeleteDataSourceRequest::config_definition() const {
  // @@protoc_insertion_point(field_get:szconfig.DeleteDataSourceRequest.config_definition)
  return _internal_config_definition();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DeleteDataSourceRequest::set_config_definition(ArgT0&& arg0, ArgT... args) {
 
 _impl_.config_definition_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:szconfig.DeleteDataSourceRequest.config_definition)
}
inline std::string* DeleteDataSourceRequest::mutable_config_definition() {
  std::string* _s = _internal_mutable_config_definition();
  // @@protoc_insertion_point(field_mutable:szconfig.DeleteDataSourceRequest.config_definition)
  return _s;
}
inline const std::string& DeleteDataSourceRequest::_internal_config_definition() const {
  return _impl_.config_definition_.Get();
}
inline void DeleteDataSourceRequest::_internal_set_config_definition(const std::string& value) {
  
  _impl_.config_definition_.Set(value, GetArenaForAllocation());
}
inline std::string* DeleteDataSourceRequest::_internal_mutable_config_definition() {
  
  return _impl_.config_definition_.Mutable(GetArenaForAllocation());
}
inline std::string* DeleteDataSourceRequest::release_config_definition() {
  // @@protoc_insertion_point(field_release:szconfig.DeleteDataSourceRequest.config_definition)
  return _impl_.config_definition_.Release();
}
inline void DeleteDataSourceRequest::set_allocated_config_definition(std::string* config_definition) {
  if (config_definition != nullptr) {
    
  } else {
    
  }
  _impl_.config_definition_.SetAllocated(config_definition, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.config_definition_.IsDefault()) {
    _impl_.config_definition_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:szconfig.DeleteDataSourceRequest.config_definition)
}

// string data_source_code = 2;
inline void DeleteDataSourceRequest::clear_data_source_code() {
  _impl_.data_source_code_.ClearToEmpty();
}
inline const std::string& DeleteDataSourceRequest::data_source_code() const {
  // @@protoc_insertion_point(field_get:szconfig.DeleteDataSourceRequest.data_source_code)
  return _internal_data_source_code();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DeleteDataSourceRequest::set_data_source_code(ArgT0&& arg0, ArgT... args) {
 
 _impl_.data_source_code_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:szconfig.DeleteDataSourceRequest.data_source_code)
}
inline std::string* DeleteDataSourceRequest::mutable_data_source_code() {
  std::string* _s = _internal_mutable_data_source_code();
  // @@protoc_insertion_point(field_mutable:szconfig.DeleteDataSourceRequest.data_source_code)
  return _s;
}
inline const std::string& DeleteDataSourceRequest::_internal_data_source_code() const {
  return _impl_.data_source_code_.Get();
}
inline void DeleteDataSourceRequest::_internal_set_data_source_code(const std::string& value) {
  
  _impl_.data_source_code_.Set(value, GetArenaForAllocation());
}
inline std::string* DeleteDataSourceRequest::_internal_mutable_data_source_code() {
  
  return _impl_.data_source_code_.Mutable(GetArenaForAllocation());
}
inline std::string* DeleteDataSourceRequest::release_data_source_code() {
  // @@protoc_insertion_point(field_release:szconfig.DeleteDataSourceRequest.data_source_code)
  return _impl_.data_source_code_.Release();
}
inline void DeleteDataSourceRequest::set_allocated_data_source_code(std::string* data_source_code) {
  if (data_source_code != nullptr) {
    
  } else {
    
  }
  _impl_.data_source_code_.SetAllocated(data_source_code, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.data_source_code_.IsDefault()) {
    _impl_.data_source_code_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:szconfig.DeleteDataSourceRequest.data_source_code)
}

// -------------------------------------------------------------------

// DeleteDataSourceResponse

// string result = 1;
inline void DeleteDataSourceResponse::clear_result() {
  _impl_.result_.ClearToEmpty();
}
inline const std::string& DeleteDataSourceResponse::result() const {
  // @@protoc_insertion_point(field_get:szconfig.DeleteDataSourceResponse.result)
  return _internal_result();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DeleteDataSourceResponse::set_result(ArgT0&& arg0, ArgT... args) {
 
 _impl_.result_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:szconfig.DeleteDataSourceResponse.result)
}
inline std::string* DeleteDataSourceResponse::mutable_result() {
  std::string* _s = _internal_mutable_result();
  // @@protoc_insertion_point(field_mutable:szconfig.DeleteDataSourceResponse.result)
  return _s;
}
inline const std::string& DeleteDataSourceResponse::_internal_result() const {
  return _impl_.result_.Get();
}
inline void DeleteDataSourceResponse::_internal_set_result(const std::string& value) {
  
  _impl_.result_.Set(value, GetArenaForAllocation());
}
inline std::string* DeleteDataSourceResponse::_internal_mutable_result() {
  
  return _impl_.result_.Mutable(GetArenaForAllocation());
}
inline std::string* DeleteDataSourceResponse::release_result() {
  // @@protoc_insertion_point(field_release:szconfig.DeleteDataSourceResponse.result)
  return _impl_.result_.Release();
}
inline void DeleteDataSourceResponse::set_allocated_result(std::string* result) {
  if (result != nullptr) {
    
  } else {
    
  }
  _impl_.result_.SetAllocated(result, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.result_.IsDefault()) {
    _impl_.result_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:szconfig.DeleteDataSourceResponse.result)
}

// string config_definition = 2;
inline void DeleteDataSourceResponse::clear_config_definition() {
  _impl_.config_definition_.ClearToEmpty();
}
inline const std::string& DeleteDataSourceResponse::config_definition() const {
  // @@protoc_insertion_point(field_get:szconfig.DeleteDataSourceResponse.config_definition)
  return _internal_config_definition();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DeleteDataSourceResponse::set_config_definition(ArgT0&& arg0, ArgT... args) {
 
 _impl_.config_definition_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:szconfig.DeleteDataSourceResponse.config_definition)
}
inline std::string* DeleteDataSourceResponse::mutable_config_definition() {
  std::string* _s = _internal_mutable_config_definition();
  // @@protoc_insertion_point(field_mutable:szconfig.DeleteDataSourceResponse.config_definition)
  return _s;
}
inline const std::string& DeleteDataSourceResponse::_internal_config_definition() const {
  return _impl_.config_definition_.Get();
}
inline void DeleteDataSourceResponse::_internal_set_config_definition(const std::string& value) {
  
  _impl_.config_definition_.Set(value, GetArenaForAllocation());
}
inline std::string* DeleteDataSourceResponse::_internal_mutable_config_definition() {
  
  return _impl_.config_definition_.Mutable(GetArenaForAllocation());
}
inline std::string* DeleteDataSourceResponse::release_config_definition() {
  // @@protoc_insertion_point(field_release:szconfig.DeleteDataSourceResponse.config_definition)
  return _impl_.config_definition_.Release();
}
inline void DeleteDataSourceResponse::set_allocated_config_definition(std::string* config_definition) {
  if (config_definition != nullptr) {
    
  } else {
    
  }
  _impl_.config_definition_.SetAllocated(config_definition, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.config_definition_.IsDefault()) {
    _impl_.config_definition_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:szconfig.DeleteDataSourceResponse.config_definition)
}

// -------------------------------------------------------------------

// GetDataSourcesRequest

// string config_definition = 1;
inline void GetDataSourcesRequest::clear_config_definition() {
  _impl_.config_definition_.ClearToEmpty();
}
inline const std::string& GetDataSourcesRequest::config_definition() const {
  // @@protoc_insertion_point(field_get:szconfig.GetDataSourcesRequest.config_definition)
  return _internal_config_definition();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetDataSourcesRequest::set_config_definition(ArgT0&& arg0, ArgT... args) {
 
 _impl_.config_definition_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:szconfig.GetDataSourcesRequest.config_definition)
}
inline std::string* GetDataSourcesRequest::mutable_config_definition() {
  std::string* _s = _internal_mutable_config_definition();
  // @@protoc_insertion_point(field_mutable:szconfig.GetDataSourcesRequest.config_definition)
  return _s;
}
inline const std::string& GetDataSourcesRequest::_internal_config_definition() const {
  return _impl_.config_definition_.Get();
}
inline void GetDataSourcesRequest::_internal_set_config_definition(const std::string& value) {
  
  _impl_.config_definition_.Set(value, GetArenaForAllocation());
}
inline std::string* GetDataSourcesRequest::_internal_mutable_config_definition() {
  
  return _impl_.config_definition_.Mutable(GetArenaForAllocation());
}
inline std::string* GetDataSourcesRequest::release_config_definition() {
  // @@protoc_insertion_point(field_release:szconfig.GetDataSourcesRequest.config_definition)
  return _impl_.config_definition_.Release();
}
inline void GetDataSourcesRequest::set_allocated_config_definition(std::string* config_definition) {
  if (config_definition != nullptr) {
    
  } else {
    
  }
  _impl_.config_definition_.SetAllocated(config_definition, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.config_definition_.IsDefault()) {
    _impl_.config_definition_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:szconfig.GetDataSourcesRequest.config_definition)
}

// -------------------------------------------------------------------

// GetDataSourcesResponse

// string result = 1;
inline void GetDataSourcesResponse::clear_result() {
  _impl_.result_.ClearToEmpty();
}
inline const std::string& GetDataSourcesResponse::result() const {
  // @@protoc_insertion_point(field_get:szconfig.GetDataSourcesResponse.result)
  return _internal_result();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetDataSourcesResponse::set_result(ArgT0&& arg0, ArgT... args) {
 
 _impl_.result_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:szconfig.GetDataSourcesResponse.result)
}
inline std::string* GetDataSourcesResponse::mutable_result() {
  std::string* _s = _internal_mutable_result();
  // @@protoc_insertion_point(field_mutable:szconfig.GetDataSourcesResponse.result)
  return _s;
}
inline const std::string& GetDataSourcesResponse::_internal_result() const {
  return _impl_.result_.Get();
}
inline void GetDataSourcesResponse::_internal_set_result(const std::string& value) {
  
  _impl_.result_.Set(value, GetArenaForAllocation());
}
inline std::string* GetDataSourcesResponse::_internal_mutable_result() {
  
  return _impl_.result_.Mutable(GetArenaForAllocation());
}
inline std::string* GetDataSourcesResponse::release_result() {
  // @@protoc_insertion_point(field_release:szconfig.GetDataSourcesResponse.result)
  return _impl_.result_.Release();
}
inline void GetDataSourcesResponse::set_allocated_result(std::string* result) {
  if (result != nullptr) {
    
  } else {
    
  }
  _impl_.result_.SetAllocated(result, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.result_.IsDefault()) {
    _impl_.result_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:szconfig.GetDataSourcesResponse.result)
}

// -------------------------------------------------------------------

// VerifyConfigRequest

// string config_definition = 1;
inline void VerifyConfigRequest::clear_config_definition() {
  _impl_.config_definition_.ClearToEmpty();
}
inline const std::string& VerifyConfigRequest::config_definition() const {
  // @@protoc_insertion_point(field_get:szconfig.VerifyConfigRequest.config_definition)
  return _internal_config_definition();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void VerifyConfigRequest::set_config_definition(ArgT0&& arg0, ArgT... args) {
 
 _impl_.config_definition_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:szconfig.VerifyConfigRequest.config_definition)
}
inline std::string* VerifyConfigRequest::mutable_config_definition() {
  std::string* _s = _internal_mutable_config_definition();
  // @@protoc_insertion_point(field_mutable:szconfig.VerifyConfigRequest.config_definition)
  return _s;
}
inline const std::string& VerifyConfigRequest::_internal_config_definition() const {
  return _impl_.config_definition_.Get();
}
inline void VerifyConfigRequest::_internal_set_config_definition(const std::string& value) {
  
  _impl_.config_definition_.Set(value, GetArenaForAllocation());
}
inline std::string* VerifyConfigRequest::_internal_mutable_config_definition() {
  
  return _impl_.config_definition_.Mutable(GetArenaForAllocation());
}
inline std::string* VerifyConfigRequest::release_config_definition() {
  // @@protoc_insertion_point(field_release:szconfig.VerifyConfigRequest.config_definition)
  return _impl_.config_definition_.Release();
}
inline void VerifyConfigRequest::set_allocated_config_definition(std::string* config_definition) {
  if (config_definition != nullptr) {
    
  } else {
    
  }
  _impl_.config_definition_.SetAllocated(config_definition, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.config_definition_.IsDefault()) {
    _impl_.config_definition_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:szconfig.VerifyConfigRequest.config_definition)
}

// -------------------------------------------------------------------

// VerifyConfigResponse

// bool result = 1;
inline void VerifyConfigResponse::clear_result() {
  _impl_.result_ = false;
}
inline bool VerifyConfigResponse::_internal_result() const {
  return _impl_.result_;
}
inline bool VerifyConfigResponse::result() const {
  // @@protoc_insertion_point(field_get:szconfig.VerifyConfigResponse.result)
  return _internal_result();
}
inline void VerifyConfigResponse::_internal_set_result(bool value) {
  
  _impl_.result_ = value;
}
inline void VerifyConfigResponse::set_result(bool value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:szconfig.VerifyConfigResponse.result)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace szconfig

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_szconfig_2eproto
