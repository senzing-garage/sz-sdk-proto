// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: szconfig.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_szconfig_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_szconfig_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_szconfig_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_szconfig_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[14]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_szconfig_2eproto;
namespace szconfig {
class AddDataSourceRequest;
class AddDataSourceRequestDefaultTypeInternal;
extern AddDataSourceRequestDefaultTypeInternal _AddDataSourceRequest_default_instance_;
class AddDataSourceResponse;
class AddDataSourceResponseDefaultTypeInternal;
extern AddDataSourceResponseDefaultTypeInternal _AddDataSourceResponse_default_instance_;
class CloseConfigRequest;
class CloseConfigRequestDefaultTypeInternal;
extern CloseConfigRequestDefaultTypeInternal _CloseConfigRequest_default_instance_;
class CloseConfigResponse;
class CloseConfigResponseDefaultTypeInternal;
extern CloseConfigResponseDefaultTypeInternal _CloseConfigResponse_default_instance_;
class CreateConfigRequest;
class CreateConfigRequestDefaultTypeInternal;
extern CreateConfigRequestDefaultTypeInternal _CreateConfigRequest_default_instance_;
class CreateConfigResponse;
class CreateConfigResponseDefaultTypeInternal;
extern CreateConfigResponseDefaultTypeInternal _CreateConfigResponse_default_instance_;
class DeleteDataSourceRequest;
class DeleteDataSourceRequestDefaultTypeInternal;
extern DeleteDataSourceRequestDefaultTypeInternal _DeleteDataSourceRequest_default_instance_;
class DeleteDataSourceResponse;
class DeleteDataSourceResponseDefaultTypeInternal;
extern DeleteDataSourceResponseDefaultTypeInternal _DeleteDataSourceResponse_default_instance_;
class ExportConfigRequest;
class ExportConfigRequestDefaultTypeInternal;
extern ExportConfigRequestDefaultTypeInternal _ExportConfigRequest_default_instance_;
class ExportConfigResponse;
class ExportConfigResponseDefaultTypeInternal;
extern ExportConfigResponseDefaultTypeInternal _ExportConfigResponse_default_instance_;
class GetDataSourcesRequest;
class GetDataSourcesRequestDefaultTypeInternal;
extern GetDataSourcesRequestDefaultTypeInternal _GetDataSourcesRequest_default_instance_;
class GetDataSourcesResponse;
class GetDataSourcesResponseDefaultTypeInternal;
extern GetDataSourcesResponseDefaultTypeInternal _GetDataSourcesResponse_default_instance_;
class ImportConfigRequest;
class ImportConfigRequestDefaultTypeInternal;
extern ImportConfigRequestDefaultTypeInternal _ImportConfigRequest_default_instance_;
class ImportConfigResponse;
class ImportConfigResponseDefaultTypeInternal;
extern ImportConfigResponseDefaultTypeInternal _ImportConfigResponse_default_instance_;
}  // namespace szconfig
PROTOBUF_NAMESPACE_OPEN
template<> ::szconfig::AddDataSourceRequest* Arena::CreateMaybeMessage<::szconfig::AddDataSourceRequest>(Arena*);
template<> ::szconfig::AddDataSourceResponse* Arena::CreateMaybeMessage<::szconfig::AddDataSourceResponse>(Arena*);
template<> ::szconfig::CloseConfigRequest* Arena::CreateMaybeMessage<::szconfig::CloseConfigRequest>(Arena*);
template<> ::szconfig::CloseConfigResponse* Arena::CreateMaybeMessage<::szconfig::CloseConfigResponse>(Arena*);
template<> ::szconfig::CreateConfigRequest* Arena::CreateMaybeMessage<::szconfig::CreateConfigRequest>(Arena*);
template<> ::szconfig::CreateConfigResponse* Arena::CreateMaybeMessage<::szconfig::CreateConfigResponse>(Arena*);
template<> ::szconfig::DeleteDataSourceRequest* Arena::CreateMaybeMessage<::szconfig::DeleteDataSourceRequest>(Arena*);
template<> ::szconfig::DeleteDataSourceResponse* Arena::CreateMaybeMessage<::szconfig::DeleteDataSourceResponse>(Arena*);
template<> ::szconfig::ExportConfigRequest* Arena::CreateMaybeMessage<::szconfig::ExportConfigRequest>(Arena*);
template<> ::szconfig::ExportConfigResponse* Arena::CreateMaybeMessage<::szconfig::ExportConfigResponse>(Arena*);
template<> ::szconfig::GetDataSourcesRequest* Arena::CreateMaybeMessage<::szconfig::GetDataSourcesRequest>(Arena*);
template<> ::szconfig::GetDataSourcesResponse* Arena::CreateMaybeMessage<::szconfig::GetDataSourcesResponse>(Arena*);
template<> ::szconfig::ImportConfigRequest* Arena::CreateMaybeMessage<::szconfig::ImportConfigRequest>(Arena*);
template<> ::szconfig::ImportConfigResponse* Arena::CreateMaybeMessage<::szconfig::ImportConfigResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace szconfig {

// ===================================================================

class AddDataSourceRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:szconfig.AddDataSourceRequest) */ {
 public:
  inline AddDataSourceRequest() : AddDataSourceRequest(nullptr) {};
  virtual ~AddDataSourceRequest();

  AddDataSourceRequest(const AddDataSourceRequest& from);
  AddDataSourceRequest(AddDataSourceRequest&& from) noexcept
    : AddDataSourceRequest() {
    *this = ::std::move(from);
  }

  inline AddDataSourceRequest& operator=(const AddDataSourceRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddDataSourceRequest& operator=(AddDataSourceRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AddDataSourceRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AddDataSourceRequest* internal_default_instance() {
    return reinterpret_cast<const AddDataSourceRequest*>(
               &_AddDataSourceRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(AddDataSourceRequest& a, AddDataSourceRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(AddDataSourceRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AddDataSourceRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AddDataSourceRequest* New() const final {
    return CreateMaybeMessage<AddDataSourceRequest>(nullptr);
  }

  AddDataSourceRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AddDataSourceRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AddDataSourceRequest& from);
  void MergeFrom(const AddDataSourceRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddDataSourceRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "szconfig.AddDataSourceRequest";
  }
  protected:
  explicit AddDataSourceRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_szconfig_2eproto);
    return ::descriptor_table_szconfig_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataSourceCodeFieldNumber = 2,
    kConfigHandleFieldNumber = 1,
  };
  // string dataSourceCode = 2;
  void clear_datasourcecode();
  const std::string& datasourcecode() const;
  void set_datasourcecode(const std::string& value);
  void set_datasourcecode(std::string&& value);
  void set_datasourcecode(const char* value);
  void set_datasourcecode(const char* value, size_t size);
  std::string* mutable_datasourcecode();
  std::string* release_datasourcecode();
  void set_allocated_datasourcecode(std::string* datasourcecode);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_datasourcecode();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_datasourcecode(
      std::string* datasourcecode);
  private:
  const std::string& _internal_datasourcecode() const;
  void _internal_set_datasourcecode(const std::string& value);
  std::string* _internal_mutable_datasourcecode();
  public:

  // int64 configHandle = 1;
  void clear_confighandle();
  ::PROTOBUF_NAMESPACE_ID::int64 confighandle() const;
  void set_confighandle(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_confighandle() const;
  void _internal_set_confighandle(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:szconfig.AddDataSourceRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr datasourcecode_;
  ::PROTOBUF_NAMESPACE_ID::int64 confighandle_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_szconfig_2eproto;
};
// -------------------------------------------------------------------

class AddDataSourceResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:szconfig.AddDataSourceResponse) */ {
 public:
  inline AddDataSourceResponse() : AddDataSourceResponse(nullptr) {};
  virtual ~AddDataSourceResponse();

  AddDataSourceResponse(const AddDataSourceResponse& from);
  AddDataSourceResponse(AddDataSourceResponse&& from) noexcept
    : AddDataSourceResponse() {
    *this = ::std::move(from);
  }

  inline AddDataSourceResponse& operator=(const AddDataSourceResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddDataSourceResponse& operator=(AddDataSourceResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AddDataSourceResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AddDataSourceResponse* internal_default_instance() {
    return reinterpret_cast<const AddDataSourceResponse*>(
               &_AddDataSourceResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(AddDataSourceResponse& a, AddDataSourceResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(AddDataSourceResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AddDataSourceResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AddDataSourceResponse* New() const final {
    return CreateMaybeMessage<AddDataSourceResponse>(nullptr);
  }

  AddDataSourceResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AddDataSourceResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AddDataSourceResponse& from);
  void MergeFrom(const AddDataSourceResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddDataSourceResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "szconfig.AddDataSourceResponse";
  }
  protected:
  explicit AddDataSourceResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_szconfig_2eproto);
    return ::descriptor_table_szconfig_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
  };
  // string result = 1;
  void clear_result();
  const std::string& result() const;
  void set_result(const std::string& value);
  void set_result(std::string&& value);
  void set_result(const char* value);
  void set_result(const char* value, size_t size);
  std::string* mutable_result();
  std::string* release_result();
  void set_allocated_result(std::string* result);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_result();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_result(
      std::string* result);
  private:
  const std::string& _internal_result() const;
  void _internal_set_result(const std::string& value);
  std::string* _internal_mutable_result();
  public:

  // @@protoc_insertion_point(class_scope:szconfig.AddDataSourceResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_szconfig_2eproto;
};
// -------------------------------------------------------------------

class CloseConfigRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:szconfig.CloseConfigRequest) */ {
 public:
  inline CloseConfigRequest() : CloseConfigRequest(nullptr) {};
  virtual ~CloseConfigRequest();

  CloseConfigRequest(const CloseConfigRequest& from);
  CloseConfigRequest(CloseConfigRequest&& from) noexcept
    : CloseConfigRequest() {
    *this = ::std::move(from);
  }

  inline CloseConfigRequest& operator=(const CloseConfigRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CloseConfigRequest& operator=(CloseConfigRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CloseConfigRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CloseConfigRequest* internal_default_instance() {
    return reinterpret_cast<const CloseConfigRequest*>(
               &_CloseConfigRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(CloseConfigRequest& a, CloseConfigRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CloseConfigRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CloseConfigRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CloseConfigRequest* New() const final {
    return CreateMaybeMessage<CloseConfigRequest>(nullptr);
  }

  CloseConfigRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CloseConfigRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CloseConfigRequest& from);
  void MergeFrom(const CloseConfigRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CloseConfigRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "szconfig.CloseConfigRequest";
  }
  protected:
  explicit CloseConfigRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_szconfig_2eproto);
    return ::descriptor_table_szconfig_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConfigHandleFieldNumber = 1,
  };
  // int64 configHandle = 1;
  void clear_confighandle();
  ::PROTOBUF_NAMESPACE_ID::int64 confighandle() const;
  void set_confighandle(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_confighandle() const;
  void _internal_set_confighandle(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:szconfig.CloseConfigRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int64 confighandle_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_szconfig_2eproto;
};
// -------------------------------------------------------------------

class CloseConfigResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:szconfig.CloseConfigResponse) */ {
 public:
  inline CloseConfigResponse() : CloseConfigResponse(nullptr) {};
  virtual ~CloseConfigResponse();

  CloseConfigResponse(const CloseConfigResponse& from);
  CloseConfigResponse(CloseConfigResponse&& from) noexcept
    : CloseConfigResponse() {
    *this = ::std::move(from);
  }

  inline CloseConfigResponse& operator=(const CloseConfigResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CloseConfigResponse& operator=(CloseConfigResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CloseConfigResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CloseConfigResponse* internal_default_instance() {
    return reinterpret_cast<const CloseConfigResponse*>(
               &_CloseConfigResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(CloseConfigResponse& a, CloseConfigResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CloseConfigResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CloseConfigResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CloseConfigResponse* New() const final {
    return CreateMaybeMessage<CloseConfigResponse>(nullptr);
  }

  CloseConfigResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CloseConfigResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CloseConfigResponse& from);
  void MergeFrom(const CloseConfigResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CloseConfigResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "szconfig.CloseConfigResponse";
  }
  protected:
  explicit CloseConfigResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_szconfig_2eproto);
    return ::descriptor_table_szconfig_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:szconfig.CloseConfigResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_szconfig_2eproto;
};
// -------------------------------------------------------------------

class CreateConfigRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:szconfig.CreateConfigRequest) */ {
 public:
  inline CreateConfigRequest() : CreateConfigRequest(nullptr) {};
  virtual ~CreateConfigRequest();

  CreateConfigRequest(const CreateConfigRequest& from);
  CreateConfigRequest(CreateConfigRequest&& from) noexcept
    : CreateConfigRequest() {
    *this = ::std::move(from);
  }

  inline CreateConfigRequest& operator=(const CreateConfigRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateConfigRequest& operator=(CreateConfigRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CreateConfigRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreateConfigRequest* internal_default_instance() {
    return reinterpret_cast<const CreateConfigRequest*>(
               &_CreateConfigRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(CreateConfigRequest& a, CreateConfigRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateConfigRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateConfigRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreateConfigRequest* New() const final {
    return CreateMaybeMessage<CreateConfigRequest>(nullptr);
  }

  CreateConfigRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateConfigRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CreateConfigRequest& from);
  void MergeFrom(const CreateConfigRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateConfigRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "szconfig.CreateConfigRequest";
  }
  protected:
  explicit CreateConfigRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_szconfig_2eproto);
    return ::descriptor_table_szconfig_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:szconfig.CreateConfigRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_szconfig_2eproto;
};
// -------------------------------------------------------------------

class CreateConfigResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:szconfig.CreateConfigResponse) */ {
 public:
  inline CreateConfigResponse() : CreateConfigResponse(nullptr) {};
  virtual ~CreateConfigResponse();

  CreateConfigResponse(const CreateConfigResponse& from);
  CreateConfigResponse(CreateConfigResponse&& from) noexcept
    : CreateConfigResponse() {
    *this = ::std::move(from);
  }

  inline CreateConfigResponse& operator=(const CreateConfigResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateConfigResponse& operator=(CreateConfigResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CreateConfigResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreateConfigResponse* internal_default_instance() {
    return reinterpret_cast<const CreateConfigResponse*>(
               &_CreateConfigResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(CreateConfigResponse& a, CreateConfigResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateConfigResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateConfigResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreateConfigResponse* New() const final {
    return CreateMaybeMessage<CreateConfigResponse>(nullptr);
  }

  CreateConfigResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateConfigResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CreateConfigResponse& from);
  void MergeFrom(const CreateConfigResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateConfigResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "szconfig.CreateConfigResponse";
  }
  protected:
  explicit CreateConfigResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_szconfig_2eproto);
    return ::descriptor_table_szconfig_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
  };
  // int64 result = 1;
  void clear_result();
  ::PROTOBUF_NAMESPACE_ID::int64 result() const;
  void set_result(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_result() const;
  void _internal_set_result(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:szconfig.CreateConfigResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int64 result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_szconfig_2eproto;
};
// -------------------------------------------------------------------

class DeleteDataSourceRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:szconfig.DeleteDataSourceRequest) */ {
 public:
  inline DeleteDataSourceRequest() : DeleteDataSourceRequest(nullptr) {};
  virtual ~DeleteDataSourceRequest();

  DeleteDataSourceRequest(const DeleteDataSourceRequest& from);
  DeleteDataSourceRequest(DeleteDataSourceRequest&& from) noexcept
    : DeleteDataSourceRequest() {
    *this = ::std::move(from);
  }

  inline DeleteDataSourceRequest& operator=(const DeleteDataSourceRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteDataSourceRequest& operator=(DeleteDataSourceRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeleteDataSourceRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeleteDataSourceRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteDataSourceRequest*>(
               &_DeleteDataSourceRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(DeleteDataSourceRequest& a, DeleteDataSourceRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteDataSourceRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteDataSourceRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeleteDataSourceRequest* New() const final {
    return CreateMaybeMessage<DeleteDataSourceRequest>(nullptr);
  }

  DeleteDataSourceRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeleteDataSourceRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeleteDataSourceRequest& from);
  void MergeFrom(const DeleteDataSourceRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteDataSourceRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "szconfig.DeleteDataSourceRequest";
  }
  protected:
  explicit DeleteDataSourceRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_szconfig_2eproto);
    return ::descriptor_table_szconfig_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataSourceCodeFieldNumber = 2,
    kConfigHandleFieldNumber = 1,
  };
  // string dataSourceCode = 2;
  void clear_datasourcecode();
  const std::string& datasourcecode() const;
  void set_datasourcecode(const std::string& value);
  void set_datasourcecode(std::string&& value);
  void set_datasourcecode(const char* value);
  void set_datasourcecode(const char* value, size_t size);
  std::string* mutable_datasourcecode();
  std::string* release_datasourcecode();
  void set_allocated_datasourcecode(std::string* datasourcecode);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_datasourcecode();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_datasourcecode(
      std::string* datasourcecode);
  private:
  const std::string& _internal_datasourcecode() const;
  void _internal_set_datasourcecode(const std::string& value);
  std::string* _internal_mutable_datasourcecode();
  public:

  // int64 configHandle = 1;
  void clear_confighandle();
  ::PROTOBUF_NAMESPACE_ID::int64 confighandle() const;
  void set_confighandle(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_confighandle() const;
  void _internal_set_confighandle(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:szconfig.DeleteDataSourceRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr datasourcecode_;
  ::PROTOBUF_NAMESPACE_ID::int64 confighandle_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_szconfig_2eproto;
};
// -------------------------------------------------------------------

class DeleteDataSourceResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:szconfig.DeleteDataSourceResponse) */ {
 public:
  inline DeleteDataSourceResponse() : DeleteDataSourceResponse(nullptr) {};
  virtual ~DeleteDataSourceResponse();

  DeleteDataSourceResponse(const DeleteDataSourceResponse& from);
  DeleteDataSourceResponse(DeleteDataSourceResponse&& from) noexcept
    : DeleteDataSourceResponse() {
    *this = ::std::move(from);
  }

  inline DeleteDataSourceResponse& operator=(const DeleteDataSourceResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteDataSourceResponse& operator=(DeleteDataSourceResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeleteDataSourceResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeleteDataSourceResponse* internal_default_instance() {
    return reinterpret_cast<const DeleteDataSourceResponse*>(
               &_DeleteDataSourceResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(DeleteDataSourceResponse& a, DeleteDataSourceResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteDataSourceResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteDataSourceResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeleteDataSourceResponse* New() const final {
    return CreateMaybeMessage<DeleteDataSourceResponse>(nullptr);
  }

  DeleteDataSourceResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeleteDataSourceResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeleteDataSourceResponse& from);
  void MergeFrom(const DeleteDataSourceResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteDataSourceResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "szconfig.DeleteDataSourceResponse";
  }
  protected:
  explicit DeleteDataSourceResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_szconfig_2eproto);
    return ::descriptor_table_szconfig_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:szconfig.DeleteDataSourceResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_szconfig_2eproto;
};
// -------------------------------------------------------------------

class ExportConfigRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:szconfig.ExportConfigRequest) */ {
 public:
  inline ExportConfigRequest() : ExportConfigRequest(nullptr) {};
  virtual ~ExportConfigRequest();

  ExportConfigRequest(const ExportConfigRequest& from);
  ExportConfigRequest(ExportConfigRequest&& from) noexcept
    : ExportConfigRequest() {
    *this = ::std::move(from);
  }

  inline ExportConfigRequest& operator=(const ExportConfigRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ExportConfigRequest& operator=(ExportConfigRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ExportConfigRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ExportConfigRequest* internal_default_instance() {
    return reinterpret_cast<const ExportConfigRequest*>(
               &_ExportConfigRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(ExportConfigRequest& a, ExportConfigRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ExportConfigRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ExportConfigRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ExportConfigRequest* New() const final {
    return CreateMaybeMessage<ExportConfigRequest>(nullptr);
  }

  ExportConfigRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ExportConfigRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ExportConfigRequest& from);
  void MergeFrom(const ExportConfigRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ExportConfigRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "szconfig.ExportConfigRequest";
  }
  protected:
  explicit ExportConfigRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_szconfig_2eproto);
    return ::descriptor_table_szconfig_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConfigHandleFieldNumber = 1,
  };
  // int64 configHandle = 1;
  void clear_confighandle();
  ::PROTOBUF_NAMESPACE_ID::int64 confighandle() const;
  void set_confighandle(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_confighandle() const;
  void _internal_set_confighandle(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:szconfig.ExportConfigRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int64 confighandle_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_szconfig_2eproto;
};
// -------------------------------------------------------------------

class ExportConfigResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:szconfig.ExportConfigResponse) */ {
 public:
  inline ExportConfigResponse() : ExportConfigResponse(nullptr) {};
  virtual ~ExportConfigResponse();

  ExportConfigResponse(const ExportConfigResponse& from);
  ExportConfigResponse(ExportConfigResponse&& from) noexcept
    : ExportConfigResponse() {
    *this = ::std::move(from);
  }

  inline ExportConfigResponse& operator=(const ExportConfigResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ExportConfigResponse& operator=(ExportConfigResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ExportConfigResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ExportConfigResponse* internal_default_instance() {
    return reinterpret_cast<const ExportConfigResponse*>(
               &_ExportConfigResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(ExportConfigResponse& a, ExportConfigResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ExportConfigResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ExportConfigResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ExportConfigResponse* New() const final {
    return CreateMaybeMessage<ExportConfigResponse>(nullptr);
  }

  ExportConfigResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ExportConfigResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ExportConfigResponse& from);
  void MergeFrom(const ExportConfigResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ExportConfigResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "szconfig.ExportConfigResponse";
  }
  protected:
  explicit ExportConfigResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_szconfig_2eproto);
    return ::descriptor_table_szconfig_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
  };
  // string result = 1;
  void clear_result();
  const std::string& result() const;
  void set_result(const std::string& value);
  void set_result(std::string&& value);
  void set_result(const char* value);
  void set_result(const char* value, size_t size);
  std::string* mutable_result();
  std::string* release_result();
  void set_allocated_result(std::string* result);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_result();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_result(
      std::string* result);
  private:
  const std::string& _internal_result() const;
  void _internal_set_result(const std::string& value);
  std::string* _internal_mutable_result();
  public:

  // @@protoc_insertion_point(class_scope:szconfig.ExportConfigResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_szconfig_2eproto;
};
// -------------------------------------------------------------------

class GetDataSourcesRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:szconfig.GetDataSourcesRequest) */ {
 public:
  inline GetDataSourcesRequest() : GetDataSourcesRequest(nullptr) {};
  virtual ~GetDataSourcesRequest();

  GetDataSourcesRequest(const GetDataSourcesRequest& from);
  GetDataSourcesRequest(GetDataSourcesRequest&& from) noexcept
    : GetDataSourcesRequest() {
    *this = ::std::move(from);
  }

  inline GetDataSourcesRequest& operator=(const GetDataSourcesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetDataSourcesRequest& operator=(GetDataSourcesRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetDataSourcesRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetDataSourcesRequest* internal_default_instance() {
    return reinterpret_cast<const GetDataSourcesRequest*>(
               &_GetDataSourcesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(GetDataSourcesRequest& a, GetDataSourcesRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetDataSourcesRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetDataSourcesRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetDataSourcesRequest* New() const final {
    return CreateMaybeMessage<GetDataSourcesRequest>(nullptr);
  }

  GetDataSourcesRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetDataSourcesRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetDataSourcesRequest& from);
  void MergeFrom(const GetDataSourcesRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetDataSourcesRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "szconfig.GetDataSourcesRequest";
  }
  protected:
  explicit GetDataSourcesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_szconfig_2eproto);
    return ::descriptor_table_szconfig_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConfigHandleFieldNumber = 1,
  };
  // int64 configHandle = 1;
  void clear_confighandle();
  ::PROTOBUF_NAMESPACE_ID::int64 confighandle() const;
  void set_confighandle(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_confighandle() const;
  void _internal_set_confighandle(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:szconfig.GetDataSourcesRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int64 confighandle_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_szconfig_2eproto;
};
// -------------------------------------------------------------------

class GetDataSourcesResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:szconfig.GetDataSourcesResponse) */ {
 public:
  inline GetDataSourcesResponse() : GetDataSourcesResponse(nullptr) {};
  virtual ~GetDataSourcesResponse();

  GetDataSourcesResponse(const GetDataSourcesResponse& from);
  GetDataSourcesResponse(GetDataSourcesResponse&& from) noexcept
    : GetDataSourcesResponse() {
    *this = ::std::move(from);
  }

  inline GetDataSourcesResponse& operator=(const GetDataSourcesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetDataSourcesResponse& operator=(GetDataSourcesResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetDataSourcesResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetDataSourcesResponse* internal_default_instance() {
    return reinterpret_cast<const GetDataSourcesResponse*>(
               &_GetDataSourcesResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(GetDataSourcesResponse& a, GetDataSourcesResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetDataSourcesResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetDataSourcesResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetDataSourcesResponse* New() const final {
    return CreateMaybeMessage<GetDataSourcesResponse>(nullptr);
  }

  GetDataSourcesResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetDataSourcesResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetDataSourcesResponse& from);
  void MergeFrom(const GetDataSourcesResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetDataSourcesResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "szconfig.GetDataSourcesResponse";
  }
  protected:
  explicit GetDataSourcesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_szconfig_2eproto);
    return ::descriptor_table_szconfig_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
  };
  // string result = 1;
  void clear_result();
  const std::string& result() const;
  void set_result(const std::string& value);
  void set_result(std::string&& value);
  void set_result(const char* value);
  void set_result(const char* value, size_t size);
  std::string* mutable_result();
  std::string* release_result();
  void set_allocated_result(std::string* result);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_result();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_result(
      std::string* result);
  private:
  const std::string& _internal_result() const;
  void _internal_set_result(const std::string& value);
  std::string* _internal_mutable_result();
  public:

  // @@protoc_insertion_point(class_scope:szconfig.GetDataSourcesResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_szconfig_2eproto;
};
// -------------------------------------------------------------------

class ImportConfigRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:szconfig.ImportConfigRequest) */ {
 public:
  inline ImportConfigRequest() : ImportConfigRequest(nullptr) {};
  virtual ~ImportConfigRequest();

  ImportConfigRequest(const ImportConfigRequest& from);
  ImportConfigRequest(ImportConfigRequest&& from) noexcept
    : ImportConfigRequest() {
    *this = ::std::move(from);
  }

  inline ImportConfigRequest& operator=(const ImportConfigRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ImportConfigRequest& operator=(ImportConfigRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ImportConfigRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ImportConfigRequest* internal_default_instance() {
    return reinterpret_cast<const ImportConfigRequest*>(
               &_ImportConfigRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(ImportConfigRequest& a, ImportConfigRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ImportConfigRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ImportConfigRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ImportConfigRequest* New() const final {
    return CreateMaybeMessage<ImportConfigRequest>(nullptr);
  }

  ImportConfigRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ImportConfigRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ImportConfigRequest& from);
  void MergeFrom(const ImportConfigRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ImportConfigRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "szconfig.ImportConfigRequest";
  }
  protected:
  explicit ImportConfigRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_szconfig_2eproto);
    return ::descriptor_table_szconfig_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConfigDefinitionFieldNumber = 1,
  };
  // string configDefinition = 1;
  void clear_configdefinition();
  const std::string& configdefinition() const;
  void set_configdefinition(const std::string& value);
  void set_configdefinition(std::string&& value);
  void set_configdefinition(const char* value);
  void set_configdefinition(const char* value, size_t size);
  std::string* mutable_configdefinition();
  std::string* release_configdefinition();
  void set_allocated_configdefinition(std::string* configdefinition);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_configdefinition();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_configdefinition(
      std::string* configdefinition);
  private:
  const std::string& _internal_configdefinition() const;
  void _internal_set_configdefinition(const std::string& value);
  std::string* _internal_mutable_configdefinition();
  public:

  // @@protoc_insertion_point(class_scope:szconfig.ImportConfigRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr configdefinition_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_szconfig_2eproto;
};
// -------------------------------------------------------------------

class ImportConfigResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:szconfig.ImportConfigResponse) */ {
 public:
  inline ImportConfigResponse() : ImportConfigResponse(nullptr) {};
  virtual ~ImportConfigResponse();

  ImportConfigResponse(const ImportConfigResponse& from);
  ImportConfigResponse(ImportConfigResponse&& from) noexcept
    : ImportConfigResponse() {
    *this = ::std::move(from);
  }

  inline ImportConfigResponse& operator=(const ImportConfigResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ImportConfigResponse& operator=(ImportConfigResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ImportConfigResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ImportConfigResponse* internal_default_instance() {
    return reinterpret_cast<const ImportConfigResponse*>(
               &_ImportConfigResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(ImportConfigResponse& a, ImportConfigResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ImportConfigResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ImportConfigResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ImportConfigResponse* New() const final {
    return CreateMaybeMessage<ImportConfigResponse>(nullptr);
  }

  ImportConfigResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ImportConfigResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ImportConfigResponse& from);
  void MergeFrom(const ImportConfigResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ImportConfigResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "szconfig.ImportConfigResponse";
  }
  protected:
  explicit ImportConfigResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_szconfig_2eproto);
    return ::descriptor_table_szconfig_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
  };
  // int64 result = 1;
  void clear_result();
  ::PROTOBUF_NAMESPACE_ID::int64 result() const;
  void set_result(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_result() const;
  void _internal_set_result(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:szconfig.ImportConfigResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int64 result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_szconfig_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// AddDataSourceRequest

// int64 configHandle = 1;
inline void AddDataSourceRequest::clear_confighandle() {
  confighandle_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AddDataSourceRequest::_internal_confighandle() const {
  return confighandle_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AddDataSourceRequest::confighandle() const {
  // @@protoc_insertion_point(field_get:szconfig.AddDataSourceRequest.configHandle)
  return _internal_confighandle();
}
inline void AddDataSourceRequest::_internal_set_confighandle(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  confighandle_ = value;
}
inline void AddDataSourceRequest::set_confighandle(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_confighandle(value);
  // @@protoc_insertion_point(field_set:szconfig.AddDataSourceRequest.configHandle)
}

// string dataSourceCode = 2;
inline void AddDataSourceRequest::clear_datasourcecode() {
  datasourcecode_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& AddDataSourceRequest::datasourcecode() const {
  // @@protoc_insertion_point(field_get:szconfig.AddDataSourceRequest.dataSourceCode)
  return _internal_datasourcecode();
}
inline void AddDataSourceRequest::set_datasourcecode(const std::string& value) {
  _internal_set_datasourcecode(value);
  // @@protoc_insertion_point(field_set:szconfig.AddDataSourceRequest.dataSourceCode)
}
inline std::string* AddDataSourceRequest::mutable_datasourcecode() {
  // @@protoc_insertion_point(field_mutable:szconfig.AddDataSourceRequest.dataSourceCode)
  return _internal_mutable_datasourcecode();
}
inline const std::string& AddDataSourceRequest::_internal_datasourcecode() const {
  return datasourcecode_.Get();
}
inline void AddDataSourceRequest::_internal_set_datasourcecode(const std::string& value) {
  
  datasourcecode_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void AddDataSourceRequest::set_datasourcecode(std::string&& value) {
  
  datasourcecode_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:szconfig.AddDataSourceRequest.dataSourceCode)
}
inline void AddDataSourceRequest::set_datasourcecode(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  datasourcecode_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:szconfig.AddDataSourceRequest.dataSourceCode)
}
inline void AddDataSourceRequest::set_datasourcecode(const char* value,
    size_t size) {
  
  datasourcecode_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:szconfig.AddDataSourceRequest.dataSourceCode)
}
inline std::string* AddDataSourceRequest::_internal_mutable_datasourcecode() {
  
  return datasourcecode_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* AddDataSourceRequest::release_datasourcecode() {
  // @@protoc_insertion_point(field_release:szconfig.AddDataSourceRequest.dataSourceCode)
  return datasourcecode_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AddDataSourceRequest::set_allocated_datasourcecode(std::string* datasourcecode) {
  if (datasourcecode != nullptr) {
    
  } else {
    
  }
  datasourcecode_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), datasourcecode,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:szconfig.AddDataSourceRequest.dataSourceCode)
}
inline std::string* AddDataSourceRequest::unsafe_arena_release_datasourcecode() {
  // @@protoc_insertion_point(field_unsafe_arena_release:szconfig.AddDataSourceRequest.dataSourceCode)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return datasourcecode_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void AddDataSourceRequest::unsafe_arena_set_allocated_datasourcecode(
    std::string* datasourcecode) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (datasourcecode != nullptr) {
    
  } else {
    
  }
  datasourcecode_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      datasourcecode, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:szconfig.AddDataSourceRequest.dataSourceCode)
}

// -------------------------------------------------------------------

// AddDataSourceResponse

// string result = 1;
inline void AddDataSourceResponse::clear_result() {
  result_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& AddDataSourceResponse::result() const {
  // @@protoc_insertion_point(field_get:szconfig.AddDataSourceResponse.result)
  return _internal_result();
}
inline void AddDataSourceResponse::set_result(const std::string& value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:szconfig.AddDataSourceResponse.result)
}
inline std::string* AddDataSourceResponse::mutable_result() {
  // @@protoc_insertion_point(field_mutable:szconfig.AddDataSourceResponse.result)
  return _internal_mutable_result();
}
inline const std::string& AddDataSourceResponse::_internal_result() const {
  return result_.Get();
}
inline void AddDataSourceResponse::_internal_set_result(const std::string& value) {
  
  result_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void AddDataSourceResponse::set_result(std::string&& value) {
  
  result_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:szconfig.AddDataSourceResponse.result)
}
inline void AddDataSourceResponse::set_result(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  result_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:szconfig.AddDataSourceResponse.result)
}
inline void AddDataSourceResponse::set_result(const char* value,
    size_t size) {
  
  result_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:szconfig.AddDataSourceResponse.result)
}
inline std::string* AddDataSourceResponse::_internal_mutable_result() {
  
  return result_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* AddDataSourceResponse::release_result() {
  // @@protoc_insertion_point(field_release:szconfig.AddDataSourceResponse.result)
  return result_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AddDataSourceResponse::set_allocated_result(std::string* result) {
  if (result != nullptr) {
    
  } else {
    
  }
  result_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), result,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:szconfig.AddDataSourceResponse.result)
}
inline std::string* AddDataSourceResponse::unsafe_arena_release_result() {
  // @@protoc_insertion_point(field_unsafe_arena_release:szconfig.AddDataSourceResponse.result)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return result_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void AddDataSourceResponse::unsafe_arena_set_allocated_result(
    std::string* result) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (result != nullptr) {
    
  } else {
    
  }
  result_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      result, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:szconfig.AddDataSourceResponse.result)
}

// -------------------------------------------------------------------

// CloseConfigRequest

// int64 configHandle = 1;
inline void CloseConfigRequest::clear_confighandle() {
  confighandle_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 CloseConfigRequest::_internal_confighandle() const {
  return confighandle_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 CloseConfigRequest::confighandle() const {
  // @@protoc_insertion_point(field_get:szconfig.CloseConfigRequest.configHandle)
  return _internal_confighandle();
}
inline void CloseConfigRequest::_internal_set_confighandle(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  confighandle_ = value;
}
inline void CloseConfigRequest::set_confighandle(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_confighandle(value);
  // @@protoc_insertion_point(field_set:szconfig.CloseConfigRequest.configHandle)
}

// -------------------------------------------------------------------

// CloseConfigResponse

// -------------------------------------------------------------------

// CreateConfigRequest

// -------------------------------------------------------------------

// CreateConfigResponse

// int64 result = 1;
inline void CreateConfigResponse::clear_result() {
  result_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 CreateConfigResponse::_internal_result() const {
  return result_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 CreateConfigResponse::result() const {
  // @@protoc_insertion_point(field_get:szconfig.CreateConfigResponse.result)
  return _internal_result();
}
inline void CreateConfigResponse::_internal_set_result(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  result_ = value;
}
inline void CreateConfigResponse::set_result(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:szconfig.CreateConfigResponse.result)
}

// -------------------------------------------------------------------

// DeleteDataSourceRequest

// int64 configHandle = 1;
inline void DeleteDataSourceRequest::clear_confighandle() {
  confighandle_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 DeleteDataSourceRequest::_internal_confighandle() const {
  return confighandle_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 DeleteDataSourceRequest::confighandle() const {
  // @@protoc_insertion_point(field_get:szconfig.DeleteDataSourceRequest.configHandle)
  return _internal_confighandle();
}
inline void DeleteDataSourceRequest::_internal_set_confighandle(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  confighandle_ = value;
}
inline void DeleteDataSourceRequest::set_confighandle(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_confighandle(value);
  // @@protoc_insertion_point(field_set:szconfig.DeleteDataSourceRequest.configHandle)
}

// string dataSourceCode = 2;
inline void DeleteDataSourceRequest::clear_datasourcecode() {
  datasourcecode_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& DeleteDataSourceRequest::datasourcecode() const {
  // @@protoc_insertion_point(field_get:szconfig.DeleteDataSourceRequest.dataSourceCode)
  return _internal_datasourcecode();
}
inline void DeleteDataSourceRequest::set_datasourcecode(const std::string& value) {
  _internal_set_datasourcecode(value);
  // @@protoc_insertion_point(field_set:szconfig.DeleteDataSourceRequest.dataSourceCode)
}
inline std::string* DeleteDataSourceRequest::mutable_datasourcecode() {
  // @@protoc_insertion_point(field_mutable:szconfig.DeleteDataSourceRequest.dataSourceCode)
  return _internal_mutable_datasourcecode();
}
inline const std::string& DeleteDataSourceRequest::_internal_datasourcecode() const {
  return datasourcecode_.Get();
}
inline void DeleteDataSourceRequest::_internal_set_datasourcecode(const std::string& value) {
  
  datasourcecode_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DeleteDataSourceRequest::set_datasourcecode(std::string&& value) {
  
  datasourcecode_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:szconfig.DeleteDataSourceRequest.dataSourceCode)
}
inline void DeleteDataSourceRequest::set_datasourcecode(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  datasourcecode_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:szconfig.DeleteDataSourceRequest.dataSourceCode)
}
inline void DeleteDataSourceRequest::set_datasourcecode(const char* value,
    size_t size) {
  
  datasourcecode_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:szconfig.DeleteDataSourceRequest.dataSourceCode)
}
inline std::string* DeleteDataSourceRequest::_internal_mutable_datasourcecode() {
  
  return datasourcecode_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DeleteDataSourceRequest::release_datasourcecode() {
  // @@protoc_insertion_point(field_release:szconfig.DeleteDataSourceRequest.dataSourceCode)
  return datasourcecode_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DeleteDataSourceRequest::set_allocated_datasourcecode(std::string* datasourcecode) {
  if (datasourcecode != nullptr) {
    
  } else {
    
  }
  datasourcecode_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), datasourcecode,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:szconfig.DeleteDataSourceRequest.dataSourceCode)
}
inline std::string* DeleteDataSourceRequest::unsafe_arena_release_datasourcecode() {
  // @@protoc_insertion_point(field_unsafe_arena_release:szconfig.DeleteDataSourceRequest.dataSourceCode)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return datasourcecode_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void DeleteDataSourceRequest::unsafe_arena_set_allocated_datasourcecode(
    std::string* datasourcecode) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (datasourcecode != nullptr) {
    
  } else {
    
  }
  datasourcecode_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      datasourcecode, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:szconfig.DeleteDataSourceRequest.dataSourceCode)
}

// -------------------------------------------------------------------

// DeleteDataSourceResponse

// -------------------------------------------------------------------

// ExportConfigRequest

// int64 configHandle = 1;
inline void ExportConfigRequest::clear_confighandle() {
  confighandle_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ExportConfigRequest::_internal_confighandle() const {
  return confighandle_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ExportConfigRequest::confighandle() const {
  // @@protoc_insertion_point(field_get:szconfig.ExportConfigRequest.configHandle)
  return _internal_confighandle();
}
inline void ExportConfigRequest::_internal_set_confighandle(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  confighandle_ = value;
}
inline void ExportConfigRequest::set_confighandle(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_confighandle(value);
  // @@protoc_insertion_point(field_set:szconfig.ExportConfigRequest.configHandle)
}

// -------------------------------------------------------------------

// ExportConfigResponse

// string result = 1;
inline void ExportConfigResponse::clear_result() {
  result_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ExportConfigResponse::result() const {
  // @@protoc_insertion_point(field_get:szconfig.ExportConfigResponse.result)
  return _internal_result();
}
inline void ExportConfigResponse::set_result(const std::string& value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:szconfig.ExportConfigResponse.result)
}
inline std::string* ExportConfigResponse::mutable_result() {
  // @@protoc_insertion_point(field_mutable:szconfig.ExportConfigResponse.result)
  return _internal_mutable_result();
}
inline const std::string& ExportConfigResponse::_internal_result() const {
  return result_.Get();
}
inline void ExportConfigResponse::_internal_set_result(const std::string& value) {
  
  result_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ExportConfigResponse::set_result(std::string&& value) {
  
  result_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:szconfig.ExportConfigResponse.result)
}
inline void ExportConfigResponse::set_result(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  result_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:szconfig.ExportConfigResponse.result)
}
inline void ExportConfigResponse::set_result(const char* value,
    size_t size) {
  
  result_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:szconfig.ExportConfigResponse.result)
}
inline std::string* ExportConfigResponse::_internal_mutable_result() {
  
  return result_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ExportConfigResponse::release_result() {
  // @@protoc_insertion_point(field_release:szconfig.ExportConfigResponse.result)
  return result_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ExportConfigResponse::set_allocated_result(std::string* result) {
  if (result != nullptr) {
    
  } else {
    
  }
  result_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), result,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:szconfig.ExportConfigResponse.result)
}
inline std::string* ExportConfigResponse::unsafe_arena_release_result() {
  // @@protoc_insertion_point(field_unsafe_arena_release:szconfig.ExportConfigResponse.result)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return result_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ExportConfigResponse::unsafe_arena_set_allocated_result(
    std::string* result) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (result != nullptr) {
    
  } else {
    
  }
  result_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      result, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:szconfig.ExportConfigResponse.result)
}

// -------------------------------------------------------------------

// GetDataSourcesRequest

// int64 configHandle = 1;
inline void GetDataSourcesRequest::clear_confighandle() {
  confighandle_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GetDataSourcesRequest::_internal_confighandle() const {
  return confighandle_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GetDataSourcesRequest::confighandle() const {
  // @@protoc_insertion_point(field_get:szconfig.GetDataSourcesRequest.configHandle)
  return _internal_confighandle();
}
inline void GetDataSourcesRequest::_internal_set_confighandle(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  confighandle_ = value;
}
inline void GetDataSourcesRequest::set_confighandle(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_confighandle(value);
  // @@protoc_insertion_point(field_set:szconfig.GetDataSourcesRequest.configHandle)
}

// -------------------------------------------------------------------

// GetDataSourcesResponse

// string result = 1;
inline void GetDataSourcesResponse::clear_result() {
  result_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GetDataSourcesResponse::result() const {
  // @@protoc_insertion_point(field_get:szconfig.GetDataSourcesResponse.result)
  return _internal_result();
}
inline void GetDataSourcesResponse::set_result(const std::string& value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:szconfig.GetDataSourcesResponse.result)
}
inline std::string* GetDataSourcesResponse::mutable_result() {
  // @@protoc_insertion_point(field_mutable:szconfig.GetDataSourcesResponse.result)
  return _internal_mutable_result();
}
inline const std::string& GetDataSourcesResponse::_internal_result() const {
  return result_.Get();
}
inline void GetDataSourcesResponse::_internal_set_result(const std::string& value) {
  
  result_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetDataSourcesResponse::set_result(std::string&& value) {
  
  result_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:szconfig.GetDataSourcesResponse.result)
}
inline void GetDataSourcesResponse::set_result(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  result_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:szconfig.GetDataSourcesResponse.result)
}
inline void GetDataSourcesResponse::set_result(const char* value,
    size_t size) {
  
  result_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:szconfig.GetDataSourcesResponse.result)
}
inline std::string* GetDataSourcesResponse::_internal_mutable_result() {
  
  return result_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetDataSourcesResponse::release_result() {
  // @@protoc_insertion_point(field_release:szconfig.GetDataSourcesResponse.result)
  return result_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetDataSourcesResponse::set_allocated_result(std::string* result) {
  if (result != nullptr) {
    
  } else {
    
  }
  result_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), result,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:szconfig.GetDataSourcesResponse.result)
}
inline std::string* GetDataSourcesResponse::unsafe_arena_release_result() {
  // @@protoc_insertion_point(field_unsafe_arena_release:szconfig.GetDataSourcesResponse.result)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return result_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void GetDataSourcesResponse::unsafe_arena_set_allocated_result(
    std::string* result) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (result != nullptr) {
    
  } else {
    
  }
  result_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      result, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:szconfig.GetDataSourcesResponse.result)
}

// -------------------------------------------------------------------

// ImportConfigRequest

// string configDefinition = 1;
inline void ImportConfigRequest::clear_configdefinition() {
  configdefinition_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ImportConfigRequest::configdefinition() const {
  // @@protoc_insertion_point(field_get:szconfig.ImportConfigRequest.configDefinition)
  return _internal_configdefinition();
}
inline void ImportConfigRequest::set_configdefinition(const std::string& value) {
  _internal_set_configdefinition(value);
  // @@protoc_insertion_point(field_set:szconfig.ImportConfigRequest.configDefinition)
}
inline std::string* ImportConfigRequest::mutable_configdefinition() {
  // @@protoc_insertion_point(field_mutable:szconfig.ImportConfigRequest.configDefinition)
  return _internal_mutable_configdefinition();
}
inline const std::string& ImportConfigRequest::_internal_configdefinition() const {
  return configdefinition_.Get();
}
inline void ImportConfigRequest::_internal_set_configdefinition(const std::string& value) {
  
  configdefinition_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ImportConfigRequest::set_configdefinition(std::string&& value) {
  
  configdefinition_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:szconfig.ImportConfigRequest.configDefinition)
}
inline void ImportConfigRequest::set_configdefinition(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  configdefinition_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:szconfig.ImportConfigRequest.configDefinition)
}
inline void ImportConfigRequest::set_configdefinition(const char* value,
    size_t size) {
  
  configdefinition_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:szconfig.ImportConfigRequest.configDefinition)
}
inline std::string* ImportConfigRequest::_internal_mutable_configdefinition() {
  
  return configdefinition_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ImportConfigRequest::release_configdefinition() {
  // @@protoc_insertion_point(field_release:szconfig.ImportConfigRequest.configDefinition)
  return configdefinition_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ImportConfigRequest::set_allocated_configdefinition(std::string* configdefinition) {
  if (configdefinition != nullptr) {
    
  } else {
    
  }
  configdefinition_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), configdefinition,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:szconfig.ImportConfigRequest.configDefinition)
}
inline std::string* ImportConfigRequest::unsafe_arena_release_configdefinition() {
  // @@protoc_insertion_point(field_unsafe_arena_release:szconfig.ImportConfigRequest.configDefinition)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return configdefinition_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ImportConfigRequest::unsafe_arena_set_allocated_configdefinition(
    std::string* configdefinition) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (configdefinition != nullptr) {
    
  } else {
    
  }
  configdefinition_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      configdefinition, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:szconfig.ImportConfigRequest.configDefinition)
}

// -------------------------------------------------------------------

// ImportConfigResponse

// int64 result = 1;
inline void ImportConfigResponse::clear_result() {
  result_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ImportConfigResponse::_internal_result() const {
  return result_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ImportConfigResponse::result() const {
  // @@protoc_insertion_point(field_get:szconfig.ImportConfigResponse.result)
  return _internal_result();
}
inline void ImportConfigResponse::_internal_set_result(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  result_ = value;
}
inline void ImportConfigResponse::set_result(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:szconfig.ImportConfigResponse.result)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace szconfig

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_szconfig_2eproto
