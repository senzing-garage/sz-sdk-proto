// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: szconfig.proto
#ifndef GRPC_szconfig_2eproto__INCLUDED
#define GRPC_szconfig_2eproto__INCLUDED

#include "szconfig.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace szconfig {

class SzConfig final {
 public:
  static constexpr char const* service_full_name() {
    return "szconfig.SzConfig";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status RegisterDataSource(::grpc::ClientContext* context, const ::szconfig::RegisterDataSourceRequest& request, ::szconfig::RegisterDataSourceResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::szconfig::RegisterDataSourceResponse>> AsyncRegisterDataSource(::grpc::ClientContext* context, const ::szconfig::RegisterDataSourceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::szconfig::RegisterDataSourceResponse>>(AsyncRegisterDataSourceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::szconfig::RegisterDataSourceResponse>> PrepareAsyncRegisterDataSource(::grpc::ClientContext* context, const ::szconfig::RegisterDataSourceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::szconfig::RegisterDataSourceResponse>>(PrepareAsyncRegisterDataSourceRaw(context, request, cq));
    }
    virtual ::grpc::Status UnregisterDataSource(::grpc::ClientContext* context, const ::szconfig::UnregisterDataSourceRequest& request, ::szconfig::UnregisterDataSourceResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::szconfig::UnregisterDataSourceResponse>> AsyncUnregisterDataSource(::grpc::ClientContext* context, const ::szconfig::UnregisterDataSourceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::szconfig::UnregisterDataSourceResponse>>(AsyncUnregisterDataSourceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::szconfig::UnregisterDataSourceResponse>> PrepareAsyncUnregisterDataSource(::grpc::ClientContext* context, const ::szconfig::UnregisterDataSourceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::szconfig::UnregisterDataSourceResponse>>(PrepareAsyncUnregisterDataSourceRaw(context, request, cq));
    }
    virtual ::grpc::Status GetDataSourceRegistry(::grpc::ClientContext* context, const ::szconfig::GetDataSourceRegistryRequest& request, ::szconfig::GetDataSourceRegistryResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::szconfig::GetDataSourceRegistryResponse>> AsyncGetDataSourceRegistry(::grpc::ClientContext* context, const ::szconfig::GetDataSourceRegistryRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::szconfig::GetDataSourceRegistryResponse>>(AsyncGetDataSourceRegistryRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::szconfig::GetDataSourceRegistryResponse>> PrepareAsyncGetDataSourceRegistry(::grpc::ClientContext* context, const ::szconfig::GetDataSourceRegistryRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::szconfig::GetDataSourceRegistryResponse>>(PrepareAsyncGetDataSourceRegistryRaw(context, request, cq));
    }
    virtual ::grpc::Status VerifyConfig(::grpc::ClientContext* context, const ::szconfig::VerifyConfigRequest& request, ::szconfig::VerifyConfigResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::szconfig::VerifyConfigResponse>> AsyncVerifyConfig(::grpc::ClientContext* context, const ::szconfig::VerifyConfigRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::szconfig::VerifyConfigResponse>>(AsyncVerifyConfigRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::szconfig::VerifyConfigResponse>> PrepareAsyncVerifyConfig(::grpc::ClientContext* context, const ::szconfig::VerifyConfigRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::szconfig::VerifyConfigResponse>>(PrepareAsyncVerifyConfigRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void RegisterDataSource(::grpc::ClientContext* context, const ::szconfig::RegisterDataSourceRequest* request, ::szconfig::RegisterDataSourceResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void RegisterDataSource(::grpc::ClientContext* context, const ::szconfig::RegisterDataSourceRequest* request, ::szconfig::RegisterDataSourceResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void UnregisterDataSource(::grpc::ClientContext* context, const ::szconfig::UnregisterDataSourceRequest* request, ::szconfig::UnregisterDataSourceResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void UnregisterDataSource(::grpc::ClientContext* context, const ::szconfig::UnregisterDataSourceRequest* request, ::szconfig::UnregisterDataSourceResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetDataSourceRegistry(::grpc::ClientContext* context, const ::szconfig::GetDataSourceRegistryRequest* request, ::szconfig::GetDataSourceRegistryResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetDataSourceRegistry(::grpc::ClientContext* context, const ::szconfig::GetDataSourceRegistryRequest* request, ::szconfig::GetDataSourceRegistryResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void VerifyConfig(::grpc::ClientContext* context, const ::szconfig::VerifyConfigRequest* request, ::szconfig::VerifyConfigResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void VerifyConfig(::grpc::ClientContext* context, const ::szconfig::VerifyConfigRequest* request, ::szconfig::VerifyConfigResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::szconfig::RegisterDataSourceResponse>* AsyncRegisterDataSourceRaw(::grpc::ClientContext* context, const ::szconfig::RegisterDataSourceRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::szconfig::RegisterDataSourceResponse>* PrepareAsyncRegisterDataSourceRaw(::grpc::ClientContext* context, const ::szconfig::RegisterDataSourceRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::szconfig::UnregisterDataSourceResponse>* AsyncUnregisterDataSourceRaw(::grpc::ClientContext* context, const ::szconfig::UnregisterDataSourceRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::szconfig::UnregisterDataSourceResponse>* PrepareAsyncUnregisterDataSourceRaw(::grpc::ClientContext* context, const ::szconfig::UnregisterDataSourceRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::szconfig::GetDataSourceRegistryResponse>* AsyncGetDataSourceRegistryRaw(::grpc::ClientContext* context, const ::szconfig::GetDataSourceRegistryRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::szconfig::GetDataSourceRegistryResponse>* PrepareAsyncGetDataSourceRegistryRaw(::grpc::ClientContext* context, const ::szconfig::GetDataSourceRegistryRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::szconfig::VerifyConfigResponse>* AsyncVerifyConfigRaw(::grpc::ClientContext* context, const ::szconfig::VerifyConfigRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::szconfig::VerifyConfigResponse>* PrepareAsyncVerifyConfigRaw(::grpc::ClientContext* context, const ::szconfig::VerifyConfigRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status RegisterDataSource(::grpc::ClientContext* context, const ::szconfig::RegisterDataSourceRequest& request, ::szconfig::RegisterDataSourceResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::szconfig::RegisterDataSourceResponse>> AsyncRegisterDataSource(::grpc::ClientContext* context, const ::szconfig::RegisterDataSourceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::szconfig::RegisterDataSourceResponse>>(AsyncRegisterDataSourceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::szconfig::RegisterDataSourceResponse>> PrepareAsyncRegisterDataSource(::grpc::ClientContext* context, const ::szconfig::RegisterDataSourceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::szconfig::RegisterDataSourceResponse>>(PrepareAsyncRegisterDataSourceRaw(context, request, cq));
    }
    ::grpc::Status UnregisterDataSource(::grpc::ClientContext* context, const ::szconfig::UnregisterDataSourceRequest& request, ::szconfig::UnregisterDataSourceResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::szconfig::UnregisterDataSourceResponse>> AsyncUnregisterDataSource(::grpc::ClientContext* context, const ::szconfig::UnregisterDataSourceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::szconfig::UnregisterDataSourceResponse>>(AsyncUnregisterDataSourceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::szconfig::UnregisterDataSourceResponse>> PrepareAsyncUnregisterDataSource(::grpc::ClientContext* context, const ::szconfig::UnregisterDataSourceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::szconfig::UnregisterDataSourceResponse>>(PrepareAsyncUnregisterDataSourceRaw(context, request, cq));
    }
    ::grpc::Status GetDataSourceRegistry(::grpc::ClientContext* context, const ::szconfig::GetDataSourceRegistryRequest& request, ::szconfig::GetDataSourceRegistryResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::szconfig::GetDataSourceRegistryResponse>> AsyncGetDataSourceRegistry(::grpc::ClientContext* context, const ::szconfig::GetDataSourceRegistryRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::szconfig::GetDataSourceRegistryResponse>>(AsyncGetDataSourceRegistryRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::szconfig::GetDataSourceRegistryResponse>> PrepareAsyncGetDataSourceRegistry(::grpc::ClientContext* context, const ::szconfig::GetDataSourceRegistryRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::szconfig::GetDataSourceRegistryResponse>>(PrepareAsyncGetDataSourceRegistryRaw(context, request, cq));
    }
    ::grpc::Status VerifyConfig(::grpc::ClientContext* context, const ::szconfig::VerifyConfigRequest& request, ::szconfig::VerifyConfigResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::szconfig::VerifyConfigResponse>> AsyncVerifyConfig(::grpc::ClientContext* context, const ::szconfig::VerifyConfigRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::szconfig::VerifyConfigResponse>>(AsyncVerifyConfigRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::szconfig::VerifyConfigResponse>> PrepareAsyncVerifyConfig(::grpc::ClientContext* context, const ::szconfig::VerifyConfigRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::szconfig::VerifyConfigResponse>>(PrepareAsyncVerifyConfigRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void RegisterDataSource(::grpc::ClientContext* context, const ::szconfig::RegisterDataSourceRequest* request, ::szconfig::RegisterDataSourceResponse* response, std::function<void(::grpc::Status)>) override;
      void RegisterDataSource(::grpc::ClientContext* context, const ::szconfig::RegisterDataSourceRequest* request, ::szconfig::RegisterDataSourceResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void UnregisterDataSource(::grpc::ClientContext* context, const ::szconfig::UnregisterDataSourceRequest* request, ::szconfig::UnregisterDataSourceResponse* response, std::function<void(::grpc::Status)>) override;
      void UnregisterDataSource(::grpc::ClientContext* context, const ::szconfig::UnregisterDataSourceRequest* request, ::szconfig::UnregisterDataSourceResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetDataSourceRegistry(::grpc::ClientContext* context, const ::szconfig::GetDataSourceRegistryRequest* request, ::szconfig::GetDataSourceRegistryResponse* response, std::function<void(::grpc::Status)>) override;
      void GetDataSourceRegistry(::grpc::ClientContext* context, const ::szconfig::GetDataSourceRegistryRequest* request, ::szconfig::GetDataSourceRegistryResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void VerifyConfig(::grpc::ClientContext* context, const ::szconfig::VerifyConfigRequest* request, ::szconfig::VerifyConfigResponse* response, std::function<void(::grpc::Status)>) override;
      void VerifyConfig(::grpc::ClientContext* context, const ::szconfig::VerifyConfigRequest* request, ::szconfig::VerifyConfigResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::szconfig::RegisterDataSourceResponse>* AsyncRegisterDataSourceRaw(::grpc::ClientContext* context, const ::szconfig::RegisterDataSourceRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::szconfig::RegisterDataSourceResponse>* PrepareAsyncRegisterDataSourceRaw(::grpc::ClientContext* context, const ::szconfig::RegisterDataSourceRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::szconfig::UnregisterDataSourceResponse>* AsyncUnregisterDataSourceRaw(::grpc::ClientContext* context, const ::szconfig::UnregisterDataSourceRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::szconfig::UnregisterDataSourceResponse>* PrepareAsyncUnregisterDataSourceRaw(::grpc::ClientContext* context, const ::szconfig::UnregisterDataSourceRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::szconfig::GetDataSourceRegistryResponse>* AsyncGetDataSourceRegistryRaw(::grpc::ClientContext* context, const ::szconfig::GetDataSourceRegistryRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::szconfig::GetDataSourceRegistryResponse>* PrepareAsyncGetDataSourceRegistryRaw(::grpc::ClientContext* context, const ::szconfig::GetDataSourceRegistryRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::szconfig::VerifyConfigResponse>* AsyncVerifyConfigRaw(::grpc::ClientContext* context, const ::szconfig::VerifyConfigRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::szconfig::VerifyConfigResponse>* PrepareAsyncVerifyConfigRaw(::grpc::ClientContext* context, const ::szconfig::VerifyConfigRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_RegisterDataSource_;
    const ::grpc::internal::RpcMethod rpcmethod_UnregisterDataSource_;
    const ::grpc::internal::RpcMethod rpcmethod_GetDataSourceRegistry_;
    const ::grpc::internal::RpcMethod rpcmethod_VerifyConfig_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status RegisterDataSource(::grpc::ServerContext* context, const ::szconfig::RegisterDataSourceRequest* request, ::szconfig::RegisterDataSourceResponse* response);
    virtual ::grpc::Status UnregisterDataSource(::grpc::ServerContext* context, const ::szconfig::UnregisterDataSourceRequest* request, ::szconfig::UnregisterDataSourceResponse* response);
    virtual ::grpc::Status GetDataSourceRegistry(::grpc::ServerContext* context, const ::szconfig::GetDataSourceRegistryRequest* request, ::szconfig::GetDataSourceRegistryResponse* response);
    virtual ::grpc::Status VerifyConfig(::grpc::ServerContext* context, const ::szconfig::VerifyConfigRequest* request, ::szconfig::VerifyConfigResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_RegisterDataSource : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_RegisterDataSource() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_RegisterDataSource() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RegisterDataSource(::grpc::ServerContext* /*context*/, const ::szconfig::RegisterDataSourceRequest* /*request*/, ::szconfig::RegisterDataSourceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRegisterDataSource(::grpc::ServerContext* context, ::szconfig::RegisterDataSourceRequest* request, ::grpc::ServerAsyncResponseWriter< ::szconfig::RegisterDataSourceResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_UnregisterDataSource : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_UnregisterDataSource() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_UnregisterDataSource() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UnregisterDataSource(::grpc::ServerContext* /*context*/, const ::szconfig::UnregisterDataSourceRequest* /*request*/, ::szconfig::UnregisterDataSourceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUnregisterDataSource(::grpc::ServerContext* context, ::szconfig::UnregisterDataSourceRequest* request, ::grpc::ServerAsyncResponseWriter< ::szconfig::UnregisterDataSourceResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetDataSourceRegistry : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetDataSourceRegistry() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_GetDataSourceRegistry() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetDataSourceRegistry(::grpc::ServerContext* /*context*/, const ::szconfig::GetDataSourceRegistryRequest* /*request*/, ::szconfig::GetDataSourceRegistryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetDataSourceRegistry(::grpc::ServerContext* context, ::szconfig::GetDataSourceRegistryRequest* request, ::grpc::ServerAsyncResponseWriter< ::szconfig::GetDataSourceRegistryResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_VerifyConfig : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_VerifyConfig() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_VerifyConfig() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status VerifyConfig(::grpc::ServerContext* /*context*/, const ::szconfig::VerifyConfigRequest* /*request*/, ::szconfig::VerifyConfigResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestVerifyConfig(::grpc::ServerContext* context, ::szconfig::VerifyConfigRequest* request, ::grpc::ServerAsyncResponseWriter< ::szconfig::VerifyConfigResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_RegisterDataSource<WithAsyncMethod_UnregisterDataSource<WithAsyncMethod_GetDataSourceRegistry<WithAsyncMethod_VerifyConfig<Service > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_RegisterDataSource : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_RegisterDataSource() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::szconfig::RegisterDataSourceRequest, ::szconfig::RegisterDataSourceResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::szconfig::RegisterDataSourceRequest* request, ::szconfig::RegisterDataSourceResponse* response) { return this->RegisterDataSource(context, request, response); }));}
    void SetMessageAllocatorFor_RegisterDataSource(
        ::grpc::MessageAllocator< ::szconfig::RegisterDataSourceRequest, ::szconfig::RegisterDataSourceResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::szconfig::RegisterDataSourceRequest, ::szconfig::RegisterDataSourceResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_RegisterDataSource() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RegisterDataSource(::grpc::ServerContext* /*context*/, const ::szconfig::RegisterDataSourceRequest* /*request*/, ::szconfig::RegisterDataSourceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* RegisterDataSource(
      ::grpc::CallbackServerContext* /*context*/, const ::szconfig::RegisterDataSourceRequest* /*request*/, ::szconfig::RegisterDataSourceResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_UnregisterDataSource : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_UnregisterDataSource() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::szconfig::UnregisterDataSourceRequest, ::szconfig::UnregisterDataSourceResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::szconfig::UnregisterDataSourceRequest* request, ::szconfig::UnregisterDataSourceResponse* response) { return this->UnregisterDataSource(context, request, response); }));}
    void SetMessageAllocatorFor_UnregisterDataSource(
        ::grpc::MessageAllocator< ::szconfig::UnregisterDataSourceRequest, ::szconfig::UnregisterDataSourceResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::szconfig::UnregisterDataSourceRequest, ::szconfig::UnregisterDataSourceResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_UnregisterDataSource() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UnregisterDataSource(::grpc::ServerContext* /*context*/, const ::szconfig::UnregisterDataSourceRequest* /*request*/, ::szconfig::UnregisterDataSourceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* UnregisterDataSource(
      ::grpc::CallbackServerContext* /*context*/, const ::szconfig::UnregisterDataSourceRequest* /*request*/, ::szconfig::UnregisterDataSourceResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetDataSourceRegistry : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetDataSourceRegistry() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::szconfig::GetDataSourceRegistryRequest, ::szconfig::GetDataSourceRegistryResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::szconfig::GetDataSourceRegistryRequest* request, ::szconfig::GetDataSourceRegistryResponse* response) { return this->GetDataSourceRegistry(context, request, response); }));}
    void SetMessageAllocatorFor_GetDataSourceRegistry(
        ::grpc::MessageAllocator< ::szconfig::GetDataSourceRegistryRequest, ::szconfig::GetDataSourceRegistryResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::szconfig::GetDataSourceRegistryRequest, ::szconfig::GetDataSourceRegistryResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetDataSourceRegistry() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetDataSourceRegistry(::grpc::ServerContext* /*context*/, const ::szconfig::GetDataSourceRegistryRequest* /*request*/, ::szconfig::GetDataSourceRegistryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetDataSourceRegistry(
      ::grpc::CallbackServerContext* /*context*/, const ::szconfig::GetDataSourceRegistryRequest* /*request*/, ::szconfig::GetDataSourceRegistryResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_VerifyConfig : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_VerifyConfig() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::szconfig::VerifyConfigRequest, ::szconfig::VerifyConfigResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::szconfig::VerifyConfigRequest* request, ::szconfig::VerifyConfigResponse* response) { return this->VerifyConfig(context, request, response); }));}
    void SetMessageAllocatorFor_VerifyConfig(
        ::grpc::MessageAllocator< ::szconfig::VerifyConfigRequest, ::szconfig::VerifyConfigResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::szconfig::VerifyConfigRequest, ::szconfig::VerifyConfigResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_VerifyConfig() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status VerifyConfig(::grpc::ServerContext* /*context*/, const ::szconfig::VerifyConfigRequest* /*request*/, ::szconfig::VerifyConfigResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* VerifyConfig(
      ::grpc::CallbackServerContext* /*context*/, const ::szconfig::VerifyConfigRequest* /*request*/, ::szconfig::VerifyConfigResponse* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_RegisterDataSource<WithCallbackMethod_UnregisterDataSource<WithCallbackMethod_GetDataSourceRegistry<WithCallbackMethod_VerifyConfig<Service > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_RegisterDataSource : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_RegisterDataSource() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_RegisterDataSource() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RegisterDataSource(::grpc::ServerContext* /*context*/, const ::szconfig::RegisterDataSourceRequest* /*request*/, ::szconfig::RegisterDataSourceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_UnregisterDataSource : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_UnregisterDataSource() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_UnregisterDataSource() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UnregisterDataSource(::grpc::ServerContext* /*context*/, const ::szconfig::UnregisterDataSourceRequest* /*request*/, ::szconfig::UnregisterDataSourceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetDataSourceRegistry : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetDataSourceRegistry() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_GetDataSourceRegistry() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetDataSourceRegistry(::grpc::ServerContext* /*context*/, const ::szconfig::GetDataSourceRegistryRequest* /*request*/, ::szconfig::GetDataSourceRegistryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_VerifyConfig : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_VerifyConfig() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_VerifyConfig() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status VerifyConfig(::grpc::ServerContext* /*context*/, const ::szconfig::VerifyConfigRequest* /*request*/, ::szconfig::VerifyConfigResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_RegisterDataSource : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_RegisterDataSource() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_RegisterDataSource() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RegisterDataSource(::grpc::ServerContext* /*context*/, const ::szconfig::RegisterDataSourceRequest* /*request*/, ::szconfig::RegisterDataSourceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRegisterDataSource(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_UnregisterDataSource : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_UnregisterDataSource() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_UnregisterDataSource() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UnregisterDataSource(::grpc::ServerContext* /*context*/, const ::szconfig::UnregisterDataSourceRequest* /*request*/, ::szconfig::UnregisterDataSourceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUnregisterDataSource(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetDataSourceRegistry : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetDataSourceRegistry() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_GetDataSourceRegistry() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetDataSourceRegistry(::grpc::ServerContext* /*context*/, const ::szconfig::GetDataSourceRegistryRequest* /*request*/, ::szconfig::GetDataSourceRegistryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetDataSourceRegistry(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_VerifyConfig : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_VerifyConfig() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_VerifyConfig() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status VerifyConfig(::grpc::ServerContext* /*context*/, const ::szconfig::VerifyConfigRequest* /*request*/, ::szconfig::VerifyConfigResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestVerifyConfig(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_RegisterDataSource : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_RegisterDataSource() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->RegisterDataSource(context, request, response); }));
    }
    ~WithRawCallbackMethod_RegisterDataSource() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RegisterDataSource(::grpc::ServerContext* /*context*/, const ::szconfig::RegisterDataSourceRequest* /*request*/, ::szconfig::RegisterDataSourceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* RegisterDataSource(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_UnregisterDataSource : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_UnregisterDataSource() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->UnregisterDataSource(context, request, response); }));
    }
    ~WithRawCallbackMethod_UnregisterDataSource() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UnregisterDataSource(::grpc::ServerContext* /*context*/, const ::szconfig::UnregisterDataSourceRequest* /*request*/, ::szconfig::UnregisterDataSourceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* UnregisterDataSource(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetDataSourceRegistry : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetDataSourceRegistry() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetDataSourceRegistry(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetDataSourceRegistry() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetDataSourceRegistry(::grpc::ServerContext* /*context*/, const ::szconfig::GetDataSourceRegistryRequest* /*request*/, ::szconfig::GetDataSourceRegistryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetDataSourceRegistry(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_VerifyConfig : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_VerifyConfig() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->VerifyConfig(context, request, response); }));
    }
    ~WithRawCallbackMethod_VerifyConfig() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status VerifyConfig(::grpc::ServerContext* /*context*/, const ::szconfig::VerifyConfigRequest* /*request*/, ::szconfig::VerifyConfigResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* VerifyConfig(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_RegisterDataSource : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_RegisterDataSource() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::szconfig::RegisterDataSourceRequest, ::szconfig::RegisterDataSourceResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::szconfig::RegisterDataSourceRequest, ::szconfig::RegisterDataSourceResponse>* streamer) {
                       return this->StreamedRegisterDataSource(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_RegisterDataSource() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status RegisterDataSource(::grpc::ServerContext* /*context*/, const ::szconfig::RegisterDataSourceRequest* /*request*/, ::szconfig::RegisterDataSourceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedRegisterDataSource(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::szconfig::RegisterDataSourceRequest,::szconfig::RegisterDataSourceResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_UnregisterDataSource : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_UnregisterDataSource() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::szconfig::UnregisterDataSourceRequest, ::szconfig::UnregisterDataSourceResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::szconfig::UnregisterDataSourceRequest, ::szconfig::UnregisterDataSourceResponse>* streamer) {
                       return this->StreamedUnregisterDataSource(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_UnregisterDataSource() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status UnregisterDataSource(::grpc::ServerContext* /*context*/, const ::szconfig::UnregisterDataSourceRequest* /*request*/, ::szconfig::UnregisterDataSourceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUnregisterDataSource(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::szconfig::UnregisterDataSourceRequest,::szconfig::UnregisterDataSourceResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetDataSourceRegistry : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetDataSourceRegistry() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::szconfig::GetDataSourceRegistryRequest, ::szconfig::GetDataSourceRegistryResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::szconfig::GetDataSourceRegistryRequest, ::szconfig::GetDataSourceRegistryResponse>* streamer) {
                       return this->StreamedGetDataSourceRegistry(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetDataSourceRegistry() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetDataSourceRegistry(::grpc::ServerContext* /*context*/, const ::szconfig::GetDataSourceRegistryRequest* /*request*/, ::szconfig::GetDataSourceRegistryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetDataSourceRegistry(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::szconfig::GetDataSourceRegistryRequest,::szconfig::GetDataSourceRegistryResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_VerifyConfig : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_VerifyConfig() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::szconfig::VerifyConfigRequest, ::szconfig::VerifyConfigResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::szconfig::VerifyConfigRequest, ::szconfig::VerifyConfigResponse>* streamer) {
                       return this->StreamedVerifyConfig(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_VerifyConfig() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status VerifyConfig(::grpc::ServerContext* /*context*/, const ::szconfig::VerifyConfigRequest* /*request*/, ::szconfig::VerifyConfigResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedVerifyConfig(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::szconfig::VerifyConfigRequest,::szconfig::VerifyConfigResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_RegisterDataSource<WithStreamedUnaryMethod_UnregisterDataSource<WithStreamedUnaryMethod_GetDataSourceRegistry<WithStreamedUnaryMethod_VerifyConfig<Service > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_RegisterDataSource<WithStreamedUnaryMethod_UnregisterDataSource<WithStreamedUnaryMethod_GetDataSourceRegistry<WithStreamedUnaryMethod_VerifyConfig<Service > > > > StreamedService;
};

}  // namespace szconfig


#endif  // GRPC_szconfig_2eproto__INCLUDED
