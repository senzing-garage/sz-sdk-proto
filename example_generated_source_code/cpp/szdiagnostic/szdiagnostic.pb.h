// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: szdiagnostic.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_szdiagnostic_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_szdiagnostic_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_szdiagnostic_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_szdiagnostic_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[10]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_szdiagnostic_2eproto;
namespace szdiagnostic {
class CheckDatastorePerformanceRequest;
class CheckDatastorePerformanceRequestDefaultTypeInternal;
extern CheckDatastorePerformanceRequestDefaultTypeInternal _CheckDatastorePerformanceRequest_default_instance_;
class CheckDatastorePerformanceResponse;
class CheckDatastorePerformanceResponseDefaultTypeInternal;
extern CheckDatastorePerformanceResponseDefaultTypeInternal _CheckDatastorePerformanceResponse_default_instance_;
class GetDatastoreInfoRequest;
class GetDatastoreInfoRequestDefaultTypeInternal;
extern GetDatastoreInfoRequestDefaultTypeInternal _GetDatastoreInfoRequest_default_instance_;
class GetDatastoreInfoResponse;
class GetDatastoreInfoResponseDefaultTypeInternal;
extern GetDatastoreInfoResponseDefaultTypeInternal _GetDatastoreInfoResponse_default_instance_;
class GetFeatureRequest;
class GetFeatureRequestDefaultTypeInternal;
extern GetFeatureRequestDefaultTypeInternal _GetFeatureRequest_default_instance_;
class GetFeatureResponse;
class GetFeatureResponseDefaultTypeInternal;
extern GetFeatureResponseDefaultTypeInternal _GetFeatureResponse_default_instance_;
class PurgeRepositoryRequest;
class PurgeRepositoryRequestDefaultTypeInternal;
extern PurgeRepositoryRequestDefaultTypeInternal _PurgeRepositoryRequest_default_instance_;
class PurgeRepositoryResponse;
class PurgeRepositoryResponseDefaultTypeInternal;
extern PurgeRepositoryResponseDefaultTypeInternal _PurgeRepositoryResponse_default_instance_;
class ReinitializeRequest;
class ReinitializeRequestDefaultTypeInternal;
extern ReinitializeRequestDefaultTypeInternal _ReinitializeRequest_default_instance_;
class ReinitializeResponse;
class ReinitializeResponseDefaultTypeInternal;
extern ReinitializeResponseDefaultTypeInternal _ReinitializeResponse_default_instance_;
}  // namespace szdiagnostic
PROTOBUF_NAMESPACE_OPEN
template<> ::szdiagnostic::CheckDatastorePerformanceRequest* Arena::CreateMaybeMessage<::szdiagnostic::CheckDatastorePerformanceRequest>(Arena*);
template<> ::szdiagnostic::CheckDatastorePerformanceResponse* Arena::CreateMaybeMessage<::szdiagnostic::CheckDatastorePerformanceResponse>(Arena*);
template<> ::szdiagnostic::GetDatastoreInfoRequest* Arena::CreateMaybeMessage<::szdiagnostic::GetDatastoreInfoRequest>(Arena*);
template<> ::szdiagnostic::GetDatastoreInfoResponse* Arena::CreateMaybeMessage<::szdiagnostic::GetDatastoreInfoResponse>(Arena*);
template<> ::szdiagnostic::GetFeatureRequest* Arena::CreateMaybeMessage<::szdiagnostic::GetFeatureRequest>(Arena*);
template<> ::szdiagnostic::GetFeatureResponse* Arena::CreateMaybeMessage<::szdiagnostic::GetFeatureResponse>(Arena*);
template<> ::szdiagnostic::PurgeRepositoryRequest* Arena::CreateMaybeMessage<::szdiagnostic::PurgeRepositoryRequest>(Arena*);
template<> ::szdiagnostic::PurgeRepositoryResponse* Arena::CreateMaybeMessage<::szdiagnostic::PurgeRepositoryResponse>(Arena*);
template<> ::szdiagnostic::ReinitializeRequest* Arena::CreateMaybeMessage<::szdiagnostic::ReinitializeRequest>(Arena*);
template<> ::szdiagnostic::ReinitializeResponse* Arena::CreateMaybeMessage<::szdiagnostic::ReinitializeResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace szdiagnostic {

// ===================================================================

class CheckDatastorePerformanceRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:szdiagnostic.CheckDatastorePerformanceRequest) */ {
 public:
  inline CheckDatastorePerformanceRequest() : CheckDatastorePerformanceRequest(nullptr) {};
  virtual ~CheckDatastorePerformanceRequest();

  CheckDatastorePerformanceRequest(const CheckDatastorePerformanceRequest& from);
  CheckDatastorePerformanceRequest(CheckDatastorePerformanceRequest&& from) noexcept
    : CheckDatastorePerformanceRequest() {
    *this = ::std::move(from);
  }

  inline CheckDatastorePerformanceRequest& operator=(const CheckDatastorePerformanceRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CheckDatastorePerformanceRequest& operator=(CheckDatastorePerformanceRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CheckDatastorePerformanceRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CheckDatastorePerformanceRequest* internal_default_instance() {
    return reinterpret_cast<const CheckDatastorePerformanceRequest*>(
               &_CheckDatastorePerformanceRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CheckDatastorePerformanceRequest& a, CheckDatastorePerformanceRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CheckDatastorePerformanceRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CheckDatastorePerformanceRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CheckDatastorePerformanceRequest* New() const final {
    return CreateMaybeMessage<CheckDatastorePerformanceRequest>(nullptr);
  }

  CheckDatastorePerformanceRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CheckDatastorePerformanceRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CheckDatastorePerformanceRequest& from);
  void MergeFrom(const CheckDatastorePerformanceRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CheckDatastorePerformanceRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "szdiagnostic.CheckDatastorePerformanceRequest";
  }
  protected:
  explicit CheckDatastorePerformanceRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_szdiagnostic_2eproto);
    return ::descriptor_table_szdiagnostic_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSecondsToRunFieldNumber = 1,
  };
  // int32 secondsToRun = 1;
  void clear_secondstorun();
  ::PROTOBUF_NAMESPACE_ID::int32 secondstorun() const;
  void set_secondstorun(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_secondstorun() const;
  void _internal_set_secondstorun(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:szdiagnostic.CheckDatastorePerformanceRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 secondstorun_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_szdiagnostic_2eproto;
};
// -------------------------------------------------------------------

class CheckDatastorePerformanceResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:szdiagnostic.CheckDatastorePerformanceResponse) */ {
 public:
  inline CheckDatastorePerformanceResponse() : CheckDatastorePerformanceResponse(nullptr) {};
  virtual ~CheckDatastorePerformanceResponse();

  CheckDatastorePerformanceResponse(const CheckDatastorePerformanceResponse& from);
  CheckDatastorePerformanceResponse(CheckDatastorePerformanceResponse&& from) noexcept
    : CheckDatastorePerformanceResponse() {
    *this = ::std::move(from);
  }

  inline CheckDatastorePerformanceResponse& operator=(const CheckDatastorePerformanceResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CheckDatastorePerformanceResponse& operator=(CheckDatastorePerformanceResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CheckDatastorePerformanceResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CheckDatastorePerformanceResponse* internal_default_instance() {
    return reinterpret_cast<const CheckDatastorePerformanceResponse*>(
               &_CheckDatastorePerformanceResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CheckDatastorePerformanceResponse& a, CheckDatastorePerformanceResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CheckDatastorePerformanceResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CheckDatastorePerformanceResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CheckDatastorePerformanceResponse* New() const final {
    return CreateMaybeMessage<CheckDatastorePerformanceResponse>(nullptr);
  }

  CheckDatastorePerformanceResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CheckDatastorePerformanceResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CheckDatastorePerformanceResponse& from);
  void MergeFrom(const CheckDatastorePerformanceResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CheckDatastorePerformanceResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "szdiagnostic.CheckDatastorePerformanceResponse";
  }
  protected:
  explicit CheckDatastorePerformanceResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_szdiagnostic_2eproto);
    return ::descriptor_table_szdiagnostic_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
  };
  // string result = 1;
  void clear_result();
  const std::string& result() const;
  void set_result(const std::string& value);
  void set_result(std::string&& value);
  void set_result(const char* value);
  void set_result(const char* value, size_t size);
  std::string* mutable_result();
  std::string* release_result();
  void set_allocated_result(std::string* result);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_result();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_result(
      std::string* result);
  private:
  const std::string& _internal_result() const;
  void _internal_set_result(const std::string& value);
  std::string* _internal_mutable_result();
  public:

  // @@protoc_insertion_point(class_scope:szdiagnostic.CheckDatastorePerformanceResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_szdiagnostic_2eproto;
};
// -------------------------------------------------------------------

class GetDatastoreInfoRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:szdiagnostic.GetDatastoreInfoRequest) */ {
 public:
  inline GetDatastoreInfoRequest() : GetDatastoreInfoRequest(nullptr) {};
  virtual ~GetDatastoreInfoRequest();

  GetDatastoreInfoRequest(const GetDatastoreInfoRequest& from);
  GetDatastoreInfoRequest(GetDatastoreInfoRequest&& from) noexcept
    : GetDatastoreInfoRequest() {
    *this = ::std::move(from);
  }

  inline GetDatastoreInfoRequest& operator=(const GetDatastoreInfoRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetDatastoreInfoRequest& operator=(GetDatastoreInfoRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetDatastoreInfoRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetDatastoreInfoRequest* internal_default_instance() {
    return reinterpret_cast<const GetDatastoreInfoRequest*>(
               &_GetDatastoreInfoRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(GetDatastoreInfoRequest& a, GetDatastoreInfoRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetDatastoreInfoRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetDatastoreInfoRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetDatastoreInfoRequest* New() const final {
    return CreateMaybeMessage<GetDatastoreInfoRequest>(nullptr);
  }

  GetDatastoreInfoRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetDatastoreInfoRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetDatastoreInfoRequest& from);
  void MergeFrom(const GetDatastoreInfoRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetDatastoreInfoRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "szdiagnostic.GetDatastoreInfoRequest";
  }
  protected:
  explicit GetDatastoreInfoRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_szdiagnostic_2eproto);
    return ::descriptor_table_szdiagnostic_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:szdiagnostic.GetDatastoreInfoRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_szdiagnostic_2eproto;
};
// -------------------------------------------------------------------

class GetDatastoreInfoResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:szdiagnostic.GetDatastoreInfoResponse) */ {
 public:
  inline GetDatastoreInfoResponse() : GetDatastoreInfoResponse(nullptr) {};
  virtual ~GetDatastoreInfoResponse();

  GetDatastoreInfoResponse(const GetDatastoreInfoResponse& from);
  GetDatastoreInfoResponse(GetDatastoreInfoResponse&& from) noexcept
    : GetDatastoreInfoResponse() {
    *this = ::std::move(from);
  }

  inline GetDatastoreInfoResponse& operator=(const GetDatastoreInfoResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetDatastoreInfoResponse& operator=(GetDatastoreInfoResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetDatastoreInfoResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetDatastoreInfoResponse* internal_default_instance() {
    return reinterpret_cast<const GetDatastoreInfoResponse*>(
               &_GetDatastoreInfoResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(GetDatastoreInfoResponse& a, GetDatastoreInfoResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetDatastoreInfoResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetDatastoreInfoResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetDatastoreInfoResponse* New() const final {
    return CreateMaybeMessage<GetDatastoreInfoResponse>(nullptr);
  }

  GetDatastoreInfoResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetDatastoreInfoResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetDatastoreInfoResponse& from);
  void MergeFrom(const GetDatastoreInfoResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetDatastoreInfoResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "szdiagnostic.GetDatastoreInfoResponse";
  }
  protected:
  explicit GetDatastoreInfoResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_szdiagnostic_2eproto);
    return ::descriptor_table_szdiagnostic_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
  };
  // string result = 1;
  void clear_result();
  const std::string& result() const;
  void set_result(const std::string& value);
  void set_result(std::string&& value);
  void set_result(const char* value);
  void set_result(const char* value, size_t size);
  std::string* mutable_result();
  std::string* release_result();
  void set_allocated_result(std::string* result);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_result();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_result(
      std::string* result);
  private:
  const std::string& _internal_result() const;
  void _internal_set_result(const std::string& value);
  std::string* _internal_mutable_result();
  public:

  // @@protoc_insertion_point(class_scope:szdiagnostic.GetDatastoreInfoResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_szdiagnostic_2eproto;
};
// -------------------------------------------------------------------

class GetFeatureRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:szdiagnostic.GetFeatureRequest) */ {
 public:
  inline GetFeatureRequest() : GetFeatureRequest(nullptr) {};
  virtual ~GetFeatureRequest();

  GetFeatureRequest(const GetFeatureRequest& from);
  GetFeatureRequest(GetFeatureRequest&& from) noexcept
    : GetFeatureRequest() {
    *this = ::std::move(from);
  }

  inline GetFeatureRequest& operator=(const GetFeatureRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetFeatureRequest& operator=(GetFeatureRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetFeatureRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetFeatureRequest* internal_default_instance() {
    return reinterpret_cast<const GetFeatureRequest*>(
               &_GetFeatureRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(GetFeatureRequest& a, GetFeatureRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetFeatureRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetFeatureRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetFeatureRequest* New() const final {
    return CreateMaybeMessage<GetFeatureRequest>(nullptr);
  }

  GetFeatureRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetFeatureRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetFeatureRequest& from);
  void MergeFrom(const GetFeatureRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetFeatureRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "szdiagnostic.GetFeatureRequest";
  }
  protected:
  explicit GetFeatureRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_szdiagnostic_2eproto);
    return ::descriptor_table_szdiagnostic_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFeatureIdFieldNumber = 1,
  };
  // int64 featureId = 1;
  void clear_featureid();
  ::PROTOBUF_NAMESPACE_ID::int64 featureid() const;
  void set_featureid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_featureid() const;
  void _internal_set_featureid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:szdiagnostic.GetFeatureRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int64 featureid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_szdiagnostic_2eproto;
};
// -------------------------------------------------------------------

class GetFeatureResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:szdiagnostic.GetFeatureResponse) */ {
 public:
  inline GetFeatureResponse() : GetFeatureResponse(nullptr) {};
  virtual ~GetFeatureResponse();

  GetFeatureResponse(const GetFeatureResponse& from);
  GetFeatureResponse(GetFeatureResponse&& from) noexcept
    : GetFeatureResponse() {
    *this = ::std::move(from);
  }

  inline GetFeatureResponse& operator=(const GetFeatureResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetFeatureResponse& operator=(GetFeatureResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetFeatureResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetFeatureResponse* internal_default_instance() {
    return reinterpret_cast<const GetFeatureResponse*>(
               &_GetFeatureResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(GetFeatureResponse& a, GetFeatureResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetFeatureResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetFeatureResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetFeatureResponse* New() const final {
    return CreateMaybeMessage<GetFeatureResponse>(nullptr);
  }

  GetFeatureResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetFeatureResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetFeatureResponse& from);
  void MergeFrom(const GetFeatureResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetFeatureResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "szdiagnostic.GetFeatureResponse";
  }
  protected:
  explicit GetFeatureResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_szdiagnostic_2eproto);
    return ::descriptor_table_szdiagnostic_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
  };
  // string result = 1;
  void clear_result();
  const std::string& result() const;
  void set_result(const std::string& value);
  void set_result(std::string&& value);
  void set_result(const char* value);
  void set_result(const char* value, size_t size);
  std::string* mutable_result();
  std::string* release_result();
  void set_allocated_result(std::string* result);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_result();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_result(
      std::string* result);
  private:
  const std::string& _internal_result() const;
  void _internal_set_result(const std::string& value);
  std::string* _internal_mutable_result();
  public:

  // @@protoc_insertion_point(class_scope:szdiagnostic.GetFeatureResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_szdiagnostic_2eproto;
};
// -------------------------------------------------------------------

class PurgeRepositoryRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:szdiagnostic.PurgeRepositoryRequest) */ {
 public:
  inline PurgeRepositoryRequest() : PurgeRepositoryRequest(nullptr) {};
  virtual ~PurgeRepositoryRequest();

  PurgeRepositoryRequest(const PurgeRepositoryRequest& from);
  PurgeRepositoryRequest(PurgeRepositoryRequest&& from) noexcept
    : PurgeRepositoryRequest() {
    *this = ::std::move(from);
  }

  inline PurgeRepositoryRequest& operator=(const PurgeRepositoryRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PurgeRepositoryRequest& operator=(PurgeRepositoryRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PurgeRepositoryRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PurgeRepositoryRequest* internal_default_instance() {
    return reinterpret_cast<const PurgeRepositoryRequest*>(
               &_PurgeRepositoryRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(PurgeRepositoryRequest& a, PurgeRepositoryRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PurgeRepositoryRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PurgeRepositoryRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PurgeRepositoryRequest* New() const final {
    return CreateMaybeMessage<PurgeRepositoryRequest>(nullptr);
  }

  PurgeRepositoryRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PurgeRepositoryRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PurgeRepositoryRequest& from);
  void MergeFrom(const PurgeRepositoryRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PurgeRepositoryRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "szdiagnostic.PurgeRepositoryRequest";
  }
  protected:
  explicit PurgeRepositoryRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_szdiagnostic_2eproto);
    return ::descriptor_table_szdiagnostic_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:szdiagnostic.PurgeRepositoryRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_szdiagnostic_2eproto;
};
// -------------------------------------------------------------------

class PurgeRepositoryResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:szdiagnostic.PurgeRepositoryResponse) */ {
 public:
  inline PurgeRepositoryResponse() : PurgeRepositoryResponse(nullptr) {};
  virtual ~PurgeRepositoryResponse();

  PurgeRepositoryResponse(const PurgeRepositoryResponse& from);
  PurgeRepositoryResponse(PurgeRepositoryResponse&& from) noexcept
    : PurgeRepositoryResponse() {
    *this = ::std::move(from);
  }

  inline PurgeRepositoryResponse& operator=(const PurgeRepositoryResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline PurgeRepositoryResponse& operator=(PurgeRepositoryResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PurgeRepositoryResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PurgeRepositoryResponse* internal_default_instance() {
    return reinterpret_cast<const PurgeRepositoryResponse*>(
               &_PurgeRepositoryResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(PurgeRepositoryResponse& a, PurgeRepositoryResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(PurgeRepositoryResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PurgeRepositoryResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PurgeRepositoryResponse* New() const final {
    return CreateMaybeMessage<PurgeRepositoryResponse>(nullptr);
  }

  PurgeRepositoryResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PurgeRepositoryResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PurgeRepositoryResponse& from);
  void MergeFrom(const PurgeRepositoryResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PurgeRepositoryResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "szdiagnostic.PurgeRepositoryResponse";
  }
  protected:
  explicit PurgeRepositoryResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_szdiagnostic_2eproto);
    return ::descriptor_table_szdiagnostic_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:szdiagnostic.PurgeRepositoryResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_szdiagnostic_2eproto;
};
// -------------------------------------------------------------------

class ReinitializeRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:szdiagnostic.ReinitializeRequest) */ {
 public:
  inline ReinitializeRequest() : ReinitializeRequest(nullptr) {};
  virtual ~ReinitializeRequest();

  ReinitializeRequest(const ReinitializeRequest& from);
  ReinitializeRequest(ReinitializeRequest&& from) noexcept
    : ReinitializeRequest() {
    *this = ::std::move(from);
  }

  inline ReinitializeRequest& operator=(const ReinitializeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReinitializeRequest& operator=(ReinitializeRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ReinitializeRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReinitializeRequest* internal_default_instance() {
    return reinterpret_cast<const ReinitializeRequest*>(
               &_ReinitializeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(ReinitializeRequest& a, ReinitializeRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ReinitializeRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReinitializeRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReinitializeRequest* New() const final {
    return CreateMaybeMessage<ReinitializeRequest>(nullptr);
  }

  ReinitializeRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReinitializeRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReinitializeRequest& from);
  void MergeFrom(const ReinitializeRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReinitializeRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "szdiagnostic.ReinitializeRequest";
  }
  protected:
  explicit ReinitializeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_szdiagnostic_2eproto);
    return ::descriptor_table_szdiagnostic_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConfigIdFieldNumber = 1,
  };
  // int64 configId = 1;
  void clear_configid();
  ::PROTOBUF_NAMESPACE_ID::int64 configid() const;
  void set_configid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_configid() const;
  void _internal_set_configid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:szdiagnostic.ReinitializeRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int64 configid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_szdiagnostic_2eproto;
};
// -------------------------------------------------------------------

class ReinitializeResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:szdiagnostic.ReinitializeResponse) */ {
 public:
  inline ReinitializeResponse() : ReinitializeResponse(nullptr) {};
  virtual ~ReinitializeResponse();

  ReinitializeResponse(const ReinitializeResponse& from);
  ReinitializeResponse(ReinitializeResponse&& from) noexcept
    : ReinitializeResponse() {
    *this = ::std::move(from);
  }

  inline ReinitializeResponse& operator=(const ReinitializeResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReinitializeResponse& operator=(ReinitializeResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ReinitializeResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReinitializeResponse* internal_default_instance() {
    return reinterpret_cast<const ReinitializeResponse*>(
               &_ReinitializeResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(ReinitializeResponse& a, ReinitializeResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ReinitializeResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReinitializeResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReinitializeResponse* New() const final {
    return CreateMaybeMessage<ReinitializeResponse>(nullptr);
  }

  ReinitializeResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReinitializeResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReinitializeResponse& from);
  void MergeFrom(const ReinitializeResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReinitializeResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "szdiagnostic.ReinitializeResponse";
  }
  protected:
  explicit ReinitializeResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_szdiagnostic_2eproto);
    return ::descriptor_table_szdiagnostic_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:szdiagnostic.ReinitializeResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_szdiagnostic_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CheckDatastorePerformanceRequest

// int32 secondsToRun = 1;
inline void CheckDatastorePerformanceRequest::clear_secondstorun() {
  secondstorun_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CheckDatastorePerformanceRequest::_internal_secondstorun() const {
  return secondstorun_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CheckDatastorePerformanceRequest::secondstorun() const {
  // @@protoc_insertion_point(field_get:szdiagnostic.CheckDatastorePerformanceRequest.secondsToRun)
  return _internal_secondstorun();
}
inline void CheckDatastorePerformanceRequest::_internal_set_secondstorun(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  secondstorun_ = value;
}
inline void CheckDatastorePerformanceRequest::set_secondstorun(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_secondstorun(value);
  // @@protoc_insertion_point(field_set:szdiagnostic.CheckDatastorePerformanceRequest.secondsToRun)
}

// -------------------------------------------------------------------

// CheckDatastorePerformanceResponse

// string result = 1;
inline void CheckDatastorePerformanceResponse::clear_result() {
  result_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& CheckDatastorePerformanceResponse::result() const {
  // @@protoc_insertion_point(field_get:szdiagnostic.CheckDatastorePerformanceResponse.result)
  return _internal_result();
}
inline void CheckDatastorePerformanceResponse::set_result(const std::string& value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:szdiagnostic.CheckDatastorePerformanceResponse.result)
}
inline std::string* CheckDatastorePerformanceResponse::mutable_result() {
  // @@protoc_insertion_point(field_mutable:szdiagnostic.CheckDatastorePerformanceResponse.result)
  return _internal_mutable_result();
}
inline const std::string& CheckDatastorePerformanceResponse::_internal_result() const {
  return result_.Get();
}
inline void CheckDatastorePerformanceResponse::_internal_set_result(const std::string& value) {
  
  result_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CheckDatastorePerformanceResponse::set_result(std::string&& value) {
  
  result_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:szdiagnostic.CheckDatastorePerformanceResponse.result)
}
inline void CheckDatastorePerformanceResponse::set_result(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  result_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:szdiagnostic.CheckDatastorePerformanceResponse.result)
}
inline void CheckDatastorePerformanceResponse::set_result(const char* value,
    size_t size) {
  
  result_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:szdiagnostic.CheckDatastorePerformanceResponse.result)
}
inline std::string* CheckDatastorePerformanceResponse::_internal_mutable_result() {
  
  return result_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CheckDatastorePerformanceResponse::release_result() {
  // @@protoc_insertion_point(field_release:szdiagnostic.CheckDatastorePerformanceResponse.result)
  return result_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CheckDatastorePerformanceResponse::set_allocated_result(std::string* result) {
  if (result != nullptr) {
    
  } else {
    
  }
  result_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), result,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:szdiagnostic.CheckDatastorePerformanceResponse.result)
}
inline std::string* CheckDatastorePerformanceResponse::unsafe_arena_release_result() {
  // @@protoc_insertion_point(field_unsafe_arena_release:szdiagnostic.CheckDatastorePerformanceResponse.result)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return result_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void CheckDatastorePerformanceResponse::unsafe_arena_set_allocated_result(
    std::string* result) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (result != nullptr) {
    
  } else {
    
  }
  result_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      result, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:szdiagnostic.CheckDatastorePerformanceResponse.result)
}

// -------------------------------------------------------------------

// GetDatastoreInfoRequest

// -------------------------------------------------------------------

// GetDatastoreInfoResponse

// string result = 1;
inline void GetDatastoreInfoResponse::clear_result() {
  result_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GetDatastoreInfoResponse::result() const {
  // @@protoc_insertion_point(field_get:szdiagnostic.GetDatastoreInfoResponse.result)
  return _internal_result();
}
inline void GetDatastoreInfoResponse::set_result(const std::string& value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:szdiagnostic.GetDatastoreInfoResponse.result)
}
inline std::string* GetDatastoreInfoResponse::mutable_result() {
  // @@protoc_insertion_point(field_mutable:szdiagnostic.GetDatastoreInfoResponse.result)
  return _internal_mutable_result();
}
inline const std::string& GetDatastoreInfoResponse::_internal_result() const {
  return result_.Get();
}
inline void GetDatastoreInfoResponse::_internal_set_result(const std::string& value) {
  
  result_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetDatastoreInfoResponse::set_result(std::string&& value) {
  
  result_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:szdiagnostic.GetDatastoreInfoResponse.result)
}
inline void GetDatastoreInfoResponse::set_result(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  result_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:szdiagnostic.GetDatastoreInfoResponse.result)
}
inline void GetDatastoreInfoResponse::set_result(const char* value,
    size_t size) {
  
  result_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:szdiagnostic.GetDatastoreInfoResponse.result)
}
inline std::string* GetDatastoreInfoResponse::_internal_mutable_result() {
  
  return result_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetDatastoreInfoResponse::release_result() {
  // @@protoc_insertion_point(field_release:szdiagnostic.GetDatastoreInfoResponse.result)
  return result_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetDatastoreInfoResponse::set_allocated_result(std::string* result) {
  if (result != nullptr) {
    
  } else {
    
  }
  result_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), result,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:szdiagnostic.GetDatastoreInfoResponse.result)
}
inline std::string* GetDatastoreInfoResponse::unsafe_arena_release_result() {
  // @@protoc_insertion_point(field_unsafe_arena_release:szdiagnostic.GetDatastoreInfoResponse.result)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return result_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void GetDatastoreInfoResponse::unsafe_arena_set_allocated_result(
    std::string* result) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (result != nullptr) {
    
  } else {
    
  }
  result_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      result, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:szdiagnostic.GetDatastoreInfoResponse.result)
}

// -------------------------------------------------------------------

// GetFeatureRequest

// int64 featureId = 1;
inline void GetFeatureRequest::clear_featureid() {
  featureid_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GetFeatureRequest::_internal_featureid() const {
  return featureid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GetFeatureRequest::featureid() const {
  // @@protoc_insertion_point(field_get:szdiagnostic.GetFeatureRequest.featureId)
  return _internal_featureid();
}
inline void GetFeatureRequest::_internal_set_featureid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  featureid_ = value;
}
inline void GetFeatureRequest::set_featureid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_featureid(value);
  // @@protoc_insertion_point(field_set:szdiagnostic.GetFeatureRequest.featureId)
}

// -------------------------------------------------------------------

// GetFeatureResponse

// string result = 1;
inline void GetFeatureResponse::clear_result() {
  result_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GetFeatureResponse::result() const {
  // @@protoc_insertion_point(field_get:szdiagnostic.GetFeatureResponse.result)
  return _internal_result();
}
inline void GetFeatureResponse::set_result(const std::string& value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:szdiagnostic.GetFeatureResponse.result)
}
inline std::string* GetFeatureResponse::mutable_result() {
  // @@protoc_insertion_point(field_mutable:szdiagnostic.GetFeatureResponse.result)
  return _internal_mutable_result();
}
inline const std::string& GetFeatureResponse::_internal_result() const {
  return result_.Get();
}
inline void GetFeatureResponse::_internal_set_result(const std::string& value) {
  
  result_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetFeatureResponse::set_result(std::string&& value) {
  
  result_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:szdiagnostic.GetFeatureResponse.result)
}
inline void GetFeatureResponse::set_result(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  result_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:szdiagnostic.GetFeatureResponse.result)
}
inline void GetFeatureResponse::set_result(const char* value,
    size_t size) {
  
  result_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:szdiagnostic.GetFeatureResponse.result)
}
inline std::string* GetFeatureResponse::_internal_mutable_result() {
  
  return result_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetFeatureResponse::release_result() {
  // @@protoc_insertion_point(field_release:szdiagnostic.GetFeatureResponse.result)
  return result_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetFeatureResponse::set_allocated_result(std::string* result) {
  if (result != nullptr) {
    
  } else {
    
  }
  result_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), result,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:szdiagnostic.GetFeatureResponse.result)
}
inline std::string* GetFeatureResponse::unsafe_arena_release_result() {
  // @@protoc_insertion_point(field_unsafe_arena_release:szdiagnostic.GetFeatureResponse.result)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return result_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void GetFeatureResponse::unsafe_arena_set_allocated_result(
    std::string* result) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (result != nullptr) {
    
  } else {
    
  }
  result_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      result, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:szdiagnostic.GetFeatureResponse.result)
}

// -------------------------------------------------------------------

// PurgeRepositoryRequest

// -------------------------------------------------------------------

// PurgeRepositoryResponse

// -------------------------------------------------------------------

// ReinitializeRequest

// int64 configId = 1;
inline void ReinitializeRequest::clear_configid() {
  configid_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ReinitializeRequest::_internal_configid() const {
  return configid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ReinitializeRequest::configid() const {
  // @@protoc_insertion_point(field_get:szdiagnostic.ReinitializeRequest.configId)
  return _internal_configid();
}
inline void ReinitializeRequest::_internal_set_configid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  configid_ = value;
}
inline void ReinitializeRequest::set_configid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_configid(value);
  // @@protoc_insertion_point(field_set:szdiagnostic.ReinitializeRequest.configId)
}

// -------------------------------------------------------------------

// ReinitializeResponse

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace szdiagnostic

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_szdiagnostic_2eproto
