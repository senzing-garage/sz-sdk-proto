// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: szdiagnostic.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_szdiagnostic_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_szdiagnostic_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_szdiagnostic_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_szdiagnostic_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_szdiagnostic_2eproto;
namespace szdiagnostic {
class CheckDatastorePerformanceRequest;
struct CheckDatastorePerformanceRequestDefaultTypeInternal;
extern CheckDatastorePerformanceRequestDefaultTypeInternal _CheckDatastorePerformanceRequest_default_instance_;
class CheckDatastorePerformanceResponse;
struct CheckDatastorePerformanceResponseDefaultTypeInternal;
extern CheckDatastorePerformanceResponseDefaultTypeInternal _CheckDatastorePerformanceResponse_default_instance_;
class GetDatastoreInfoRequest;
struct GetDatastoreInfoRequestDefaultTypeInternal;
extern GetDatastoreInfoRequestDefaultTypeInternal _GetDatastoreInfoRequest_default_instance_;
class GetDatastoreInfoResponse;
struct GetDatastoreInfoResponseDefaultTypeInternal;
extern GetDatastoreInfoResponseDefaultTypeInternal _GetDatastoreInfoResponse_default_instance_;
class GetFeatureRequest;
struct GetFeatureRequestDefaultTypeInternal;
extern GetFeatureRequestDefaultTypeInternal _GetFeatureRequest_default_instance_;
class GetFeatureResponse;
struct GetFeatureResponseDefaultTypeInternal;
extern GetFeatureResponseDefaultTypeInternal _GetFeatureResponse_default_instance_;
class PurgeRepositoryRequest;
struct PurgeRepositoryRequestDefaultTypeInternal;
extern PurgeRepositoryRequestDefaultTypeInternal _PurgeRepositoryRequest_default_instance_;
class PurgeRepositoryResponse;
struct PurgeRepositoryResponseDefaultTypeInternal;
extern PurgeRepositoryResponseDefaultTypeInternal _PurgeRepositoryResponse_default_instance_;
class ReinitializeRequest;
struct ReinitializeRequestDefaultTypeInternal;
extern ReinitializeRequestDefaultTypeInternal _ReinitializeRequest_default_instance_;
class ReinitializeResponse;
struct ReinitializeResponseDefaultTypeInternal;
extern ReinitializeResponseDefaultTypeInternal _ReinitializeResponse_default_instance_;
}  // namespace szdiagnostic
PROTOBUF_NAMESPACE_OPEN
template<> ::szdiagnostic::CheckDatastorePerformanceRequest* Arena::CreateMaybeMessage<::szdiagnostic::CheckDatastorePerformanceRequest>(Arena*);
template<> ::szdiagnostic::CheckDatastorePerformanceResponse* Arena::CreateMaybeMessage<::szdiagnostic::CheckDatastorePerformanceResponse>(Arena*);
template<> ::szdiagnostic::GetDatastoreInfoRequest* Arena::CreateMaybeMessage<::szdiagnostic::GetDatastoreInfoRequest>(Arena*);
template<> ::szdiagnostic::GetDatastoreInfoResponse* Arena::CreateMaybeMessage<::szdiagnostic::GetDatastoreInfoResponse>(Arena*);
template<> ::szdiagnostic::GetFeatureRequest* Arena::CreateMaybeMessage<::szdiagnostic::GetFeatureRequest>(Arena*);
template<> ::szdiagnostic::GetFeatureResponse* Arena::CreateMaybeMessage<::szdiagnostic::GetFeatureResponse>(Arena*);
template<> ::szdiagnostic::PurgeRepositoryRequest* Arena::CreateMaybeMessage<::szdiagnostic::PurgeRepositoryRequest>(Arena*);
template<> ::szdiagnostic::PurgeRepositoryResponse* Arena::CreateMaybeMessage<::szdiagnostic::PurgeRepositoryResponse>(Arena*);
template<> ::szdiagnostic::ReinitializeRequest* Arena::CreateMaybeMessage<::szdiagnostic::ReinitializeRequest>(Arena*);
template<> ::szdiagnostic::ReinitializeResponse* Arena::CreateMaybeMessage<::szdiagnostic::ReinitializeResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace szdiagnostic {

// ===================================================================

class CheckDatastorePerformanceRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:szdiagnostic.CheckDatastorePerformanceRequest) */ {
 public:
  inline CheckDatastorePerformanceRequest() : CheckDatastorePerformanceRequest(nullptr) {}
  ~CheckDatastorePerformanceRequest() override;
  explicit PROTOBUF_CONSTEXPR CheckDatastorePerformanceRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CheckDatastorePerformanceRequest(const CheckDatastorePerformanceRequest& from);
  CheckDatastorePerformanceRequest(CheckDatastorePerformanceRequest&& from) noexcept
    : CheckDatastorePerformanceRequest() {
    *this = ::std::move(from);
  }

  inline CheckDatastorePerformanceRequest& operator=(const CheckDatastorePerformanceRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CheckDatastorePerformanceRequest& operator=(CheckDatastorePerformanceRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CheckDatastorePerformanceRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CheckDatastorePerformanceRequest* internal_default_instance() {
    return reinterpret_cast<const CheckDatastorePerformanceRequest*>(
               &_CheckDatastorePerformanceRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CheckDatastorePerformanceRequest& a, CheckDatastorePerformanceRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CheckDatastorePerformanceRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CheckDatastorePerformanceRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CheckDatastorePerformanceRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CheckDatastorePerformanceRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CheckDatastorePerformanceRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CheckDatastorePerformanceRequest& from) {
    CheckDatastorePerformanceRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CheckDatastorePerformanceRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "szdiagnostic.CheckDatastorePerformanceRequest";
  }
  protected:
  explicit CheckDatastorePerformanceRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSecondsToRunFieldNumber = 1,
  };
  // int32 seconds_to_run = 1;
  void clear_seconds_to_run();
  int32_t seconds_to_run() const;
  void set_seconds_to_run(int32_t value);
  private:
  int32_t _internal_seconds_to_run() const;
  void _internal_set_seconds_to_run(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:szdiagnostic.CheckDatastorePerformanceRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t seconds_to_run_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_szdiagnostic_2eproto;
};
// -------------------------------------------------------------------

class CheckDatastorePerformanceResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:szdiagnostic.CheckDatastorePerformanceResponse) */ {
 public:
  inline CheckDatastorePerformanceResponse() : CheckDatastorePerformanceResponse(nullptr) {}
  ~CheckDatastorePerformanceResponse() override;
  explicit PROTOBUF_CONSTEXPR CheckDatastorePerformanceResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CheckDatastorePerformanceResponse(const CheckDatastorePerformanceResponse& from);
  CheckDatastorePerformanceResponse(CheckDatastorePerformanceResponse&& from) noexcept
    : CheckDatastorePerformanceResponse() {
    *this = ::std::move(from);
  }

  inline CheckDatastorePerformanceResponse& operator=(const CheckDatastorePerformanceResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CheckDatastorePerformanceResponse& operator=(CheckDatastorePerformanceResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CheckDatastorePerformanceResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CheckDatastorePerformanceResponse* internal_default_instance() {
    return reinterpret_cast<const CheckDatastorePerformanceResponse*>(
               &_CheckDatastorePerformanceResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CheckDatastorePerformanceResponse& a, CheckDatastorePerformanceResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CheckDatastorePerformanceResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CheckDatastorePerformanceResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CheckDatastorePerformanceResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CheckDatastorePerformanceResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CheckDatastorePerformanceResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CheckDatastorePerformanceResponse& from) {
    CheckDatastorePerformanceResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CheckDatastorePerformanceResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "szdiagnostic.CheckDatastorePerformanceResponse";
  }
  protected:
  explicit CheckDatastorePerformanceResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
  };
  // string result = 1;
  void clear_result();
  const std::string& result() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_result(ArgT0&& arg0, ArgT... args);
  std::string* mutable_result();
  PROTOBUF_NODISCARD std::string* release_result();
  void set_allocated_result(std::string* result);
  private:
  const std::string& _internal_result() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_result(const std::string& value);
  std::string* _internal_mutable_result();
  public:

  // @@protoc_insertion_point(class_scope:szdiagnostic.CheckDatastorePerformanceResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr result_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_szdiagnostic_2eproto;
};
// -------------------------------------------------------------------

class GetDatastoreInfoRequest final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:szdiagnostic.GetDatastoreInfoRequest) */ {
 public:
  inline GetDatastoreInfoRequest() : GetDatastoreInfoRequest(nullptr) {}
  explicit PROTOBUF_CONSTEXPR GetDatastoreInfoRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetDatastoreInfoRequest(const GetDatastoreInfoRequest& from);
  GetDatastoreInfoRequest(GetDatastoreInfoRequest&& from) noexcept
    : GetDatastoreInfoRequest() {
    *this = ::std::move(from);
  }

  inline GetDatastoreInfoRequest& operator=(const GetDatastoreInfoRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetDatastoreInfoRequest& operator=(GetDatastoreInfoRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetDatastoreInfoRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetDatastoreInfoRequest* internal_default_instance() {
    return reinterpret_cast<const GetDatastoreInfoRequest*>(
               &_GetDatastoreInfoRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(GetDatastoreInfoRequest& a, GetDatastoreInfoRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetDatastoreInfoRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetDatastoreInfoRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetDatastoreInfoRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetDatastoreInfoRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const GetDatastoreInfoRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const GetDatastoreInfoRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "szdiagnostic.GetDatastoreInfoRequest";
  }
  protected:
  explicit GetDatastoreInfoRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:szdiagnostic.GetDatastoreInfoRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_szdiagnostic_2eproto;
};
// -------------------------------------------------------------------

class GetDatastoreInfoResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:szdiagnostic.GetDatastoreInfoResponse) */ {
 public:
  inline GetDatastoreInfoResponse() : GetDatastoreInfoResponse(nullptr) {}
  ~GetDatastoreInfoResponse() override;
  explicit PROTOBUF_CONSTEXPR GetDatastoreInfoResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetDatastoreInfoResponse(const GetDatastoreInfoResponse& from);
  GetDatastoreInfoResponse(GetDatastoreInfoResponse&& from) noexcept
    : GetDatastoreInfoResponse() {
    *this = ::std::move(from);
  }

  inline GetDatastoreInfoResponse& operator=(const GetDatastoreInfoResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetDatastoreInfoResponse& operator=(GetDatastoreInfoResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetDatastoreInfoResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetDatastoreInfoResponse* internal_default_instance() {
    return reinterpret_cast<const GetDatastoreInfoResponse*>(
               &_GetDatastoreInfoResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(GetDatastoreInfoResponse& a, GetDatastoreInfoResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetDatastoreInfoResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetDatastoreInfoResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetDatastoreInfoResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetDatastoreInfoResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetDatastoreInfoResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetDatastoreInfoResponse& from) {
    GetDatastoreInfoResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetDatastoreInfoResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "szdiagnostic.GetDatastoreInfoResponse";
  }
  protected:
  explicit GetDatastoreInfoResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
  };
  // string result = 1;
  void clear_result();
  const std::string& result() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_result(ArgT0&& arg0, ArgT... args);
  std::string* mutable_result();
  PROTOBUF_NODISCARD std::string* release_result();
  void set_allocated_result(std::string* result);
  private:
  const std::string& _internal_result() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_result(const std::string& value);
  std::string* _internal_mutable_result();
  public:

  // @@protoc_insertion_point(class_scope:szdiagnostic.GetDatastoreInfoResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr result_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_szdiagnostic_2eproto;
};
// -------------------------------------------------------------------

class GetFeatureRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:szdiagnostic.GetFeatureRequest) */ {
 public:
  inline GetFeatureRequest() : GetFeatureRequest(nullptr) {}
  ~GetFeatureRequest() override;
  explicit PROTOBUF_CONSTEXPR GetFeatureRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetFeatureRequest(const GetFeatureRequest& from);
  GetFeatureRequest(GetFeatureRequest&& from) noexcept
    : GetFeatureRequest() {
    *this = ::std::move(from);
  }

  inline GetFeatureRequest& operator=(const GetFeatureRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetFeatureRequest& operator=(GetFeatureRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetFeatureRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetFeatureRequest* internal_default_instance() {
    return reinterpret_cast<const GetFeatureRequest*>(
               &_GetFeatureRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(GetFeatureRequest& a, GetFeatureRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetFeatureRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetFeatureRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetFeatureRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetFeatureRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetFeatureRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetFeatureRequest& from) {
    GetFeatureRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetFeatureRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "szdiagnostic.GetFeatureRequest";
  }
  protected:
  explicit GetFeatureRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFeatureIdFieldNumber = 1,
  };
  // int64 feature_id = 1;
  void clear_feature_id();
  int64_t feature_id() const;
  void set_feature_id(int64_t value);
  private:
  int64_t _internal_feature_id() const;
  void _internal_set_feature_id(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:szdiagnostic.GetFeatureRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int64_t feature_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_szdiagnostic_2eproto;
};
// -------------------------------------------------------------------

class GetFeatureResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:szdiagnostic.GetFeatureResponse) */ {
 public:
  inline GetFeatureResponse() : GetFeatureResponse(nullptr) {}
  ~GetFeatureResponse() override;
  explicit PROTOBUF_CONSTEXPR GetFeatureResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetFeatureResponse(const GetFeatureResponse& from);
  GetFeatureResponse(GetFeatureResponse&& from) noexcept
    : GetFeatureResponse() {
    *this = ::std::move(from);
  }

  inline GetFeatureResponse& operator=(const GetFeatureResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetFeatureResponse& operator=(GetFeatureResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetFeatureResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetFeatureResponse* internal_default_instance() {
    return reinterpret_cast<const GetFeatureResponse*>(
               &_GetFeatureResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(GetFeatureResponse& a, GetFeatureResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetFeatureResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetFeatureResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetFeatureResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetFeatureResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetFeatureResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetFeatureResponse& from) {
    GetFeatureResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetFeatureResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "szdiagnostic.GetFeatureResponse";
  }
  protected:
  explicit GetFeatureResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
  };
  // string result = 1;
  void clear_result();
  const std::string& result() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_result(ArgT0&& arg0, ArgT... args);
  std::string* mutable_result();
  PROTOBUF_NODISCARD std::string* release_result();
  void set_allocated_result(std::string* result);
  private:
  const std::string& _internal_result() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_result(const std::string& value);
  std::string* _internal_mutable_result();
  public:

  // @@protoc_insertion_point(class_scope:szdiagnostic.GetFeatureResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr result_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_szdiagnostic_2eproto;
};
// -------------------------------------------------------------------

class PurgeRepositoryRequest final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:szdiagnostic.PurgeRepositoryRequest) */ {
 public:
  inline PurgeRepositoryRequest() : PurgeRepositoryRequest(nullptr) {}
  explicit PROTOBUF_CONSTEXPR PurgeRepositoryRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PurgeRepositoryRequest(const PurgeRepositoryRequest& from);
  PurgeRepositoryRequest(PurgeRepositoryRequest&& from) noexcept
    : PurgeRepositoryRequest() {
    *this = ::std::move(from);
  }

  inline PurgeRepositoryRequest& operator=(const PurgeRepositoryRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PurgeRepositoryRequest& operator=(PurgeRepositoryRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PurgeRepositoryRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const PurgeRepositoryRequest* internal_default_instance() {
    return reinterpret_cast<const PurgeRepositoryRequest*>(
               &_PurgeRepositoryRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(PurgeRepositoryRequest& a, PurgeRepositoryRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PurgeRepositoryRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PurgeRepositoryRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PurgeRepositoryRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PurgeRepositoryRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const PurgeRepositoryRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const PurgeRepositoryRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "szdiagnostic.PurgeRepositoryRequest";
  }
  protected:
  explicit PurgeRepositoryRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:szdiagnostic.PurgeRepositoryRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_szdiagnostic_2eproto;
};
// -------------------------------------------------------------------

class PurgeRepositoryResponse final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:szdiagnostic.PurgeRepositoryResponse) */ {
 public:
  inline PurgeRepositoryResponse() : PurgeRepositoryResponse(nullptr) {}
  explicit PROTOBUF_CONSTEXPR PurgeRepositoryResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PurgeRepositoryResponse(const PurgeRepositoryResponse& from);
  PurgeRepositoryResponse(PurgeRepositoryResponse&& from) noexcept
    : PurgeRepositoryResponse() {
    *this = ::std::move(from);
  }

  inline PurgeRepositoryResponse& operator=(const PurgeRepositoryResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline PurgeRepositoryResponse& operator=(PurgeRepositoryResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PurgeRepositoryResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const PurgeRepositoryResponse* internal_default_instance() {
    return reinterpret_cast<const PurgeRepositoryResponse*>(
               &_PurgeRepositoryResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(PurgeRepositoryResponse& a, PurgeRepositoryResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(PurgeRepositoryResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PurgeRepositoryResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PurgeRepositoryResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PurgeRepositoryResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const PurgeRepositoryResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const PurgeRepositoryResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "szdiagnostic.PurgeRepositoryResponse";
  }
  protected:
  explicit PurgeRepositoryResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:szdiagnostic.PurgeRepositoryResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_szdiagnostic_2eproto;
};
// -------------------------------------------------------------------

class ReinitializeRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:szdiagnostic.ReinitializeRequest) */ {
 public:
  inline ReinitializeRequest() : ReinitializeRequest(nullptr) {}
  ~ReinitializeRequest() override;
  explicit PROTOBUF_CONSTEXPR ReinitializeRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReinitializeRequest(const ReinitializeRequest& from);
  ReinitializeRequest(ReinitializeRequest&& from) noexcept
    : ReinitializeRequest() {
    *this = ::std::move(from);
  }

  inline ReinitializeRequest& operator=(const ReinitializeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReinitializeRequest& operator=(ReinitializeRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReinitializeRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReinitializeRequest* internal_default_instance() {
    return reinterpret_cast<const ReinitializeRequest*>(
               &_ReinitializeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(ReinitializeRequest& a, ReinitializeRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ReinitializeRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReinitializeRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ReinitializeRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ReinitializeRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ReinitializeRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ReinitializeRequest& from) {
    ReinitializeRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReinitializeRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "szdiagnostic.ReinitializeRequest";
  }
  protected:
  explicit ReinitializeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConfigIdFieldNumber = 1,
  };
  // int64 config_id = 1;
  void clear_config_id();
  int64_t config_id() const;
  void set_config_id(int64_t value);
  private:
  int64_t _internal_config_id() const;
  void _internal_set_config_id(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:szdiagnostic.ReinitializeRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int64_t config_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_szdiagnostic_2eproto;
};
// -------------------------------------------------------------------

class ReinitializeResponse final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:szdiagnostic.ReinitializeResponse) */ {
 public:
  inline ReinitializeResponse() : ReinitializeResponse(nullptr) {}
  explicit PROTOBUF_CONSTEXPR ReinitializeResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReinitializeResponse(const ReinitializeResponse& from);
  ReinitializeResponse(ReinitializeResponse&& from) noexcept
    : ReinitializeResponse() {
    *this = ::std::move(from);
  }

  inline ReinitializeResponse& operator=(const ReinitializeResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReinitializeResponse& operator=(ReinitializeResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReinitializeResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReinitializeResponse* internal_default_instance() {
    return reinterpret_cast<const ReinitializeResponse*>(
               &_ReinitializeResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(ReinitializeResponse& a, ReinitializeResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ReinitializeResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReinitializeResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ReinitializeResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ReinitializeResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const ReinitializeResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const ReinitializeResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "szdiagnostic.ReinitializeResponse";
  }
  protected:
  explicit ReinitializeResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:szdiagnostic.ReinitializeResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_szdiagnostic_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CheckDatastorePerformanceRequest

// int32 seconds_to_run = 1;
inline void CheckDatastorePerformanceRequest::clear_seconds_to_run() {
  _impl_.seconds_to_run_ = 0;
}
inline int32_t CheckDatastorePerformanceRequest::_internal_seconds_to_run() const {
  return _impl_.seconds_to_run_;
}
inline int32_t CheckDatastorePerformanceRequest::seconds_to_run() const {
  // @@protoc_insertion_point(field_get:szdiagnostic.CheckDatastorePerformanceRequest.seconds_to_run)
  return _internal_seconds_to_run();
}
inline void CheckDatastorePerformanceRequest::_internal_set_seconds_to_run(int32_t value) {
  
  _impl_.seconds_to_run_ = value;
}
inline void CheckDatastorePerformanceRequest::set_seconds_to_run(int32_t value) {
  _internal_set_seconds_to_run(value);
  // @@protoc_insertion_point(field_set:szdiagnostic.CheckDatastorePerformanceRequest.seconds_to_run)
}

// -------------------------------------------------------------------

// CheckDatastorePerformanceResponse

// string result = 1;
inline void CheckDatastorePerformanceResponse::clear_result() {
  _impl_.result_.ClearToEmpty();
}
inline const std::string& CheckDatastorePerformanceResponse::result() const {
  // @@protoc_insertion_point(field_get:szdiagnostic.CheckDatastorePerformanceResponse.result)
  return _internal_result();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CheckDatastorePerformanceResponse::set_result(ArgT0&& arg0, ArgT... args) {
 
 _impl_.result_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:szdiagnostic.CheckDatastorePerformanceResponse.result)
}
inline std::string* CheckDatastorePerformanceResponse::mutable_result() {
  std::string* _s = _internal_mutable_result();
  // @@protoc_insertion_point(field_mutable:szdiagnostic.CheckDatastorePerformanceResponse.result)
  return _s;
}
inline const std::string& CheckDatastorePerformanceResponse::_internal_result() const {
  return _impl_.result_.Get();
}
inline void CheckDatastorePerformanceResponse::_internal_set_result(const std::string& value) {
  
  _impl_.result_.Set(value, GetArenaForAllocation());
}
inline std::string* CheckDatastorePerformanceResponse::_internal_mutable_result() {
  
  return _impl_.result_.Mutable(GetArenaForAllocation());
}
inline std::string* CheckDatastorePerformanceResponse::release_result() {
  // @@protoc_insertion_point(field_release:szdiagnostic.CheckDatastorePerformanceResponse.result)
  return _impl_.result_.Release();
}
inline void CheckDatastorePerformanceResponse::set_allocated_result(std::string* result) {
  if (result != nullptr) {
    
  } else {
    
  }
  _impl_.result_.SetAllocated(result, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.result_.IsDefault()) {
    _impl_.result_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:szdiagnostic.CheckDatastorePerformanceResponse.result)
}

// -------------------------------------------------------------------

// GetDatastoreInfoRequest

// -------------------------------------------------------------------

// GetDatastoreInfoResponse

// string result = 1;
inline void GetDatastoreInfoResponse::clear_result() {
  _impl_.result_.ClearToEmpty();
}
inline const std::string& GetDatastoreInfoResponse::result() const {
  // @@protoc_insertion_point(field_get:szdiagnostic.GetDatastoreInfoResponse.result)
  return _internal_result();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetDatastoreInfoResponse::set_result(ArgT0&& arg0, ArgT... args) {
 
 _impl_.result_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:szdiagnostic.GetDatastoreInfoResponse.result)
}
inline std::string* GetDatastoreInfoResponse::mutable_result() {
  std::string* _s = _internal_mutable_result();
  // @@protoc_insertion_point(field_mutable:szdiagnostic.GetDatastoreInfoResponse.result)
  return _s;
}
inline const std::string& GetDatastoreInfoResponse::_internal_result() const {
  return _impl_.result_.Get();
}
inline void GetDatastoreInfoResponse::_internal_set_result(const std::string& value) {
  
  _impl_.result_.Set(value, GetArenaForAllocation());
}
inline std::string* GetDatastoreInfoResponse::_internal_mutable_result() {
  
  return _impl_.result_.Mutable(GetArenaForAllocation());
}
inline std::string* GetDatastoreInfoResponse::release_result() {
  // @@protoc_insertion_point(field_release:szdiagnostic.GetDatastoreInfoResponse.result)
  return _impl_.result_.Release();
}
inline void GetDatastoreInfoResponse::set_allocated_result(std::string* result) {
  if (result != nullptr) {
    
  } else {
    
  }
  _impl_.result_.SetAllocated(result, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.result_.IsDefault()) {
    _impl_.result_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:szdiagnostic.GetDatastoreInfoResponse.result)
}

// -------------------------------------------------------------------

// GetFeatureRequest

// int64 feature_id = 1;
inline void GetFeatureRequest::clear_feature_id() {
  _impl_.feature_id_ = int64_t{0};
}
inline int64_t GetFeatureRequest::_internal_feature_id() const {
  return _impl_.feature_id_;
}
inline int64_t GetFeatureRequest::feature_id() const {
  // @@protoc_insertion_point(field_get:szdiagnostic.GetFeatureRequest.feature_id)
  return _internal_feature_id();
}
inline void GetFeatureRequest::_internal_set_feature_id(int64_t value) {
  
  _impl_.feature_id_ = value;
}
inline void GetFeatureRequest::set_feature_id(int64_t value) {
  _internal_set_feature_id(value);
  // @@protoc_insertion_point(field_set:szdiagnostic.GetFeatureRequest.feature_id)
}

// -------------------------------------------------------------------

// GetFeatureResponse

// string result = 1;
inline void GetFeatureResponse::clear_result() {
  _impl_.result_.ClearToEmpty();
}
inline const std::string& GetFeatureResponse::result() const {
  // @@protoc_insertion_point(field_get:szdiagnostic.GetFeatureResponse.result)
  return _internal_result();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetFeatureResponse::set_result(ArgT0&& arg0, ArgT... args) {
 
 _impl_.result_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:szdiagnostic.GetFeatureResponse.result)
}
inline std::string* GetFeatureResponse::mutable_result() {
  std::string* _s = _internal_mutable_result();
  // @@protoc_insertion_point(field_mutable:szdiagnostic.GetFeatureResponse.result)
  return _s;
}
inline const std::string& GetFeatureResponse::_internal_result() const {
  return _impl_.result_.Get();
}
inline void GetFeatureResponse::_internal_set_result(const std::string& value) {
  
  _impl_.result_.Set(value, GetArenaForAllocation());
}
inline std::string* GetFeatureResponse::_internal_mutable_result() {
  
  return _impl_.result_.Mutable(GetArenaForAllocation());
}
inline std::string* GetFeatureResponse::release_result() {
  // @@protoc_insertion_point(field_release:szdiagnostic.GetFeatureResponse.result)
  return _impl_.result_.Release();
}
inline void GetFeatureResponse::set_allocated_result(std::string* result) {
  if (result != nullptr) {
    
  } else {
    
  }
  _impl_.result_.SetAllocated(result, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.result_.IsDefault()) {
    _impl_.result_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:szdiagnostic.GetFeatureResponse.result)
}

// -------------------------------------------------------------------

// PurgeRepositoryRequest

// -------------------------------------------------------------------

// PurgeRepositoryResponse

// -------------------------------------------------------------------

// ReinitializeRequest

// int64 config_id = 1;
inline void ReinitializeRequest::clear_config_id() {
  _impl_.config_id_ = int64_t{0};
}
inline int64_t ReinitializeRequest::_internal_config_id() const {
  return _impl_.config_id_;
}
inline int64_t ReinitializeRequest::config_id() const {
  // @@protoc_insertion_point(field_get:szdiagnostic.ReinitializeRequest.config_id)
  return _internal_config_id();
}
inline void ReinitializeRequest::_internal_set_config_id(int64_t value) {
  
  _impl_.config_id_ = value;
}
inline void ReinitializeRequest::set_config_id(int64_t value) {
  _internal_set_config_id(value);
  // @@protoc_insertion_point(field_set:szdiagnostic.ReinitializeRequest.config_id)
}

// -------------------------------------------------------------------

// ReinitializeResponse

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace szdiagnostic

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_szdiagnostic_2eproto
