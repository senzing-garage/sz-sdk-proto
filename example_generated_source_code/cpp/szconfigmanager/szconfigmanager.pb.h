// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: szconfigmanager.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_szconfigmanager_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_szconfigmanager_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_szconfigmanager_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_szconfigmanager_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[12]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_szconfigmanager_2eproto;
namespace szconfigmanager {
class AddConfigRequest;
class AddConfigRequestDefaultTypeInternal;
extern AddConfigRequestDefaultTypeInternal _AddConfigRequest_default_instance_;
class AddConfigResponse;
class AddConfigResponseDefaultTypeInternal;
extern AddConfigResponseDefaultTypeInternal _AddConfigResponse_default_instance_;
class GetConfigRequest;
class GetConfigRequestDefaultTypeInternal;
extern GetConfigRequestDefaultTypeInternal _GetConfigRequest_default_instance_;
class GetConfigResponse;
class GetConfigResponseDefaultTypeInternal;
extern GetConfigResponseDefaultTypeInternal _GetConfigResponse_default_instance_;
class GetConfigsRequest;
class GetConfigsRequestDefaultTypeInternal;
extern GetConfigsRequestDefaultTypeInternal _GetConfigsRequest_default_instance_;
class GetConfigsResponse;
class GetConfigsResponseDefaultTypeInternal;
extern GetConfigsResponseDefaultTypeInternal _GetConfigsResponse_default_instance_;
class GetDefaultConfigIdRequest;
class GetDefaultConfigIdRequestDefaultTypeInternal;
extern GetDefaultConfigIdRequestDefaultTypeInternal _GetDefaultConfigIdRequest_default_instance_;
class GetDefaultConfigIdResponse;
class GetDefaultConfigIdResponseDefaultTypeInternal;
extern GetDefaultConfigIdResponseDefaultTypeInternal _GetDefaultConfigIdResponse_default_instance_;
class ReplaceDefaultConfigIdRequest;
class ReplaceDefaultConfigIdRequestDefaultTypeInternal;
extern ReplaceDefaultConfigIdRequestDefaultTypeInternal _ReplaceDefaultConfigIdRequest_default_instance_;
class ReplaceDefaultConfigIdResponse;
class ReplaceDefaultConfigIdResponseDefaultTypeInternal;
extern ReplaceDefaultConfigIdResponseDefaultTypeInternal _ReplaceDefaultConfigIdResponse_default_instance_;
class SetDefaultConfigIdRequest;
class SetDefaultConfigIdRequestDefaultTypeInternal;
extern SetDefaultConfigIdRequestDefaultTypeInternal _SetDefaultConfigIdRequest_default_instance_;
class SetDefaultConfigIdResponse;
class SetDefaultConfigIdResponseDefaultTypeInternal;
extern SetDefaultConfigIdResponseDefaultTypeInternal _SetDefaultConfigIdResponse_default_instance_;
}  // namespace szconfigmanager
PROTOBUF_NAMESPACE_OPEN
template<> ::szconfigmanager::AddConfigRequest* Arena::CreateMaybeMessage<::szconfigmanager::AddConfigRequest>(Arena*);
template<> ::szconfigmanager::AddConfigResponse* Arena::CreateMaybeMessage<::szconfigmanager::AddConfigResponse>(Arena*);
template<> ::szconfigmanager::GetConfigRequest* Arena::CreateMaybeMessage<::szconfigmanager::GetConfigRequest>(Arena*);
template<> ::szconfigmanager::GetConfigResponse* Arena::CreateMaybeMessage<::szconfigmanager::GetConfigResponse>(Arena*);
template<> ::szconfigmanager::GetConfigsRequest* Arena::CreateMaybeMessage<::szconfigmanager::GetConfigsRequest>(Arena*);
template<> ::szconfigmanager::GetConfigsResponse* Arena::CreateMaybeMessage<::szconfigmanager::GetConfigsResponse>(Arena*);
template<> ::szconfigmanager::GetDefaultConfigIdRequest* Arena::CreateMaybeMessage<::szconfigmanager::GetDefaultConfigIdRequest>(Arena*);
template<> ::szconfigmanager::GetDefaultConfigIdResponse* Arena::CreateMaybeMessage<::szconfigmanager::GetDefaultConfigIdResponse>(Arena*);
template<> ::szconfigmanager::ReplaceDefaultConfigIdRequest* Arena::CreateMaybeMessage<::szconfigmanager::ReplaceDefaultConfigIdRequest>(Arena*);
template<> ::szconfigmanager::ReplaceDefaultConfigIdResponse* Arena::CreateMaybeMessage<::szconfigmanager::ReplaceDefaultConfigIdResponse>(Arena*);
template<> ::szconfigmanager::SetDefaultConfigIdRequest* Arena::CreateMaybeMessage<::szconfigmanager::SetDefaultConfigIdRequest>(Arena*);
template<> ::szconfigmanager::SetDefaultConfigIdResponse* Arena::CreateMaybeMessage<::szconfigmanager::SetDefaultConfigIdResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace szconfigmanager {

// ===================================================================

class AddConfigRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:szconfigmanager.AddConfigRequest) */ {
 public:
  inline AddConfigRequest() : AddConfigRequest(nullptr) {};
  virtual ~AddConfigRequest();

  AddConfigRequest(const AddConfigRequest& from);
  AddConfigRequest(AddConfigRequest&& from) noexcept
    : AddConfigRequest() {
    *this = ::std::move(from);
  }

  inline AddConfigRequest& operator=(const AddConfigRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddConfigRequest& operator=(AddConfigRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AddConfigRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AddConfigRequest* internal_default_instance() {
    return reinterpret_cast<const AddConfigRequest*>(
               &_AddConfigRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(AddConfigRequest& a, AddConfigRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(AddConfigRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AddConfigRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AddConfigRequest* New() const final {
    return CreateMaybeMessage<AddConfigRequest>(nullptr);
  }

  AddConfigRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AddConfigRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AddConfigRequest& from);
  void MergeFrom(const AddConfigRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddConfigRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "szconfigmanager.AddConfigRequest";
  }
  protected:
  explicit AddConfigRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_szconfigmanager_2eproto);
    return ::descriptor_table_szconfigmanager_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConfigDefinitionFieldNumber = 1,
    kConfigCommentFieldNumber = 2,
  };
  // string configDefinition = 1;
  void clear_configdefinition();
  const std::string& configdefinition() const;
  void set_configdefinition(const std::string& value);
  void set_configdefinition(std::string&& value);
  void set_configdefinition(const char* value);
  void set_configdefinition(const char* value, size_t size);
  std::string* mutable_configdefinition();
  std::string* release_configdefinition();
  void set_allocated_configdefinition(std::string* configdefinition);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_configdefinition();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_configdefinition(
      std::string* configdefinition);
  private:
  const std::string& _internal_configdefinition() const;
  void _internal_set_configdefinition(const std::string& value);
  std::string* _internal_mutable_configdefinition();
  public:

  // string configComment = 2;
  void clear_configcomment();
  const std::string& configcomment() const;
  void set_configcomment(const std::string& value);
  void set_configcomment(std::string&& value);
  void set_configcomment(const char* value);
  void set_configcomment(const char* value, size_t size);
  std::string* mutable_configcomment();
  std::string* release_configcomment();
  void set_allocated_configcomment(std::string* configcomment);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_configcomment();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_configcomment(
      std::string* configcomment);
  private:
  const std::string& _internal_configcomment() const;
  void _internal_set_configcomment(const std::string& value);
  std::string* _internal_mutable_configcomment();
  public:

  // @@protoc_insertion_point(class_scope:szconfigmanager.AddConfigRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr configdefinition_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr configcomment_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_szconfigmanager_2eproto;
};
// -------------------------------------------------------------------

class AddConfigResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:szconfigmanager.AddConfigResponse) */ {
 public:
  inline AddConfigResponse() : AddConfigResponse(nullptr) {};
  virtual ~AddConfigResponse();

  AddConfigResponse(const AddConfigResponse& from);
  AddConfigResponse(AddConfigResponse&& from) noexcept
    : AddConfigResponse() {
    *this = ::std::move(from);
  }

  inline AddConfigResponse& operator=(const AddConfigResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddConfigResponse& operator=(AddConfigResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AddConfigResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AddConfigResponse* internal_default_instance() {
    return reinterpret_cast<const AddConfigResponse*>(
               &_AddConfigResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(AddConfigResponse& a, AddConfigResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(AddConfigResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AddConfigResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AddConfigResponse* New() const final {
    return CreateMaybeMessage<AddConfigResponse>(nullptr);
  }

  AddConfigResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AddConfigResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AddConfigResponse& from);
  void MergeFrom(const AddConfigResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddConfigResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "szconfigmanager.AddConfigResponse";
  }
  protected:
  explicit AddConfigResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_szconfigmanager_2eproto);
    return ::descriptor_table_szconfigmanager_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
  };
  // int64 result = 1;
  void clear_result();
  ::PROTOBUF_NAMESPACE_ID::int64 result() const;
  void set_result(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_result() const;
  void _internal_set_result(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:szconfigmanager.AddConfigResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int64 result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_szconfigmanager_2eproto;
};
// -------------------------------------------------------------------

class GetConfigRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:szconfigmanager.GetConfigRequest) */ {
 public:
  inline GetConfigRequest() : GetConfigRequest(nullptr) {};
  virtual ~GetConfigRequest();

  GetConfigRequest(const GetConfigRequest& from);
  GetConfigRequest(GetConfigRequest&& from) noexcept
    : GetConfigRequest() {
    *this = ::std::move(from);
  }

  inline GetConfigRequest& operator=(const GetConfigRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetConfigRequest& operator=(GetConfigRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetConfigRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetConfigRequest* internal_default_instance() {
    return reinterpret_cast<const GetConfigRequest*>(
               &_GetConfigRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(GetConfigRequest& a, GetConfigRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetConfigRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetConfigRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetConfigRequest* New() const final {
    return CreateMaybeMessage<GetConfigRequest>(nullptr);
  }

  GetConfigRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetConfigRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetConfigRequest& from);
  void MergeFrom(const GetConfigRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetConfigRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "szconfigmanager.GetConfigRequest";
  }
  protected:
  explicit GetConfigRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_szconfigmanager_2eproto);
    return ::descriptor_table_szconfigmanager_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConfigIdFieldNumber = 1,
  };
  // int64 configId = 1;
  void clear_configid();
  ::PROTOBUF_NAMESPACE_ID::int64 configid() const;
  void set_configid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_configid() const;
  void _internal_set_configid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:szconfigmanager.GetConfigRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int64 configid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_szconfigmanager_2eproto;
};
// -------------------------------------------------------------------

class GetConfigResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:szconfigmanager.GetConfigResponse) */ {
 public:
  inline GetConfigResponse() : GetConfigResponse(nullptr) {};
  virtual ~GetConfigResponse();

  GetConfigResponse(const GetConfigResponse& from);
  GetConfigResponse(GetConfigResponse&& from) noexcept
    : GetConfigResponse() {
    *this = ::std::move(from);
  }

  inline GetConfigResponse& operator=(const GetConfigResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetConfigResponse& operator=(GetConfigResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetConfigResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetConfigResponse* internal_default_instance() {
    return reinterpret_cast<const GetConfigResponse*>(
               &_GetConfigResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(GetConfigResponse& a, GetConfigResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetConfigResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetConfigResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetConfigResponse* New() const final {
    return CreateMaybeMessage<GetConfigResponse>(nullptr);
  }

  GetConfigResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetConfigResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetConfigResponse& from);
  void MergeFrom(const GetConfigResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetConfigResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "szconfigmanager.GetConfigResponse";
  }
  protected:
  explicit GetConfigResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_szconfigmanager_2eproto);
    return ::descriptor_table_szconfigmanager_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
  };
  // string result = 1;
  void clear_result();
  const std::string& result() const;
  void set_result(const std::string& value);
  void set_result(std::string&& value);
  void set_result(const char* value);
  void set_result(const char* value, size_t size);
  std::string* mutable_result();
  std::string* release_result();
  void set_allocated_result(std::string* result);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_result();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_result(
      std::string* result);
  private:
  const std::string& _internal_result() const;
  void _internal_set_result(const std::string& value);
  std::string* _internal_mutable_result();
  public:

  // @@protoc_insertion_point(class_scope:szconfigmanager.GetConfigResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_szconfigmanager_2eproto;
};
// -------------------------------------------------------------------

class GetConfigsRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:szconfigmanager.GetConfigsRequest) */ {
 public:
  inline GetConfigsRequest() : GetConfigsRequest(nullptr) {};
  virtual ~GetConfigsRequest();

  GetConfigsRequest(const GetConfigsRequest& from);
  GetConfigsRequest(GetConfigsRequest&& from) noexcept
    : GetConfigsRequest() {
    *this = ::std::move(from);
  }

  inline GetConfigsRequest& operator=(const GetConfigsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetConfigsRequest& operator=(GetConfigsRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetConfigsRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetConfigsRequest* internal_default_instance() {
    return reinterpret_cast<const GetConfigsRequest*>(
               &_GetConfigsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(GetConfigsRequest& a, GetConfigsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetConfigsRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetConfigsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetConfigsRequest* New() const final {
    return CreateMaybeMessage<GetConfigsRequest>(nullptr);
  }

  GetConfigsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetConfigsRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetConfigsRequest& from);
  void MergeFrom(const GetConfigsRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetConfigsRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "szconfigmanager.GetConfigsRequest";
  }
  protected:
  explicit GetConfigsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_szconfigmanager_2eproto);
    return ::descriptor_table_szconfigmanager_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:szconfigmanager.GetConfigsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_szconfigmanager_2eproto;
};
// -------------------------------------------------------------------

class GetConfigsResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:szconfigmanager.GetConfigsResponse) */ {
 public:
  inline GetConfigsResponse() : GetConfigsResponse(nullptr) {};
  virtual ~GetConfigsResponse();

  GetConfigsResponse(const GetConfigsResponse& from);
  GetConfigsResponse(GetConfigsResponse&& from) noexcept
    : GetConfigsResponse() {
    *this = ::std::move(from);
  }

  inline GetConfigsResponse& operator=(const GetConfigsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetConfigsResponse& operator=(GetConfigsResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetConfigsResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetConfigsResponse* internal_default_instance() {
    return reinterpret_cast<const GetConfigsResponse*>(
               &_GetConfigsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(GetConfigsResponse& a, GetConfigsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetConfigsResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetConfigsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetConfigsResponse* New() const final {
    return CreateMaybeMessage<GetConfigsResponse>(nullptr);
  }

  GetConfigsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetConfigsResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetConfigsResponse& from);
  void MergeFrom(const GetConfigsResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetConfigsResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "szconfigmanager.GetConfigsResponse";
  }
  protected:
  explicit GetConfigsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_szconfigmanager_2eproto);
    return ::descriptor_table_szconfigmanager_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
  };
  // string result = 1;
  void clear_result();
  const std::string& result() const;
  void set_result(const std::string& value);
  void set_result(std::string&& value);
  void set_result(const char* value);
  void set_result(const char* value, size_t size);
  std::string* mutable_result();
  std::string* release_result();
  void set_allocated_result(std::string* result);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_result();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_result(
      std::string* result);
  private:
  const std::string& _internal_result() const;
  void _internal_set_result(const std::string& value);
  std::string* _internal_mutable_result();
  public:

  // @@protoc_insertion_point(class_scope:szconfigmanager.GetConfigsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_szconfigmanager_2eproto;
};
// -------------------------------------------------------------------

class GetDefaultConfigIdRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:szconfigmanager.GetDefaultConfigIdRequest) */ {
 public:
  inline GetDefaultConfigIdRequest() : GetDefaultConfigIdRequest(nullptr) {};
  virtual ~GetDefaultConfigIdRequest();

  GetDefaultConfigIdRequest(const GetDefaultConfigIdRequest& from);
  GetDefaultConfigIdRequest(GetDefaultConfigIdRequest&& from) noexcept
    : GetDefaultConfigIdRequest() {
    *this = ::std::move(from);
  }

  inline GetDefaultConfigIdRequest& operator=(const GetDefaultConfigIdRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetDefaultConfigIdRequest& operator=(GetDefaultConfigIdRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetDefaultConfigIdRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetDefaultConfigIdRequest* internal_default_instance() {
    return reinterpret_cast<const GetDefaultConfigIdRequest*>(
               &_GetDefaultConfigIdRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(GetDefaultConfigIdRequest& a, GetDefaultConfigIdRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetDefaultConfigIdRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetDefaultConfigIdRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetDefaultConfigIdRequest* New() const final {
    return CreateMaybeMessage<GetDefaultConfigIdRequest>(nullptr);
  }

  GetDefaultConfigIdRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetDefaultConfigIdRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetDefaultConfigIdRequest& from);
  void MergeFrom(const GetDefaultConfigIdRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetDefaultConfigIdRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "szconfigmanager.GetDefaultConfigIdRequest";
  }
  protected:
  explicit GetDefaultConfigIdRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_szconfigmanager_2eproto);
    return ::descriptor_table_szconfigmanager_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:szconfigmanager.GetDefaultConfigIdRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_szconfigmanager_2eproto;
};
// -------------------------------------------------------------------

class GetDefaultConfigIdResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:szconfigmanager.GetDefaultConfigIdResponse) */ {
 public:
  inline GetDefaultConfigIdResponse() : GetDefaultConfigIdResponse(nullptr) {};
  virtual ~GetDefaultConfigIdResponse();

  GetDefaultConfigIdResponse(const GetDefaultConfigIdResponse& from);
  GetDefaultConfigIdResponse(GetDefaultConfigIdResponse&& from) noexcept
    : GetDefaultConfigIdResponse() {
    *this = ::std::move(from);
  }

  inline GetDefaultConfigIdResponse& operator=(const GetDefaultConfigIdResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetDefaultConfigIdResponse& operator=(GetDefaultConfigIdResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetDefaultConfigIdResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetDefaultConfigIdResponse* internal_default_instance() {
    return reinterpret_cast<const GetDefaultConfigIdResponse*>(
               &_GetDefaultConfigIdResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(GetDefaultConfigIdResponse& a, GetDefaultConfigIdResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetDefaultConfigIdResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetDefaultConfigIdResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetDefaultConfigIdResponse* New() const final {
    return CreateMaybeMessage<GetDefaultConfigIdResponse>(nullptr);
  }

  GetDefaultConfigIdResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetDefaultConfigIdResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetDefaultConfigIdResponse& from);
  void MergeFrom(const GetDefaultConfigIdResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetDefaultConfigIdResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "szconfigmanager.GetDefaultConfigIdResponse";
  }
  protected:
  explicit GetDefaultConfigIdResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_szconfigmanager_2eproto);
    return ::descriptor_table_szconfigmanager_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
  };
  // int64 result = 1;
  void clear_result();
  ::PROTOBUF_NAMESPACE_ID::int64 result() const;
  void set_result(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_result() const;
  void _internal_set_result(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:szconfigmanager.GetDefaultConfigIdResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int64 result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_szconfigmanager_2eproto;
};
// -------------------------------------------------------------------

class ReplaceDefaultConfigIdRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:szconfigmanager.ReplaceDefaultConfigIdRequest) */ {
 public:
  inline ReplaceDefaultConfigIdRequest() : ReplaceDefaultConfigIdRequest(nullptr) {};
  virtual ~ReplaceDefaultConfigIdRequest();

  ReplaceDefaultConfigIdRequest(const ReplaceDefaultConfigIdRequest& from);
  ReplaceDefaultConfigIdRequest(ReplaceDefaultConfigIdRequest&& from) noexcept
    : ReplaceDefaultConfigIdRequest() {
    *this = ::std::move(from);
  }

  inline ReplaceDefaultConfigIdRequest& operator=(const ReplaceDefaultConfigIdRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReplaceDefaultConfigIdRequest& operator=(ReplaceDefaultConfigIdRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ReplaceDefaultConfigIdRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReplaceDefaultConfigIdRequest* internal_default_instance() {
    return reinterpret_cast<const ReplaceDefaultConfigIdRequest*>(
               &_ReplaceDefaultConfigIdRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(ReplaceDefaultConfigIdRequest& a, ReplaceDefaultConfigIdRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ReplaceDefaultConfigIdRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReplaceDefaultConfigIdRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReplaceDefaultConfigIdRequest* New() const final {
    return CreateMaybeMessage<ReplaceDefaultConfigIdRequest>(nullptr);
  }

  ReplaceDefaultConfigIdRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReplaceDefaultConfigIdRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReplaceDefaultConfigIdRequest& from);
  void MergeFrom(const ReplaceDefaultConfigIdRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReplaceDefaultConfigIdRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "szconfigmanager.ReplaceDefaultConfigIdRequest";
  }
  protected:
  explicit ReplaceDefaultConfigIdRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_szconfigmanager_2eproto);
    return ::descriptor_table_szconfigmanager_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCurrentDefaultConfigIdFieldNumber = 1,
    kNewDefaultConfigIdFieldNumber = 2,
  };
  // int64 currentDefaultConfigId = 1;
  void clear_currentdefaultconfigid();
  ::PROTOBUF_NAMESPACE_ID::int64 currentdefaultconfigid() const;
  void set_currentdefaultconfigid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_currentdefaultconfigid() const;
  void _internal_set_currentdefaultconfigid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 newDefaultConfigId = 2;
  void clear_newdefaultconfigid();
  ::PROTOBUF_NAMESPACE_ID::int64 newdefaultconfigid() const;
  void set_newdefaultconfigid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_newdefaultconfigid() const;
  void _internal_set_newdefaultconfigid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:szconfigmanager.ReplaceDefaultConfigIdRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int64 currentdefaultconfigid_;
  ::PROTOBUF_NAMESPACE_ID::int64 newdefaultconfigid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_szconfigmanager_2eproto;
};
// -------------------------------------------------------------------

class ReplaceDefaultConfigIdResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:szconfigmanager.ReplaceDefaultConfigIdResponse) */ {
 public:
  inline ReplaceDefaultConfigIdResponse() : ReplaceDefaultConfigIdResponse(nullptr) {};
  virtual ~ReplaceDefaultConfigIdResponse();

  ReplaceDefaultConfigIdResponse(const ReplaceDefaultConfigIdResponse& from);
  ReplaceDefaultConfigIdResponse(ReplaceDefaultConfigIdResponse&& from) noexcept
    : ReplaceDefaultConfigIdResponse() {
    *this = ::std::move(from);
  }

  inline ReplaceDefaultConfigIdResponse& operator=(const ReplaceDefaultConfigIdResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReplaceDefaultConfigIdResponse& operator=(ReplaceDefaultConfigIdResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ReplaceDefaultConfigIdResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReplaceDefaultConfigIdResponse* internal_default_instance() {
    return reinterpret_cast<const ReplaceDefaultConfigIdResponse*>(
               &_ReplaceDefaultConfigIdResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(ReplaceDefaultConfigIdResponse& a, ReplaceDefaultConfigIdResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ReplaceDefaultConfigIdResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReplaceDefaultConfigIdResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReplaceDefaultConfigIdResponse* New() const final {
    return CreateMaybeMessage<ReplaceDefaultConfigIdResponse>(nullptr);
  }

  ReplaceDefaultConfigIdResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReplaceDefaultConfigIdResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReplaceDefaultConfigIdResponse& from);
  void MergeFrom(const ReplaceDefaultConfigIdResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReplaceDefaultConfigIdResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "szconfigmanager.ReplaceDefaultConfigIdResponse";
  }
  protected:
  explicit ReplaceDefaultConfigIdResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_szconfigmanager_2eproto);
    return ::descriptor_table_szconfigmanager_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:szconfigmanager.ReplaceDefaultConfigIdResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_szconfigmanager_2eproto;
};
// -------------------------------------------------------------------

class SetDefaultConfigIdRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:szconfigmanager.SetDefaultConfigIdRequest) */ {
 public:
  inline SetDefaultConfigIdRequest() : SetDefaultConfigIdRequest(nullptr) {};
  virtual ~SetDefaultConfigIdRequest();

  SetDefaultConfigIdRequest(const SetDefaultConfigIdRequest& from);
  SetDefaultConfigIdRequest(SetDefaultConfigIdRequest&& from) noexcept
    : SetDefaultConfigIdRequest() {
    *this = ::std::move(from);
  }

  inline SetDefaultConfigIdRequest& operator=(const SetDefaultConfigIdRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetDefaultConfigIdRequest& operator=(SetDefaultConfigIdRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SetDefaultConfigIdRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SetDefaultConfigIdRequest* internal_default_instance() {
    return reinterpret_cast<const SetDefaultConfigIdRequest*>(
               &_SetDefaultConfigIdRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(SetDefaultConfigIdRequest& a, SetDefaultConfigIdRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SetDefaultConfigIdRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetDefaultConfigIdRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SetDefaultConfigIdRequest* New() const final {
    return CreateMaybeMessage<SetDefaultConfigIdRequest>(nullptr);
  }

  SetDefaultConfigIdRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SetDefaultConfigIdRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SetDefaultConfigIdRequest& from);
  void MergeFrom(const SetDefaultConfigIdRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetDefaultConfigIdRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "szconfigmanager.SetDefaultConfigIdRequest";
  }
  protected:
  explicit SetDefaultConfigIdRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_szconfigmanager_2eproto);
    return ::descriptor_table_szconfigmanager_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConfigIdFieldNumber = 1,
  };
  // int64 configId = 1;
  void clear_configid();
  ::PROTOBUF_NAMESPACE_ID::int64 configid() const;
  void set_configid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_configid() const;
  void _internal_set_configid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:szconfigmanager.SetDefaultConfigIdRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int64 configid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_szconfigmanager_2eproto;
};
// -------------------------------------------------------------------

class SetDefaultConfigIdResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:szconfigmanager.SetDefaultConfigIdResponse) */ {
 public:
  inline SetDefaultConfigIdResponse() : SetDefaultConfigIdResponse(nullptr) {};
  virtual ~SetDefaultConfigIdResponse();

  SetDefaultConfigIdResponse(const SetDefaultConfigIdResponse& from);
  SetDefaultConfigIdResponse(SetDefaultConfigIdResponse&& from) noexcept
    : SetDefaultConfigIdResponse() {
    *this = ::std::move(from);
  }

  inline SetDefaultConfigIdResponse& operator=(const SetDefaultConfigIdResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetDefaultConfigIdResponse& operator=(SetDefaultConfigIdResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SetDefaultConfigIdResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SetDefaultConfigIdResponse* internal_default_instance() {
    return reinterpret_cast<const SetDefaultConfigIdResponse*>(
               &_SetDefaultConfigIdResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(SetDefaultConfigIdResponse& a, SetDefaultConfigIdResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SetDefaultConfigIdResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetDefaultConfigIdResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SetDefaultConfigIdResponse* New() const final {
    return CreateMaybeMessage<SetDefaultConfigIdResponse>(nullptr);
  }

  SetDefaultConfigIdResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SetDefaultConfigIdResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SetDefaultConfigIdResponse& from);
  void MergeFrom(const SetDefaultConfigIdResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetDefaultConfigIdResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "szconfigmanager.SetDefaultConfigIdResponse";
  }
  protected:
  explicit SetDefaultConfigIdResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_szconfigmanager_2eproto);
    return ::descriptor_table_szconfigmanager_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:szconfigmanager.SetDefaultConfigIdResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_szconfigmanager_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// AddConfigRequest

// string configDefinition = 1;
inline void AddConfigRequest::clear_configdefinition() {
  configdefinition_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& AddConfigRequest::configdefinition() const {
  // @@protoc_insertion_point(field_get:szconfigmanager.AddConfigRequest.configDefinition)
  return _internal_configdefinition();
}
inline void AddConfigRequest::set_configdefinition(const std::string& value) {
  _internal_set_configdefinition(value);
  // @@protoc_insertion_point(field_set:szconfigmanager.AddConfigRequest.configDefinition)
}
inline std::string* AddConfigRequest::mutable_configdefinition() {
  // @@protoc_insertion_point(field_mutable:szconfigmanager.AddConfigRequest.configDefinition)
  return _internal_mutable_configdefinition();
}
inline const std::string& AddConfigRequest::_internal_configdefinition() const {
  return configdefinition_.Get();
}
inline void AddConfigRequest::_internal_set_configdefinition(const std::string& value) {
  
  configdefinition_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void AddConfigRequest::set_configdefinition(std::string&& value) {
  
  configdefinition_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:szconfigmanager.AddConfigRequest.configDefinition)
}
inline void AddConfigRequest::set_configdefinition(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  configdefinition_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:szconfigmanager.AddConfigRequest.configDefinition)
}
inline void AddConfigRequest::set_configdefinition(const char* value,
    size_t size) {
  
  configdefinition_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:szconfigmanager.AddConfigRequest.configDefinition)
}
inline std::string* AddConfigRequest::_internal_mutable_configdefinition() {
  
  return configdefinition_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* AddConfigRequest::release_configdefinition() {
  // @@protoc_insertion_point(field_release:szconfigmanager.AddConfigRequest.configDefinition)
  return configdefinition_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AddConfigRequest::set_allocated_configdefinition(std::string* configdefinition) {
  if (configdefinition != nullptr) {
    
  } else {
    
  }
  configdefinition_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), configdefinition,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:szconfigmanager.AddConfigRequest.configDefinition)
}
inline std::string* AddConfigRequest::unsafe_arena_release_configdefinition() {
  // @@protoc_insertion_point(field_unsafe_arena_release:szconfigmanager.AddConfigRequest.configDefinition)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return configdefinition_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void AddConfigRequest::unsafe_arena_set_allocated_configdefinition(
    std::string* configdefinition) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (configdefinition != nullptr) {
    
  } else {
    
  }
  configdefinition_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      configdefinition, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:szconfigmanager.AddConfigRequest.configDefinition)
}

// string configComment = 2;
inline void AddConfigRequest::clear_configcomment() {
  configcomment_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& AddConfigRequest::configcomment() const {
  // @@protoc_insertion_point(field_get:szconfigmanager.AddConfigRequest.configComment)
  return _internal_configcomment();
}
inline void AddConfigRequest::set_configcomment(const std::string& value) {
  _internal_set_configcomment(value);
  // @@protoc_insertion_point(field_set:szconfigmanager.AddConfigRequest.configComment)
}
inline std::string* AddConfigRequest::mutable_configcomment() {
  // @@protoc_insertion_point(field_mutable:szconfigmanager.AddConfigRequest.configComment)
  return _internal_mutable_configcomment();
}
inline const std::string& AddConfigRequest::_internal_configcomment() const {
  return configcomment_.Get();
}
inline void AddConfigRequest::_internal_set_configcomment(const std::string& value) {
  
  configcomment_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void AddConfigRequest::set_configcomment(std::string&& value) {
  
  configcomment_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:szconfigmanager.AddConfigRequest.configComment)
}
inline void AddConfigRequest::set_configcomment(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  configcomment_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:szconfigmanager.AddConfigRequest.configComment)
}
inline void AddConfigRequest::set_configcomment(const char* value,
    size_t size) {
  
  configcomment_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:szconfigmanager.AddConfigRequest.configComment)
}
inline std::string* AddConfigRequest::_internal_mutable_configcomment() {
  
  return configcomment_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* AddConfigRequest::release_configcomment() {
  // @@protoc_insertion_point(field_release:szconfigmanager.AddConfigRequest.configComment)
  return configcomment_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AddConfigRequest::set_allocated_configcomment(std::string* configcomment) {
  if (configcomment != nullptr) {
    
  } else {
    
  }
  configcomment_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), configcomment,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:szconfigmanager.AddConfigRequest.configComment)
}
inline std::string* AddConfigRequest::unsafe_arena_release_configcomment() {
  // @@protoc_insertion_point(field_unsafe_arena_release:szconfigmanager.AddConfigRequest.configComment)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return configcomment_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void AddConfigRequest::unsafe_arena_set_allocated_configcomment(
    std::string* configcomment) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (configcomment != nullptr) {
    
  } else {
    
  }
  configcomment_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      configcomment, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:szconfigmanager.AddConfigRequest.configComment)
}

// -------------------------------------------------------------------

// AddConfigResponse

// int64 result = 1;
inline void AddConfigResponse::clear_result() {
  result_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AddConfigResponse::_internal_result() const {
  return result_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AddConfigResponse::result() const {
  // @@protoc_insertion_point(field_get:szconfigmanager.AddConfigResponse.result)
  return _internal_result();
}
inline void AddConfigResponse::_internal_set_result(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  result_ = value;
}
inline void AddConfigResponse::set_result(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:szconfigmanager.AddConfigResponse.result)
}

// -------------------------------------------------------------------

// GetConfigRequest

// int64 configId = 1;
inline void GetConfigRequest::clear_configid() {
  configid_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GetConfigRequest::_internal_configid() const {
  return configid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GetConfigRequest::configid() const {
  // @@protoc_insertion_point(field_get:szconfigmanager.GetConfigRequest.configId)
  return _internal_configid();
}
inline void GetConfigRequest::_internal_set_configid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  configid_ = value;
}
inline void GetConfigRequest::set_configid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_configid(value);
  // @@protoc_insertion_point(field_set:szconfigmanager.GetConfigRequest.configId)
}

// -------------------------------------------------------------------

// GetConfigResponse

// string result = 1;
inline void GetConfigResponse::clear_result() {
  result_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GetConfigResponse::result() const {
  // @@protoc_insertion_point(field_get:szconfigmanager.GetConfigResponse.result)
  return _internal_result();
}
inline void GetConfigResponse::set_result(const std::string& value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:szconfigmanager.GetConfigResponse.result)
}
inline std::string* GetConfigResponse::mutable_result() {
  // @@protoc_insertion_point(field_mutable:szconfigmanager.GetConfigResponse.result)
  return _internal_mutable_result();
}
inline const std::string& GetConfigResponse::_internal_result() const {
  return result_.Get();
}
inline void GetConfigResponse::_internal_set_result(const std::string& value) {
  
  result_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetConfigResponse::set_result(std::string&& value) {
  
  result_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:szconfigmanager.GetConfigResponse.result)
}
inline void GetConfigResponse::set_result(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  result_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:szconfigmanager.GetConfigResponse.result)
}
inline void GetConfigResponse::set_result(const char* value,
    size_t size) {
  
  result_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:szconfigmanager.GetConfigResponse.result)
}
inline std::string* GetConfigResponse::_internal_mutable_result() {
  
  return result_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetConfigResponse::release_result() {
  // @@protoc_insertion_point(field_release:szconfigmanager.GetConfigResponse.result)
  return result_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetConfigResponse::set_allocated_result(std::string* result) {
  if (result != nullptr) {
    
  } else {
    
  }
  result_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), result,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:szconfigmanager.GetConfigResponse.result)
}
inline std::string* GetConfigResponse::unsafe_arena_release_result() {
  // @@protoc_insertion_point(field_unsafe_arena_release:szconfigmanager.GetConfigResponse.result)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return result_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void GetConfigResponse::unsafe_arena_set_allocated_result(
    std::string* result) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (result != nullptr) {
    
  } else {
    
  }
  result_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      result, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:szconfigmanager.GetConfigResponse.result)
}

// -------------------------------------------------------------------

// GetConfigsRequest

// -------------------------------------------------------------------

// GetConfigsResponse

// string result = 1;
inline void GetConfigsResponse::clear_result() {
  result_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GetConfigsResponse::result() const {
  // @@protoc_insertion_point(field_get:szconfigmanager.GetConfigsResponse.result)
  return _internal_result();
}
inline void GetConfigsResponse::set_result(const std::string& value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:szconfigmanager.GetConfigsResponse.result)
}
inline std::string* GetConfigsResponse::mutable_result() {
  // @@protoc_insertion_point(field_mutable:szconfigmanager.GetConfigsResponse.result)
  return _internal_mutable_result();
}
inline const std::string& GetConfigsResponse::_internal_result() const {
  return result_.Get();
}
inline void GetConfigsResponse::_internal_set_result(const std::string& value) {
  
  result_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetConfigsResponse::set_result(std::string&& value) {
  
  result_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:szconfigmanager.GetConfigsResponse.result)
}
inline void GetConfigsResponse::set_result(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  result_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:szconfigmanager.GetConfigsResponse.result)
}
inline void GetConfigsResponse::set_result(const char* value,
    size_t size) {
  
  result_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:szconfigmanager.GetConfigsResponse.result)
}
inline std::string* GetConfigsResponse::_internal_mutable_result() {
  
  return result_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetConfigsResponse::release_result() {
  // @@protoc_insertion_point(field_release:szconfigmanager.GetConfigsResponse.result)
  return result_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetConfigsResponse::set_allocated_result(std::string* result) {
  if (result != nullptr) {
    
  } else {
    
  }
  result_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), result,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:szconfigmanager.GetConfigsResponse.result)
}
inline std::string* GetConfigsResponse::unsafe_arena_release_result() {
  // @@protoc_insertion_point(field_unsafe_arena_release:szconfigmanager.GetConfigsResponse.result)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return result_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void GetConfigsResponse::unsafe_arena_set_allocated_result(
    std::string* result) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (result != nullptr) {
    
  } else {
    
  }
  result_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      result, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:szconfigmanager.GetConfigsResponse.result)
}

// -------------------------------------------------------------------

// GetDefaultConfigIdRequest

// -------------------------------------------------------------------

// GetDefaultConfigIdResponse

// int64 result = 1;
inline void GetDefaultConfigIdResponse::clear_result() {
  result_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GetDefaultConfigIdResponse::_internal_result() const {
  return result_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GetDefaultConfigIdResponse::result() const {
  // @@protoc_insertion_point(field_get:szconfigmanager.GetDefaultConfigIdResponse.result)
  return _internal_result();
}
inline void GetDefaultConfigIdResponse::_internal_set_result(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  result_ = value;
}
inline void GetDefaultConfigIdResponse::set_result(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:szconfigmanager.GetDefaultConfigIdResponse.result)
}

// -------------------------------------------------------------------

// ReplaceDefaultConfigIdRequest

// int64 currentDefaultConfigId = 1;
inline void ReplaceDefaultConfigIdRequest::clear_currentdefaultconfigid() {
  currentdefaultconfigid_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ReplaceDefaultConfigIdRequest::_internal_currentdefaultconfigid() const {
  return currentdefaultconfigid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ReplaceDefaultConfigIdRequest::currentdefaultconfigid() const {
  // @@protoc_insertion_point(field_get:szconfigmanager.ReplaceDefaultConfigIdRequest.currentDefaultConfigId)
  return _internal_currentdefaultconfigid();
}
inline void ReplaceDefaultConfigIdRequest::_internal_set_currentdefaultconfigid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  currentdefaultconfigid_ = value;
}
inline void ReplaceDefaultConfigIdRequest::set_currentdefaultconfigid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_currentdefaultconfigid(value);
  // @@protoc_insertion_point(field_set:szconfigmanager.ReplaceDefaultConfigIdRequest.currentDefaultConfigId)
}

// int64 newDefaultConfigId = 2;
inline void ReplaceDefaultConfigIdRequest::clear_newdefaultconfigid() {
  newdefaultconfigid_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ReplaceDefaultConfigIdRequest::_internal_newdefaultconfigid() const {
  return newdefaultconfigid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ReplaceDefaultConfigIdRequest::newdefaultconfigid() const {
  // @@protoc_insertion_point(field_get:szconfigmanager.ReplaceDefaultConfigIdRequest.newDefaultConfigId)
  return _internal_newdefaultconfigid();
}
inline void ReplaceDefaultConfigIdRequest::_internal_set_newdefaultconfigid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  newdefaultconfigid_ = value;
}
inline void ReplaceDefaultConfigIdRequest::set_newdefaultconfigid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_newdefaultconfigid(value);
  // @@protoc_insertion_point(field_set:szconfigmanager.ReplaceDefaultConfigIdRequest.newDefaultConfigId)
}

// -------------------------------------------------------------------

// ReplaceDefaultConfigIdResponse

// -------------------------------------------------------------------

// SetDefaultConfigIdRequest

// int64 configId = 1;
inline void SetDefaultConfigIdRequest::clear_configid() {
  configid_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SetDefaultConfigIdRequest::_internal_configid() const {
  return configid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SetDefaultConfigIdRequest::configid() const {
  // @@protoc_insertion_point(field_get:szconfigmanager.SetDefaultConfigIdRequest.configId)
  return _internal_configid();
}
inline void SetDefaultConfigIdRequest::_internal_set_configid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  configid_ = value;
}
inline void SetDefaultConfigIdRequest::set_configid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_configid(value);
  // @@protoc_insertion_point(field_set:szconfigmanager.SetDefaultConfigIdRequest.configId)
}

// -------------------------------------------------------------------

// SetDefaultConfigIdResponse

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace szconfigmanager

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_szconfigmanager_2eproto
