// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: szconfigmanager.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_szconfigmanager_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_szconfigmanager_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_szconfigmanager_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_szconfigmanager_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_szconfigmanager_2eproto;
namespace szconfigmanager {
class GetConfigRegistryRequest;
struct GetConfigRegistryRequestDefaultTypeInternal;
extern GetConfigRegistryRequestDefaultTypeInternal _GetConfigRegistryRequest_default_instance_;
class GetConfigRegistryResponse;
struct GetConfigRegistryResponseDefaultTypeInternal;
extern GetConfigRegistryResponseDefaultTypeInternal _GetConfigRegistryResponse_default_instance_;
class GetConfigRequest;
struct GetConfigRequestDefaultTypeInternal;
extern GetConfigRequestDefaultTypeInternal _GetConfigRequest_default_instance_;
class GetConfigResponse;
struct GetConfigResponseDefaultTypeInternal;
extern GetConfigResponseDefaultTypeInternal _GetConfigResponse_default_instance_;
class GetDefaultConfigIdRequest;
struct GetDefaultConfigIdRequestDefaultTypeInternal;
extern GetDefaultConfigIdRequestDefaultTypeInternal _GetDefaultConfigIdRequest_default_instance_;
class GetDefaultConfigIdResponse;
struct GetDefaultConfigIdResponseDefaultTypeInternal;
extern GetDefaultConfigIdResponseDefaultTypeInternal _GetDefaultConfigIdResponse_default_instance_;
class GetTemplateConfigRequest;
struct GetTemplateConfigRequestDefaultTypeInternal;
extern GetTemplateConfigRequestDefaultTypeInternal _GetTemplateConfigRequest_default_instance_;
class GetTemplateConfigResponse;
struct GetTemplateConfigResponseDefaultTypeInternal;
extern GetTemplateConfigResponseDefaultTypeInternal _GetTemplateConfigResponse_default_instance_;
class RegisterConfigRequest;
struct RegisterConfigRequestDefaultTypeInternal;
extern RegisterConfigRequestDefaultTypeInternal _RegisterConfigRequest_default_instance_;
class RegisterConfigResponse;
struct RegisterConfigResponseDefaultTypeInternal;
extern RegisterConfigResponseDefaultTypeInternal _RegisterConfigResponse_default_instance_;
class ReplaceDefaultConfigIdRequest;
struct ReplaceDefaultConfigIdRequestDefaultTypeInternal;
extern ReplaceDefaultConfigIdRequestDefaultTypeInternal _ReplaceDefaultConfigIdRequest_default_instance_;
class ReplaceDefaultConfigIdResponse;
struct ReplaceDefaultConfigIdResponseDefaultTypeInternal;
extern ReplaceDefaultConfigIdResponseDefaultTypeInternal _ReplaceDefaultConfigIdResponse_default_instance_;
class SetDefaultConfigIdRequest;
struct SetDefaultConfigIdRequestDefaultTypeInternal;
extern SetDefaultConfigIdRequestDefaultTypeInternal _SetDefaultConfigIdRequest_default_instance_;
class SetDefaultConfigIdResponse;
struct SetDefaultConfigIdResponseDefaultTypeInternal;
extern SetDefaultConfigIdResponseDefaultTypeInternal _SetDefaultConfigIdResponse_default_instance_;
class SetDefaultConfigRequest;
struct SetDefaultConfigRequestDefaultTypeInternal;
extern SetDefaultConfigRequestDefaultTypeInternal _SetDefaultConfigRequest_default_instance_;
class SetDefaultConfigResponse;
struct SetDefaultConfigResponseDefaultTypeInternal;
extern SetDefaultConfigResponseDefaultTypeInternal _SetDefaultConfigResponse_default_instance_;
}  // namespace szconfigmanager
PROTOBUF_NAMESPACE_OPEN
template<> ::szconfigmanager::GetConfigRegistryRequest* Arena::CreateMaybeMessage<::szconfigmanager::GetConfigRegistryRequest>(Arena*);
template<> ::szconfigmanager::GetConfigRegistryResponse* Arena::CreateMaybeMessage<::szconfigmanager::GetConfigRegistryResponse>(Arena*);
template<> ::szconfigmanager::GetConfigRequest* Arena::CreateMaybeMessage<::szconfigmanager::GetConfigRequest>(Arena*);
template<> ::szconfigmanager::GetConfigResponse* Arena::CreateMaybeMessage<::szconfigmanager::GetConfigResponse>(Arena*);
template<> ::szconfigmanager::GetDefaultConfigIdRequest* Arena::CreateMaybeMessage<::szconfigmanager::GetDefaultConfigIdRequest>(Arena*);
template<> ::szconfigmanager::GetDefaultConfigIdResponse* Arena::CreateMaybeMessage<::szconfigmanager::GetDefaultConfigIdResponse>(Arena*);
template<> ::szconfigmanager::GetTemplateConfigRequest* Arena::CreateMaybeMessage<::szconfigmanager::GetTemplateConfigRequest>(Arena*);
template<> ::szconfigmanager::GetTemplateConfigResponse* Arena::CreateMaybeMessage<::szconfigmanager::GetTemplateConfigResponse>(Arena*);
template<> ::szconfigmanager::RegisterConfigRequest* Arena::CreateMaybeMessage<::szconfigmanager::RegisterConfigRequest>(Arena*);
template<> ::szconfigmanager::RegisterConfigResponse* Arena::CreateMaybeMessage<::szconfigmanager::RegisterConfigResponse>(Arena*);
template<> ::szconfigmanager::ReplaceDefaultConfigIdRequest* Arena::CreateMaybeMessage<::szconfigmanager::ReplaceDefaultConfigIdRequest>(Arena*);
template<> ::szconfigmanager::ReplaceDefaultConfigIdResponse* Arena::CreateMaybeMessage<::szconfigmanager::ReplaceDefaultConfigIdResponse>(Arena*);
template<> ::szconfigmanager::SetDefaultConfigIdRequest* Arena::CreateMaybeMessage<::szconfigmanager::SetDefaultConfigIdRequest>(Arena*);
template<> ::szconfigmanager::SetDefaultConfigIdResponse* Arena::CreateMaybeMessage<::szconfigmanager::SetDefaultConfigIdResponse>(Arena*);
template<> ::szconfigmanager::SetDefaultConfigRequest* Arena::CreateMaybeMessage<::szconfigmanager::SetDefaultConfigRequest>(Arena*);
template<> ::szconfigmanager::SetDefaultConfigResponse* Arena::CreateMaybeMessage<::szconfigmanager::SetDefaultConfigResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace szconfigmanager {

// ===================================================================

class GetConfigRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:szconfigmanager.GetConfigRequest) */ {
 public:
  inline GetConfigRequest() : GetConfigRequest(nullptr) {}
  ~GetConfigRequest() override;
  explicit PROTOBUF_CONSTEXPR GetConfigRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetConfigRequest(const GetConfigRequest& from);
  GetConfigRequest(GetConfigRequest&& from) noexcept
    : GetConfigRequest() {
    *this = ::std::move(from);
  }

  inline GetConfigRequest& operator=(const GetConfigRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetConfigRequest& operator=(GetConfigRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetConfigRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetConfigRequest* internal_default_instance() {
    return reinterpret_cast<const GetConfigRequest*>(
               &_GetConfigRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(GetConfigRequest& a, GetConfigRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetConfigRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetConfigRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetConfigRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetConfigRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetConfigRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetConfigRequest& from) {
    GetConfigRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetConfigRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "szconfigmanager.GetConfigRequest";
  }
  protected:
  explicit GetConfigRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConfigIdFieldNumber = 1,
  };
  // int64 config_id = 1;
  void clear_config_id();
  int64_t config_id() const;
  void set_config_id(int64_t value);
  private:
  int64_t _internal_config_id() const;
  void _internal_set_config_id(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:szconfigmanager.GetConfigRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int64_t config_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_szconfigmanager_2eproto;
};
// -------------------------------------------------------------------

class GetConfigResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:szconfigmanager.GetConfigResponse) */ {
 public:
  inline GetConfigResponse() : GetConfigResponse(nullptr) {}
  ~GetConfigResponse() override;
  explicit PROTOBUF_CONSTEXPR GetConfigResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetConfigResponse(const GetConfigResponse& from);
  GetConfigResponse(GetConfigResponse&& from) noexcept
    : GetConfigResponse() {
    *this = ::std::move(from);
  }

  inline GetConfigResponse& operator=(const GetConfigResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetConfigResponse& operator=(GetConfigResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetConfigResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetConfigResponse* internal_default_instance() {
    return reinterpret_cast<const GetConfigResponse*>(
               &_GetConfigResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(GetConfigResponse& a, GetConfigResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetConfigResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetConfigResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetConfigResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetConfigResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetConfigResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetConfigResponse& from) {
    GetConfigResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetConfigResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "szconfigmanager.GetConfigResponse";
  }
  protected:
  explicit GetConfigResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
  };
  // string result = 1;
  void clear_result();
  const std::string& result() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_result(ArgT0&& arg0, ArgT... args);
  std::string* mutable_result();
  PROTOBUF_NODISCARD std::string* release_result();
  void set_allocated_result(std::string* result);
  private:
  const std::string& _internal_result() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_result(const std::string& value);
  std::string* _internal_mutable_result();
  public:

  // @@protoc_insertion_point(class_scope:szconfigmanager.GetConfigResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr result_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_szconfigmanager_2eproto;
};
// -------------------------------------------------------------------

class GetConfigRegistryRequest final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:szconfigmanager.GetConfigRegistryRequest) */ {
 public:
  inline GetConfigRegistryRequest() : GetConfigRegistryRequest(nullptr) {}
  explicit PROTOBUF_CONSTEXPR GetConfigRegistryRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetConfigRegistryRequest(const GetConfigRegistryRequest& from);
  GetConfigRegistryRequest(GetConfigRegistryRequest&& from) noexcept
    : GetConfigRegistryRequest() {
    *this = ::std::move(from);
  }

  inline GetConfigRegistryRequest& operator=(const GetConfigRegistryRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetConfigRegistryRequest& operator=(GetConfigRegistryRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetConfigRegistryRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetConfigRegistryRequest* internal_default_instance() {
    return reinterpret_cast<const GetConfigRegistryRequest*>(
               &_GetConfigRegistryRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(GetConfigRegistryRequest& a, GetConfigRegistryRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetConfigRegistryRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetConfigRegistryRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetConfigRegistryRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetConfigRegistryRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const GetConfigRegistryRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const GetConfigRegistryRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "szconfigmanager.GetConfigRegistryRequest";
  }
  protected:
  explicit GetConfigRegistryRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:szconfigmanager.GetConfigRegistryRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_szconfigmanager_2eproto;
};
// -------------------------------------------------------------------

class GetConfigRegistryResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:szconfigmanager.GetConfigRegistryResponse) */ {
 public:
  inline GetConfigRegistryResponse() : GetConfigRegistryResponse(nullptr) {}
  ~GetConfigRegistryResponse() override;
  explicit PROTOBUF_CONSTEXPR GetConfigRegistryResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetConfigRegistryResponse(const GetConfigRegistryResponse& from);
  GetConfigRegistryResponse(GetConfigRegistryResponse&& from) noexcept
    : GetConfigRegistryResponse() {
    *this = ::std::move(from);
  }

  inline GetConfigRegistryResponse& operator=(const GetConfigRegistryResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetConfigRegistryResponse& operator=(GetConfigRegistryResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetConfigRegistryResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetConfigRegistryResponse* internal_default_instance() {
    return reinterpret_cast<const GetConfigRegistryResponse*>(
               &_GetConfigRegistryResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(GetConfigRegistryResponse& a, GetConfigRegistryResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetConfigRegistryResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetConfigRegistryResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetConfigRegistryResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetConfigRegistryResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetConfigRegistryResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetConfigRegistryResponse& from) {
    GetConfigRegistryResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetConfigRegistryResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "szconfigmanager.GetConfigRegistryResponse";
  }
  protected:
  explicit GetConfigRegistryResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
  };
  // string result = 1;
  void clear_result();
  const std::string& result() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_result(ArgT0&& arg0, ArgT... args);
  std::string* mutable_result();
  PROTOBUF_NODISCARD std::string* release_result();
  void set_allocated_result(std::string* result);
  private:
  const std::string& _internal_result() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_result(const std::string& value);
  std::string* _internal_mutable_result();
  public:

  // @@protoc_insertion_point(class_scope:szconfigmanager.GetConfigRegistryResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr result_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_szconfigmanager_2eproto;
};
// -------------------------------------------------------------------

class GetDefaultConfigIdRequest final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:szconfigmanager.GetDefaultConfigIdRequest) */ {
 public:
  inline GetDefaultConfigIdRequest() : GetDefaultConfigIdRequest(nullptr) {}
  explicit PROTOBUF_CONSTEXPR GetDefaultConfigIdRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetDefaultConfigIdRequest(const GetDefaultConfigIdRequest& from);
  GetDefaultConfigIdRequest(GetDefaultConfigIdRequest&& from) noexcept
    : GetDefaultConfigIdRequest() {
    *this = ::std::move(from);
  }

  inline GetDefaultConfigIdRequest& operator=(const GetDefaultConfigIdRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetDefaultConfigIdRequest& operator=(GetDefaultConfigIdRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetDefaultConfigIdRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetDefaultConfigIdRequest* internal_default_instance() {
    return reinterpret_cast<const GetDefaultConfigIdRequest*>(
               &_GetDefaultConfigIdRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(GetDefaultConfigIdRequest& a, GetDefaultConfigIdRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetDefaultConfigIdRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetDefaultConfigIdRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetDefaultConfigIdRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetDefaultConfigIdRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const GetDefaultConfigIdRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const GetDefaultConfigIdRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "szconfigmanager.GetDefaultConfigIdRequest";
  }
  protected:
  explicit GetDefaultConfigIdRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:szconfigmanager.GetDefaultConfigIdRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_szconfigmanager_2eproto;
};
// -------------------------------------------------------------------

class GetDefaultConfigIdResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:szconfigmanager.GetDefaultConfigIdResponse) */ {
 public:
  inline GetDefaultConfigIdResponse() : GetDefaultConfigIdResponse(nullptr) {}
  ~GetDefaultConfigIdResponse() override;
  explicit PROTOBUF_CONSTEXPR GetDefaultConfigIdResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetDefaultConfigIdResponse(const GetDefaultConfigIdResponse& from);
  GetDefaultConfigIdResponse(GetDefaultConfigIdResponse&& from) noexcept
    : GetDefaultConfigIdResponse() {
    *this = ::std::move(from);
  }

  inline GetDefaultConfigIdResponse& operator=(const GetDefaultConfigIdResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetDefaultConfigIdResponse& operator=(GetDefaultConfigIdResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetDefaultConfigIdResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetDefaultConfigIdResponse* internal_default_instance() {
    return reinterpret_cast<const GetDefaultConfigIdResponse*>(
               &_GetDefaultConfigIdResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(GetDefaultConfigIdResponse& a, GetDefaultConfigIdResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetDefaultConfigIdResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetDefaultConfigIdResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetDefaultConfigIdResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetDefaultConfigIdResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetDefaultConfigIdResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetDefaultConfigIdResponse& from) {
    GetDefaultConfigIdResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetDefaultConfigIdResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "szconfigmanager.GetDefaultConfigIdResponse";
  }
  protected:
  explicit GetDefaultConfigIdResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
  };
  // int64 result = 1;
  void clear_result();
  int64_t result() const;
  void set_result(int64_t value);
  private:
  int64_t _internal_result() const;
  void _internal_set_result(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:szconfigmanager.GetDefaultConfigIdResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int64_t result_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_szconfigmanager_2eproto;
};
// -------------------------------------------------------------------

class GetTemplateConfigRequest final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:szconfigmanager.GetTemplateConfigRequest) */ {
 public:
  inline GetTemplateConfigRequest() : GetTemplateConfigRequest(nullptr) {}
  explicit PROTOBUF_CONSTEXPR GetTemplateConfigRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetTemplateConfigRequest(const GetTemplateConfigRequest& from);
  GetTemplateConfigRequest(GetTemplateConfigRequest&& from) noexcept
    : GetTemplateConfigRequest() {
    *this = ::std::move(from);
  }

  inline GetTemplateConfigRequest& operator=(const GetTemplateConfigRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetTemplateConfigRequest& operator=(GetTemplateConfigRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetTemplateConfigRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetTemplateConfigRequest* internal_default_instance() {
    return reinterpret_cast<const GetTemplateConfigRequest*>(
               &_GetTemplateConfigRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(GetTemplateConfigRequest& a, GetTemplateConfigRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetTemplateConfigRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetTemplateConfigRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetTemplateConfigRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetTemplateConfigRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const GetTemplateConfigRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const GetTemplateConfigRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "szconfigmanager.GetTemplateConfigRequest";
  }
  protected:
  explicit GetTemplateConfigRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:szconfigmanager.GetTemplateConfigRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_szconfigmanager_2eproto;
};
// -------------------------------------------------------------------

class GetTemplateConfigResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:szconfigmanager.GetTemplateConfigResponse) */ {
 public:
  inline GetTemplateConfigResponse() : GetTemplateConfigResponse(nullptr) {}
  ~GetTemplateConfigResponse() override;
  explicit PROTOBUF_CONSTEXPR GetTemplateConfigResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetTemplateConfigResponse(const GetTemplateConfigResponse& from);
  GetTemplateConfigResponse(GetTemplateConfigResponse&& from) noexcept
    : GetTemplateConfigResponse() {
    *this = ::std::move(from);
  }

  inline GetTemplateConfigResponse& operator=(const GetTemplateConfigResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetTemplateConfigResponse& operator=(GetTemplateConfigResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetTemplateConfigResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetTemplateConfigResponse* internal_default_instance() {
    return reinterpret_cast<const GetTemplateConfigResponse*>(
               &_GetTemplateConfigResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(GetTemplateConfigResponse& a, GetTemplateConfigResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetTemplateConfigResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetTemplateConfigResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetTemplateConfigResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetTemplateConfigResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetTemplateConfigResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetTemplateConfigResponse& from) {
    GetTemplateConfigResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetTemplateConfigResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "szconfigmanager.GetTemplateConfigResponse";
  }
  protected:
  explicit GetTemplateConfigResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
  };
  // string result = 1;
  void clear_result();
  const std::string& result() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_result(ArgT0&& arg0, ArgT... args);
  std::string* mutable_result();
  PROTOBUF_NODISCARD std::string* release_result();
  void set_allocated_result(std::string* result);
  private:
  const std::string& _internal_result() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_result(const std::string& value);
  std::string* _internal_mutable_result();
  public:

  // @@protoc_insertion_point(class_scope:szconfigmanager.GetTemplateConfigResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr result_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_szconfigmanager_2eproto;
};
// -------------------------------------------------------------------

class RegisterConfigRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:szconfigmanager.RegisterConfigRequest) */ {
 public:
  inline RegisterConfigRequest() : RegisterConfigRequest(nullptr) {}
  ~RegisterConfigRequest() override;
  explicit PROTOBUF_CONSTEXPR RegisterConfigRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RegisterConfigRequest(const RegisterConfigRequest& from);
  RegisterConfigRequest(RegisterConfigRequest&& from) noexcept
    : RegisterConfigRequest() {
    *this = ::std::move(from);
  }

  inline RegisterConfigRequest& operator=(const RegisterConfigRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline RegisterConfigRequest& operator=(RegisterConfigRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RegisterConfigRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const RegisterConfigRequest* internal_default_instance() {
    return reinterpret_cast<const RegisterConfigRequest*>(
               &_RegisterConfigRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(RegisterConfigRequest& a, RegisterConfigRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(RegisterConfigRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RegisterConfigRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RegisterConfigRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RegisterConfigRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RegisterConfigRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RegisterConfigRequest& from) {
    RegisterConfigRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RegisterConfigRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "szconfigmanager.RegisterConfigRequest";
  }
  protected:
  explicit RegisterConfigRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConfigDefinitionFieldNumber = 1,
    kConfigCommentFieldNumber = 2,
  };
  // string config_definition = 1;
  void clear_config_definition();
  const std::string& config_definition() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_config_definition(ArgT0&& arg0, ArgT... args);
  std::string* mutable_config_definition();
  PROTOBUF_NODISCARD std::string* release_config_definition();
  void set_allocated_config_definition(std::string* config_definition);
  private:
  const std::string& _internal_config_definition() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_config_definition(const std::string& value);
  std::string* _internal_mutable_config_definition();
  public:

  // string config_comment = 2;
  void clear_config_comment();
  const std::string& config_comment() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_config_comment(ArgT0&& arg0, ArgT... args);
  std::string* mutable_config_comment();
  PROTOBUF_NODISCARD std::string* release_config_comment();
  void set_allocated_config_comment(std::string* config_comment);
  private:
  const std::string& _internal_config_comment() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_config_comment(const std::string& value);
  std::string* _internal_mutable_config_comment();
  public:

  // @@protoc_insertion_point(class_scope:szconfigmanager.RegisterConfigRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr config_definition_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr config_comment_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_szconfigmanager_2eproto;
};
// -------------------------------------------------------------------

class RegisterConfigResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:szconfigmanager.RegisterConfigResponse) */ {
 public:
  inline RegisterConfigResponse() : RegisterConfigResponse(nullptr) {}
  ~RegisterConfigResponse() override;
  explicit PROTOBUF_CONSTEXPR RegisterConfigResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RegisterConfigResponse(const RegisterConfigResponse& from);
  RegisterConfigResponse(RegisterConfigResponse&& from) noexcept
    : RegisterConfigResponse() {
    *this = ::std::move(from);
  }

  inline RegisterConfigResponse& operator=(const RegisterConfigResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline RegisterConfigResponse& operator=(RegisterConfigResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RegisterConfigResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const RegisterConfigResponse* internal_default_instance() {
    return reinterpret_cast<const RegisterConfigResponse*>(
               &_RegisterConfigResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(RegisterConfigResponse& a, RegisterConfigResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(RegisterConfigResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RegisterConfigResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RegisterConfigResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RegisterConfigResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RegisterConfigResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RegisterConfigResponse& from) {
    RegisterConfigResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RegisterConfigResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "szconfigmanager.RegisterConfigResponse";
  }
  protected:
  explicit RegisterConfigResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
  };
  // int64 result = 1;
  void clear_result();
  int64_t result() const;
  void set_result(int64_t value);
  private:
  int64_t _internal_result() const;
  void _internal_set_result(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:szconfigmanager.RegisterConfigResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int64_t result_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_szconfigmanager_2eproto;
};
// -------------------------------------------------------------------

class ReplaceDefaultConfigIdRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:szconfigmanager.ReplaceDefaultConfigIdRequest) */ {
 public:
  inline ReplaceDefaultConfigIdRequest() : ReplaceDefaultConfigIdRequest(nullptr) {}
  ~ReplaceDefaultConfigIdRequest() override;
  explicit PROTOBUF_CONSTEXPR ReplaceDefaultConfigIdRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReplaceDefaultConfigIdRequest(const ReplaceDefaultConfigIdRequest& from);
  ReplaceDefaultConfigIdRequest(ReplaceDefaultConfigIdRequest&& from) noexcept
    : ReplaceDefaultConfigIdRequest() {
    *this = ::std::move(from);
  }

  inline ReplaceDefaultConfigIdRequest& operator=(const ReplaceDefaultConfigIdRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReplaceDefaultConfigIdRequest& operator=(ReplaceDefaultConfigIdRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReplaceDefaultConfigIdRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReplaceDefaultConfigIdRequest* internal_default_instance() {
    return reinterpret_cast<const ReplaceDefaultConfigIdRequest*>(
               &_ReplaceDefaultConfigIdRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(ReplaceDefaultConfigIdRequest& a, ReplaceDefaultConfigIdRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ReplaceDefaultConfigIdRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReplaceDefaultConfigIdRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ReplaceDefaultConfigIdRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ReplaceDefaultConfigIdRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ReplaceDefaultConfigIdRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ReplaceDefaultConfigIdRequest& from) {
    ReplaceDefaultConfigIdRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReplaceDefaultConfigIdRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "szconfigmanager.ReplaceDefaultConfigIdRequest";
  }
  protected:
  explicit ReplaceDefaultConfigIdRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCurrentDefaultConfigIdFieldNumber = 1,
    kNewDefaultConfigIdFieldNumber = 2,
  };
  // int64 current_default_config_id = 1;
  void clear_current_default_config_id();
  int64_t current_default_config_id() const;
  void set_current_default_config_id(int64_t value);
  private:
  int64_t _internal_current_default_config_id() const;
  void _internal_set_current_default_config_id(int64_t value);
  public:

  // int64 new_default_config_id = 2;
  void clear_new_default_config_id();
  int64_t new_default_config_id() const;
  void set_new_default_config_id(int64_t value);
  private:
  int64_t _internal_new_default_config_id() const;
  void _internal_set_new_default_config_id(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:szconfigmanager.ReplaceDefaultConfigIdRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int64_t current_default_config_id_;
    int64_t new_default_config_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_szconfigmanager_2eproto;
};
// -------------------------------------------------------------------

class ReplaceDefaultConfigIdResponse final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:szconfigmanager.ReplaceDefaultConfigIdResponse) */ {
 public:
  inline ReplaceDefaultConfigIdResponse() : ReplaceDefaultConfigIdResponse(nullptr) {}
  explicit PROTOBUF_CONSTEXPR ReplaceDefaultConfigIdResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReplaceDefaultConfigIdResponse(const ReplaceDefaultConfigIdResponse& from);
  ReplaceDefaultConfigIdResponse(ReplaceDefaultConfigIdResponse&& from) noexcept
    : ReplaceDefaultConfigIdResponse() {
    *this = ::std::move(from);
  }

  inline ReplaceDefaultConfigIdResponse& operator=(const ReplaceDefaultConfigIdResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReplaceDefaultConfigIdResponse& operator=(ReplaceDefaultConfigIdResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReplaceDefaultConfigIdResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReplaceDefaultConfigIdResponse* internal_default_instance() {
    return reinterpret_cast<const ReplaceDefaultConfigIdResponse*>(
               &_ReplaceDefaultConfigIdResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(ReplaceDefaultConfigIdResponse& a, ReplaceDefaultConfigIdResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ReplaceDefaultConfigIdResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReplaceDefaultConfigIdResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ReplaceDefaultConfigIdResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ReplaceDefaultConfigIdResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const ReplaceDefaultConfigIdResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const ReplaceDefaultConfigIdResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "szconfigmanager.ReplaceDefaultConfigIdResponse";
  }
  protected:
  explicit ReplaceDefaultConfigIdResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:szconfigmanager.ReplaceDefaultConfigIdResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_szconfigmanager_2eproto;
};
// -------------------------------------------------------------------

class SetDefaultConfigRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:szconfigmanager.SetDefaultConfigRequest) */ {
 public:
  inline SetDefaultConfigRequest() : SetDefaultConfigRequest(nullptr) {}
  ~SetDefaultConfigRequest() override;
  explicit PROTOBUF_CONSTEXPR SetDefaultConfigRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetDefaultConfigRequest(const SetDefaultConfigRequest& from);
  SetDefaultConfigRequest(SetDefaultConfigRequest&& from) noexcept
    : SetDefaultConfigRequest() {
    *this = ::std::move(from);
  }

  inline SetDefaultConfigRequest& operator=(const SetDefaultConfigRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetDefaultConfigRequest& operator=(SetDefaultConfigRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetDefaultConfigRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetDefaultConfigRequest* internal_default_instance() {
    return reinterpret_cast<const SetDefaultConfigRequest*>(
               &_SetDefaultConfigRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(SetDefaultConfigRequest& a, SetDefaultConfigRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SetDefaultConfigRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetDefaultConfigRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetDefaultConfigRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetDefaultConfigRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SetDefaultConfigRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SetDefaultConfigRequest& from) {
    SetDefaultConfigRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetDefaultConfigRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "szconfigmanager.SetDefaultConfigRequest";
  }
  protected:
  explicit SetDefaultConfigRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConfigDefinitionFieldNumber = 1,
    kConfigCommentFieldNumber = 2,
  };
  // string config_definition = 1;
  void clear_config_definition();
  const std::string& config_definition() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_config_definition(ArgT0&& arg0, ArgT... args);
  std::string* mutable_config_definition();
  PROTOBUF_NODISCARD std::string* release_config_definition();
  void set_allocated_config_definition(std::string* config_definition);
  private:
  const std::string& _internal_config_definition() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_config_definition(const std::string& value);
  std::string* _internal_mutable_config_definition();
  public:

  // string config_comment = 2;
  void clear_config_comment();
  const std::string& config_comment() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_config_comment(ArgT0&& arg0, ArgT... args);
  std::string* mutable_config_comment();
  PROTOBUF_NODISCARD std::string* release_config_comment();
  void set_allocated_config_comment(std::string* config_comment);
  private:
  const std::string& _internal_config_comment() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_config_comment(const std::string& value);
  std::string* _internal_mutable_config_comment();
  public:

  // @@protoc_insertion_point(class_scope:szconfigmanager.SetDefaultConfigRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr config_definition_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr config_comment_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_szconfigmanager_2eproto;
};
// -------------------------------------------------------------------

class SetDefaultConfigResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:szconfigmanager.SetDefaultConfigResponse) */ {
 public:
  inline SetDefaultConfigResponse() : SetDefaultConfigResponse(nullptr) {}
  ~SetDefaultConfigResponse() override;
  explicit PROTOBUF_CONSTEXPR SetDefaultConfigResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetDefaultConfigResponse(const SetDefaultConfigResponse& from);
  SetDefaultConfigResponse(SetDefaultConfigResponse&& from) noexcept
    : SetDefaultConfigResponse() {
    *this = ::std::move(from);
  }

  inline SetDefaultConfigResponse& operator=(const SetDefaultConfigResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetDefaultConfigResponse& operator=(SetDefaultConfigResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetDefaultConfigResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetDefaultConfigResponse* internal_default_instance() {
    return reinterpret_cast<const SetDefaultConfigResponse*>(
               &_SetDefaultConfigResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(SetDefaultConfigResponse& a, SetDefaultConfigResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SetDefaultConfigResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetDefaultConfigResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetDefaultConfigResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetDefaultConfigResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SetDefaultConfigResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SetDefaultConfigResponse& from) {
    SetDefaultConfigResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetDefaultConfigResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "szconfigmanager.SetDefaultConfigResponse";
  }
  protected:
  explicit SetDefaultConfigResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
  };
  // int64 result = 1;
  void clear_result();
  int64_t result() const;
  void set_result(int64_t value);
  private:
  int64_t _internal_result() const;
  void _internal_set_result(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:szconfigmanager.SetDefaultConfigResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int64_t result_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_szconfigmanager_2eproto;
};
// -------------------------------------------------------------------

class SetDefaultConfigIdRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:szconfigmanager.SetDefaultConfigIdRequest) */ {
 public:
  inline SetDefaultConfigIdRequest() : SetDefaultConfigIdRequest(nullptr) {}
  ~SetDefaultConfigIdRequest() override;
  explicit PROTOBUF_CONSTEXPR SetDefaultConfigIdRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetDefaultConfigIdRequest(const SetDefaultConfigIdRequest& from);
  SetDefaultConfigIdRequest(SetDefaultConfigIdRequest&& from) noexcept
    : SetDefaultConfigIdRequest() {
    *this = ::std::move(from);
  }

  inline SetDefaultConfigIdRequest& operator=(const SetDefaultConfigIdRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetDefaultConfigIdRequest& operator=(SetDefaultConfigIdRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetDefaultConfigIdRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetDefaultConfigIdRequest* internal_default_instance() {
    return reinterpret_cast<const SetDefaultConfigIdRequest*>(
               &_SetDefaultConfigIdRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(SetDefaultConfigIdRequest& a, SetDefaultConfigIdRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SetDefaultConfigIdRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetDefaultConfigIdRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetDefaultConfigIdRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetDefaultConfigIdRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SetDefaultConfigIdRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SetDefaultConfigIdRequest& from) {
    SetDefaultConfigIdRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetDefaultConfigIdRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "szconfigmanager.SetDefaultConfigIdRequest";
  }
  protected:
  explicit SetDefaultConfigIdRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConfigIdFieldNumber = 1,
  };
  // int64 config_id = 1;
  void clear_config_id();
  int64_t config_id() const;
  void set_config_id(int64_t value);
  private:
  int64_t _internal_config_id() const;
  void _internal_set_config_id(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:szconfigmanager.SetDefaultConfigIdRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int64_t config_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_szconfigmanager_2eproto;
};
// -------------------------------------------------------------------

class SetDefaultConfigIdResponse final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:szconfigmanager.SetDefaultConfigIdResponse) */ {
 public:
  inline SetDefaultConfigIdResponse() : SetDefaultConfigIdResponse(nullptr) {}
  explicit PROTOBUF_CONSTEXPR SetDefaultConfigIdResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetDefaultConfigIdResponse(const SetDefaultConfigIdResponse& from);
  SetDefaultConfigIdResponse(SetDefaultConfigIdResponse&& from) noexcept
    : SetDefaultConfigIdResponse() {
    *this = ::std::move(from);
  }

  inline SetDefaultConfigIdResponse& operator=(const SetDefaultConfigIdResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetDefaultConfigIdResponse& operator=(SetDefaultConfigIdResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetDefaultConfigIdResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetDefaultConfigIdResponse* internal_default_instance() {
    return reinterpret_cast<const SetDefaultConfigIdResponse*>(
               &_SetDefaultConfigIdResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(SetDefaultConfigIdResponse& a, SetDefaultConfigIdResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SetDefaultConfigIdResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetDefaultConfigIdResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetDefaultConfigIdResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetDefaultConfigIdResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const SetDefaultConfigIdResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const SetDefaultConfigIdResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "szconfigmanager.SetDefaultConfigIdResponse";
  }
  protected:
  explicit SetDefaultConfigIdResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:szconfigmanager.SetDefaultConfigIdResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_szconfigmanager_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// GetConfigRequest

// int64 config_id = 1;
inline void GetConfigRequest::clear_config_id() {
  _impl_.config_id_ = int64_t{0};
}
inline int64_t GetConfigRequest::_internal_config_id() const {
  return _impl_.config_id_;
}
inline int64_t GetConfigRequest::config_id() const {
  // @@protoc_insertion_point(field_get:szconfigmanager.GetConfigRequest.config_id)
  return _internal_config_id();
}
inline void GetConfigRequest::_internal_set_config_id(int64_t value) {
  
  _impl_.config_id_ = value;
}
inline void GetConfigRequest::set_config_id(int64_t value) {
  _internal_set_config_id(value);
  // @@protoc_insertion_point(field_set:szconfigmanager.GetConfigRequest.config_id)
}

// -------------------------------------------------------------------

// GetConfigResponse

// string result = 1;
inline void GetConfigResponse::clear_result() {
  _impl_.result_.ClearToEmpty();
}
inline const std::string& GetConfigResponse::result() const {
  // @@protoc_insertion_point(field_get:szconfigmanager.GetConfigResponse.result)
  return _internal_result();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetConfigResponse::set_result(ArgT0&& arg0, ArgT... args) {
 
 _impl_.result_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:szconfigmanager.GetConfigResponse.result)
}
inline std::string* GetConfigResponse::mutable_result() {
  std::string* _s = _internal_mutable_result();
  // @@protoc_insertion_point(field_mutable:szconfigmanager.GetConfigResponse.result)
  return _s;
}
inline const std::string& GetConfigResponse::_internal_result() const {
  return _impl_.result_.Get();
}
inline void GetConfigResponse::_internal_set_result(const std::string& value) {
  
  _impl_.result_.Set(value, GetArenaForAllocation());
}
inline std::string* GetConfigResponse::_internal_mutable_result() {
  
  return _impl_.result_.Mutable(GetArenaForAllocation());
}
inline std::string* GetConfigResponse::release_result() {
  // @@protoc_insertion_point(field_release:szconfigmanager.GetConfigResponse.result)
  return _impl_.result_.Release();
}
inline void GetConfigResponse::set_allocated_result(std::string* result) {
  if (result != nullptr) {
    
  } else {
    
  }
  _impl_.result_.SetAllocated(result, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.result_.IsDefault()) {
    _impl_.result_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:szconfigmanager.GetConfigResponse.result)
}

// -------------------------------------------------------------------

// GetConfigRegistryRequest

// -------------------------------------------------------------------

// GetConfigRegistryResponse

// string result = 1;
inline void GetConfigRegistryResponse::clear_result() {
  _impl_.result_.ClearToEmpty();
}
inline const std::string& GetConfigRegistryResponse::result() const {
  // @@protoc_insertion_point(field_get:szconfigmanager.GetConfigRegistryResponse.result)
  return _internal_result();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetConfigRegistryResponse::set_result(ArgT0&& arg0, ArgT... args) {
 
 _impl_.result_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:szconfigmanager.GetConfigRegistryResponse.result)
}
inline std::string* GetConfigRegistryResponse::mutable_result() {
  std::string* _s = _internal_mutable_result();
  // @@protoc_insertion_point(field_mutable:szconfigmanager.GetConfigRegistryResponse.result)
  return _s;
}
inline const std::string& GetConfigRegistryResponse::_internal_result() const {
  return _impl_.result_.Get();
}
inline void GetConfigRegistryResponse::_internal_set_result(const std::string& value) {
  
  _impl_.result_.Set(value, GetArenaForAllocation());
}
inline std::string* GetConfigRegistryResponse::_internal_mutable_result() {
  
  return _impl_.result_.Mutable(GetArenaForAllocation());
}
inline std::string* GetConfigRegistryResponse::release_result() {
  // @@protoc_insertion_point(field_release:szconfigmanager.GetConfigRegistryResponse.result)
  return _impl_.result_.Release();
}
inline void GetConfigRegistryResponse::set_allocated_result(std::string* result) {
  if (result != nullptr) {
    
  } else {
    
  }
  _impl_.result_.SetAllocated(result, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.result_.IsDefault()) {
    _impl_.result_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:szconfigmanager.GetConfigRegistryResponse.result)
}

// -------------------------------------------------------------------

// GetDefaultConfigIdRequest

// -------------------------------------------------------------------

// GetDefaultConfigIdResponse

// int64 result = 1;
inline void GetDefaultConfigIdResponse::clear_result() {
  _impl_.result_ = int64_t{0};
}
inline int64_t GetDefaultConfigIdResponse::_internal_result() const {
  return _impl_.result_;
}
inline int64_t GetDefaultConfigIdResponse::result() const {
  // @@protoc_insertion_point(field_get:szconfigmanager.GetDefaultConfigIdResponse.result)
  return _internal_result();
}
inline void GetDefaultConfigIdResponse::_internal_set_result(int64_t value) {
  
  _impl_.result_ = value;
}
inline void GetDefaultConfigIdResponse::set_result(int64_t value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:szconfigmanager.GetDefaultConfigIdResponse.result)
}

// -------------------------------------------------------------------

// GetTemplateConfigRequest

// -------------------------------------------------------------------

// GetTemplateConfigResponse

// string result = 1;
inline void GetTemplateConfigResponse::clear_result() {
  _impl_.result_.ClearToEmpty();
}
inline const std::string& GetTemplateConfigResponse::result() const {
  // @@protoc_insertion_point(field_get:szconfigmanager.GetTemplateConfigResponse.result)
  return _internal_result();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetTemplateConfigResponse::set_result(ArgT0&& arg0, ArgT... args) {
 
 _impl_.result_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:szconfigmanager.GetTemplateConfigResponse.result)
}
inline std::string* GetTemplateConfigResponse::mutable_result() {
  std::string* _s = _internal_mutable_result();
  // @@protoc_insertion_point(field_mutable:szconfigmanager.GetTemplateConfigResponse.result)
  return _s;
}
inline const std::string& GetTemplateConfigResponse::_internal_result() const {
  return _impl_.result_.Get();
}
inline void GetTemplateConfigResponse::_internal_set_result(const std::string& value) {
  
  _impl_.result_.Set(value, GetArenaForAllocation());
}
inline std::string* GetTemplateConfigResponse::_internal_mutable_result() {
  
  return _impl_.result_.Mutable(GetArenaForAllocation());
}
inline std::string* GetTemplateConfigResponse::release_result() {
  // @@protoc_insertion_point(field_release:szconfigmanager.GetTemplateConfigResponse.result)
  return _impl_.result_.Release();
}
inline void GetTemplateConfigResponse::set_allocated_result(std::string* result) {
  if (result != nullptr) {
    
  } else {
    
  }
  _impl_.result_.SetAllocated(result, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.result_.IsDefault()) {
    _impl_.result_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:szconfigmanager.GetTemplateConfigResponse.result)
}

// -------------------------------------------------------------------

// RegisterConfigRequest

// string config_definition = 1;
inline void RegisterConfigRequest::clear_config_definition() {
  _impl_.config_definition_.ClearToEmpty();
}
inline const std::string& RegisterConfigRequest::config_definition() const {
  // @@protoc_insertion_point(field_get:szconfigmanager.RegisterConfigRequest.config_definition)
  return _internal_config_definition();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RegisterConfigRequest::set_config_definition(ArgT0&& arg0, ArgT... args) {
 
 _impl_.config_definition_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:szconfigmanager.RegisterConfigRequest.config_definition)
}
inline std::string* RegisterConfigRequest::mutable_config_definition() {
  std::string* _s = _internal_mutable_config_definition();
  // @@protoc_insertion_point(field_mutable:szconfigmanager.RegisterConfigRequest.config_definition)
  return _s;
}
inline const std::string& RegisterConfigRequest::_internal_config_definition() const {
  return _impl_.config_definition_.Get();
}
inline void RegisterConfigRequest::_internal_set_config_definition(const std::string& value) {
  
  _impl_.config_definition_.Set(value, GetArenaForAllocation());
}
inline std::string* RegisterConfigRequest::_internal_mutable_config_definition() {
  
  return _impl_.config_definition_.Mutable(GetArenaForAllocation());
}
inline std::string* RegisterConfigRequest::release_config_definition() {
  // @@protoc_insertion_point(field_release:szconfigmanager.RegisterConfigRequest.config_definition)
  return _impl_.config_definition_.Release();
}
inline void RegisterConfigRequest::set_allocated_config_definition(std::string* config_definition) {
  if (config_definition != nullptr) {
    
  } else {
    
  }
  _impl_.config_definition_.SetAllocated(config_definition, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.config_definition_.IsDefault()) {
    _impl_.config_definition_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:szconfigmanager.RegisterConfigRequest.config_definition)
}

// string config_comment = 2;
inline void RegisterConfigRequest::clear_config_comment() {
  _impl_.config_comment_.ClearToEmpty();
}
inline const std::string& RegisterConfigRequest::config_comment() const {
  // @@protoc_insertion_point(field_get:szconfigmanager.RegisterConfigRequest.config_comment)
  return _internal_config_comment();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RegisterConfigRequest::set_config_comment(ArgT0&& arg0, ArgT... args) {
 
 _impl_.config_comment_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:szconfigmanager.RegisterConfigRequest.config_comment)
}
inline std::string* RegisterConfigRequest::mutable_config_comment() {
  std::string* _s = _internal_mutable_config_comment();
  // @@protoc_insertion_point(field_mutable:szconfigmanager.RegisterConfigRequest.config_comment)
  return _s;
}
inline const std::string& RegisterConfigRequest::_internal_config_comment() const {
  return _impl_.config_comment_.Get();
}
inline void RegisterConfigRequest::_internal_set_config_comment(const std::string& value) {
  
  _impl_.config_comment_.Set(value, GetArenaForAllocation());
}
inline std::string* RegisterConfigRequest::_internal_mutable_config_comment() {
  
  return _impl_.config_comment_.Mutable(GetArenaForAllocation());
}
inline std::string* RegisterConfigRequest::release_config_comment() {
  // @@protoc_insertion_point(field_release:szconfigmanager.RegisterConfigRequest.config_comment)
  return _impl_.config_comment_.Release();
}
inline void RegisterConfigRequest::set_allocated_config_comment(std::string* config_comment) {
  if (config_comment != nullptr) {
    
  } else {
    
  }
  _impl_.config_comment_.SetAllocated(config_comment, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.config_comment_.IsDefault()) {
    _impl_.config_comment_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:szconfigmanager.RegisterConfigRequest.config_comment)
}

// -------------------------------------------------------------------

// RegisterConfigResponse

// int64 result = 1;
inline void RegisterConfigResponse::clear_result() {
  _impl_.result_ = int64_t{0};
}
inline int64_t RegisterConfigResponse::_internal_result() const {
  return _impl_.result_;
}
inline int64_t RegisterConfigResponse::result() const {
  // @@protoc_insertion_point(field_get:szconfigmanager.RegisterConfigResponse.result)
  return _internal_result();
}
inline void RegisterConfigResponse::_internal_set_result(int64_t value) {
  
  _impl_.result_ = value;
}
inline void RegisterConfigResponse::set_result(int64_t value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:szconfigmanager.RegisterConfigResponse.result)
}

// -------------------------------------------------------------------

// ReplaceDefaultConfigIdRequest

// int64 current_default_config_id = 1;
inline void ReplaceDefaultConfigIdRequest::clear_current_default_config_id() {
  _impl_.current_default_config_id_ = int64_t{0};
}
inline int64_t ReplaceDefaultConfigIdRequest::_internal_current_default_config_id() const {
  return _impl_.current_default_config_id_;
}
inline int64_t ReplaceDefaultConfigIdRequest::current_default_config_id() const {
  // @@protoc_insertion_point(field_get:szconfigmanager.ReplaceDefaultConfigIdRequest.current_default_config_id)
  return _internal_current_default_config_id();
}
inline void ReplaceDefaultConfigIdRequest::_internal_set_current_default_config_id(int64_t value) {
  
  _impl_.current_default_config_id_ = value;
}
inline void ReplaceDefaultConfigIdRequest::set_current_default_config_id(int64_t value) {
  _internal_set_current_default_config_id(value);
  // @@protoc_insertion_point(field_set:szconfigmanager.ReplaceDefaultConfigIdRequest.current_default_config_id)
}

// int64 new_default_config_id = 2;
inline void ReplaceDefaultConfigIdRequest::clear_new_default_config_id() {
  _impl_.new_default_config_id_ = int64_t{0};
}
inline int64_t ReplaceDefaultConfigIdRequest::_internal_new_default_config_id() const {
  return _impl_.new_default_config_id_;
}
inline int64_t ReplaceDefaultConfigIdRequest::new_default_config_id() const {
  // @@protoc_insertion_point(field_get:szconfigmanager.ReplaceDefaultConfigIdRequest.new_default_config_id)
  return _internal_new_default_config_id();
}
inline void ReplaceDefaultConfigIdRequest::_internal_set_new_default_config_id(int64_t value) {
  
  _impl_.new_default_config_id_ = value;
}
inline void ReplaceDefaultConfigIdRequest::set_new_default_config_id(int64_t value) {
  _internal_set_new_default_config_id(value);
  // @@protoc_insertion_point(field_set:szconfigmanager.ReplaceDefaultConfigIdRequest.new_default_config_id)
}

// -------------------------------------------------------------------

// ReplaceDefaultConfigIdResponse

// -------------------------------------------------------------------

// SetDefaultConfigRequest

// string config_definition = 1;
inline void SetDefaultConfigRequest::clear_config_definition() {
  _impl_.config_definition_.ClearToEmpty();
}
inline const std::string& SetDefaultConfigRequest::config_definition() const {
  // @@protoc_insertion_point(field_get:szconfigmanager.SetDefaultConfigRequest.config_definition)
  return _internal_config_definition();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SetDefaultConfigRequest::set_config_definition(ArgT0&& arg0, ArgT... args) {
 
 _impl_.config_definition_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:szconfigmanager.SetDefaultConfigRequest.config_definition)
}
inline std::string* SetDefaultConfigRequest::mutable_config_definition() {
  std::string* _s = _internal_mutable_config_definition();
  // @@protoc_insertion_point(field_mutable:szconfigmanager.SetDefaultConfigRequest.config_definition)
  return _s;
}
inline const std::string& SetDefaultConfigRequest::_internal_config_definition() const {
  return _impl_.config_definition_.Get();
}
inline void SetDefaultConfigRequest::_internal_set_config_definition(const std::string& value) {
  
  _impl_.config_definition_.Set(value, GetArenaForAllocation());
}
inline std::string* SetDefaultConfigRequest::_internal_mutable_config_definition() {
  
  return _impl_.config_definition_.Mutable(GetArenaForAllocation());
}
inline std::string* SetDefaultConfigRequest::release_config_definition() {
  // @@protoc_insertion_point(field_release:szconfigmanager.SetDefaultConfigRequest.config_definition)
  return _impl_.config_definition_.Release();
}
inline void SetDefaultConfigRequest::set_allocated_config_definition(std::string* config_definition) {
  if (config_definition != nullptr) {
    
  } else {
    
  }
  _impl_.config_definition_.SetAllocated(config_definition, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.config_definition_.IsDefault()) {
    _impl_.config_definition_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:szconfigmanager.SetDefaultConfigRequest.config_definition)
}

// string config_comment = 2;
inline void SetDefaultConfigRequest::clear_config_comment() {
  _impl_.config_comment_.ClearToEmpty();
}
inline const std::string& SetDefaultConfigRequest::config_comment() const {
  // @@protoc_insertion_point(field_get:szconfigmanager.SetDefaultConfigRequest.config_comment)
  return _internal_config_comment();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SetDefaultConfigRequest::set_config_comment(ArgT0&& arg0, ArgT... args) {
 
 _impl_.config_comment_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:szconfigmanager.SetDefaultConfigRequest.config_comment)
}
inline std::string* SetDefaultConfigRequest::mutable_config_comment() {
  std::string* _s = _internal_mutable_config_comment();
  // @@protoc_insertion_point(field_mutable:szconfigmanager.SetDefaultConfigRequest.config_comment)
  return _s;
}
inline const std::string& SetDefaultConfigRequest::_internal_config_comment() const {
  return _impl_.config_comment_.Get();
}
inline void SetDefaultConfigRequest::_internal_set_config_comment(const std::string& value) {
  
  _impl_.config_comment_.Set(value, GetArenaForAllocation());
}
inline std::string* SetDefaultConfigRequest::_internal_mutable_config_comment() {
  
  return _impl_.config_comment_.Mutable(GetArenaForAllocation());
}
inline std::string* SetDefaultConfigRequest::release_config_comment() {
  // @@protoc_insertion_point(field_release:szconfigmanager.SetDefaultConfigRequest.config_comment)
  return _impl_.config_comment_.Release();
}
inline void SetDefaultConfigRequest::set_allocated_config_comment(std::string* config_comment) {
  if (config_comment != nullptr) {
    
  } else {
    
  }
  _impl_.config_comment_.SetAllocated(config_comment, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.config_comment_.IsDefault()) {
    _impl_.config_comment_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:szconfigmanager.SetDefaultConfigRequest.config_comment)
}

// -------------------------------------------------------------------

// SetDefaultConfigResponse

// int64 result = 1;
inline void SetDefaultConfigResponse::clear_result() {
  _impl_.result_ = int64_t{0};
}
inline int64_t SetDefaultConfigResponse::_internal_result() const {
  return _impl_.result_;
}
inline int64_t SetDefaultConfigResponse::result() const {
  // @@protoc_insertion_point(field_get:szconfigmanager.SetDefaultConfigResponse.result)
  return _internal_result();
}
inline void SetDefaultConfigResponse::_internal_set_result(int64_t value) {
  
  _impl_.result_ = value;
}
inline void SetDefaultConfigResponse::set_result(int64_t value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:szconfigmanager.SetDefaultConfigResponse.result)
}

// -------------------------------------------------------------------

// SetDefaultConfigIdRequest

// int64 config_id = 1;
inline void SetDefaultConfigIdRequest::clear_config_id() {
  _impl_.config_id_ = int64_t{0};
}
inline int64_t SetDefaultConfigIdRequest::_internal_config_id() const {
  return _impl_.config_id_;
}
inline int64_t SetDefaultConfigIdRequest::config_id() const {
  // @@protoc_insertion_point(field_get:szconfigmanager.SetDefaultConfigIdRequest.config_id)
  return _internal_config_id();
}
inline void SetDefaultConfigIdRequest::_internal_set_config_id(int64_t value) {
  
  _impl_.config_id_ = value;
}
inline void SetDefaultConfigIdRequest::set_config_id(int64_t value) {
  _internal_set_config_id(value);
  // @@protoc_insertion_point(field_set:szconfigmanager.SetDefaultConfigIdRequest.config_id)
}

// -------------------------------------------------------------------

// SetDefaultConfigIdResponse

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace szconfigmanager

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_szconfigmanager_2eproto
