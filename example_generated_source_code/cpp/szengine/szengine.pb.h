// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: szengine.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_szengine_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_szengine_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_szengine_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_szengine_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[66]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_szengine_2eproto;
namespace szengine {
class AddRecordRequest;
class AddRecordRequestDefaultTypeInternal;
extern AddRecordRequestDefaultTypeInternal _AddRecordRequest_default_instance_;
class AddRecordResponse;
class AddRecordResponseDefaultTypeInternal;
extern AddRecordResponseDefaultTypeInternal _AddRecordResponse_default_instance_;
class CloseExportRequest;
class CloseExportRequestDefaultTypeInternal;
extern CloseExportRequestDefaultTypeInternal _CloseExportRequest_default_instance_;
class CloseExportResponse;
class CloseExportResponseDefaultTypeInternal;
extern CloseExportResponseDefaultTypeInternal _CloseExportResponse_default_instance_;
class CountRedoRecordsRequest;
class CountRedoRecordsRequestDefaultTypeInternal;
extern CountRedoRecordsRequestDefaultTypeInternal _CountRedoRecordsRequest_default_instance_;
class CountRedoRecordsResponse;
class CountRedoRecordsResponseDefaultTypeInternal;
extern CountRedoRecordsResponseDefaultTypeInternal _CountRedoRecordsResponse_default_instance_;
class DeleteRecordRequest;
class DeleteRecordRequestDefaultTypeInternal;
extern DeleteRecordRequestDefaultTypeInternal _DeleteRecordRequest_default_instance_;
class DeleteRecordResponse;
class DeleteRecordResponseDefaultTypeInternal;
extern DeleteRecordResponseDefaultTypeInternal _DeleteRecordResponse_default_instance_;
class ExportCsvEntityReportRequest;
class ExportCsvEntityReportRequestDefaultTypeInternal;
extern ExportCsvEntityReportRequestDefaultTypeInternal _ExportCsvEntityReportRequest_default_instance_;
class ExportCsvEntityReportResponse;
class ExportCsvEntityReportResponseDefaultTypeInternal;
extern ExportCsvEntityReportResponseDefaultTypeInternal _ExportCsvEntityReportResponse_default_instance_;
class ExportJsonEntityReportRequest;
class ExportJsonEntityReportRequestDefaultTypeInternal;
extern ExportJsonEntityReportRequestDefaultTypeInternal _ExportJsonEntityReportRequest_default_instance_;
class ExportJsonEntityReportResponse;
class ExportJsonEntityReportResponseDefaultTypeInternal;
extern ExportJsonEntityReportResponseDefaultTypeInternal _ExportJsonEntityReportResponse_default_instance_;
class FetchNextRequest;
class FetchNextRequestDefaultTypeInternal;
extern FetchNextRequestDefaultTypeInternal _FetchNextRequest_default_instance_;
class FetchNextResponse;
class FetchNextResponseDefaultTypeInternal;
extern FetchNextResponseDefaultTypeInternal _FetchNextResponse_default_instance_;
class FindInterestingEntitiesByEntityIdRequest;
class FindInterestingEntitiesByEntityIdRequestDefaultTypeInternal;
extern FindInterestingEntitiesByEntityIdRequestDefaultTypeInternal _FindInterestingEntitiesByEntityIdRequest_default_instance_;
class FindInterestingEntitiesByEntityIdResponse;
class FindInterestingEntitiesByEntityIdResponseDefaultTypeInternal;
extern FindInterestingEntitiesByEntityIdResponseDefaultTypeInternal _FindInterestingEntitiesByEntityIdResponse_default_instance_;
class FindInterestingEntitiesByRecordIdRequest;
class FindInterestingEntitiesByRecordIdRequestDefaultTypeInternal;
extern FindInterestingEntitiesByRecordIdRequestDefaultTypeInternal _FindInterestingEntitiesByRecordIdRequest_default_instance_;
class FindInterestingEntitiesByRecordIdResponse;
class FindInterestingEntitiesByRecordIdResponseDefaultTypeInternal;
extern FindInterestingEntitiesByRecordIdResponseDefaultTypeInternal _FindInterestingEntitiesByRecordIdResponse_default_instance_;
class FindNetworkByEntityIdRequest;
class FindNetworkByEntityIdRequestDefaultTypeInternal;
extern FindNetworkByEntityIdRequestDefaultTypeInternal _FindNetworkByEntityIdRequest_default_instance_;
class FindNetworkByEntityIdResponse;
class FindNetworkByEntityIdResponseDefaultTypeInternal;
extern FindNetworkByEntityIdResponseDefaultTypeInternal _FindNetworkByEntityIdResponse_default_instance_;
class FindNetworkByRecordIdRequest;
class FindNetworkByRecordIdRequestDefaultTypeInternal;
extern FindNetworkByRecordIdRequestDefaultTypeInternal _FindNetworkByRecordIdRequest_default_instance_;
class FindNetworkByRecordIdResponse;
class FindNetworkByRecordIdResponseDefaultTypeInternal;
extern FindNetworkByRecordIdResponseDefaultTypeInternal _FindNetworkByRecordIdResponse_default_instance_;
class FindPathByEntityIdRequest;
class FindPathByEntityIdRequestDefaultTypeInternal;
extern FindPathByEntityIdRequestDefaultTypeInternal _FindPathByEntityIdRequest_default_instance_;
class FindPathByEntityIdResponse;
class FindPathByEntityIdResponseDefaultTypeInternal;
extern FindPathByEntityIdResponseDefaultTypeInternal _FindPathByEntityIdResponse_default_instance_;
class FindPathByRecordIdRequest;
class FindPathByRecordIdRequestDefaultTypeInternal;
extern FindPathByRecordIdRequestDefaultTypeInternal _FindPathByRecordIdRequest_default_instance_;
class FindPathByRecordIdResponse;
class FindPathByRecordIdResponseDefaultTypeInternal;
extern FindPathByRecordIdResponseDefaultTypeInternal _FindPathByRecordIdResponse_default_instance_;
class GetActiveConfigIdRequest;
class GetActiveConfigIdRequestDefaultTypeInternal;
extern GetActiveConfigIdRequestDefaultTypeInternal _GetActiveConfigIdRequest_default_instance_;
class GetActiveConfigIdResponse;
class GetActiveConfigIdResponseDefaultTypeInternal;
extern GetActiveConfigIdResponseDefaultTypeInternal _GetActiveConfigIdResponse_default_instance_;
class GetEntityByEntityIdRequest;
class GetEntityByEntityIdRequestDefaultTypeInternal;
extern GetEntityByEntityIdRequestDefaultTypeInternal _GetEntityByEntityIdRequest_default_instance_;
class GetEntityByEntityIdResponse;
class GetEntityByEntityIdResponseDefaultTypeInternal;
extern GetEntityByEntityIdResponseDefaultTypeInternal _GetEntityByEntityIdResponse_default_instance_;
class GetEntityByRecordIdRequest;
class GetEntityByRecordIdRequestDefaultTypeInternal;
extern GetEntityByRecordIdRequestDefaultTypeInternal _GetEntityByRecordIdRequest_default_instance_;
class GetEntityByRecordIdResponse;
class GetEntityByRecordIdResponseDefaultTypeInternal;
extern GetEntityByRecordIdResponseDefaultTypeInternal _GetEntityByRecordIdResponse_default_instance_;
class GetRecordRequest;
class GetRecordRequestDefaultTypeInternal;
extern GetRecordRequestDefaultTypeInternal _GetRecordRequest_default_instance_;
class GetRecordResponse;
class GetRecordResponseDefaultTypeInternal;
extern GetRecordResponseDefaultTypeInternal _GetRecordResponse_default_instance_;
class GetRedoRecordRequest;
class GetRedoRecordRequestDefaultTypeInternal;
extern GetRedoRecordRequestDefaultTypeInternal _GetRedoRecordRequest_default_instance_;
class GetRedoRecordResponse;
class GetRedoRecordResponseDefaultTypeInternal;
extern GetRedoRecordResponseDefaultTypeInternal _GetRedoRecordResponse_default_instance_;
class GetStatsRequest;
class GetStatsRequestDefaultTypeInternal;
extern GetStatsRequestDefaultTypeInternal _GetStatsRequest_default_instance_;
class GetStatsResponse;
class GetStatsResponseDefaultTypeInternal;
extern GetStatsResponseDefaultTypeInternal _GetStatsResponse_default_instance_;
class GetVirtualEntityByRecordIdRequest;
class GetVirtualEntityByRecordIdRequestDefaultTypeInternal;
extern GetVirtualEntityByRecordIdRequestDefaultTypeInternal _GetVirtualEntityByRecordIdRequest_default_instance_;
class GetVirtualEntityByRecordIdResponse;
class GetVirtualEntityByRecordIdResponseDefaultTypeInternal;
extern GetVirtualEntityByRecordIdResponseDefaultTypeInternal _GetVirtualEntityByRecordIdResponse_default_instance_;
class HowEntityByEntityIdRequest;
class HowEntityByEntityIdRequestDefaultTypeInternal;
extern HowEntityByEntityIdRequestDefaultTypeInternal _HowEntityByEntityIdRequest_default_instance_;
class HowEntityByEntityIdResponse;
class HowEntityByEntityIdResponseDefaultTypeInternal;
extern HowEntityByEntityIdResponseDefaultTypeInternal _HowEntityByEntityIdResponse_default_instance_;
class PreprocessRecordRequest;
class PreprocessRecordRequestDefaultTypeInternal;
extern PreprocessRecordRequestDefaultTypeInternal _PreprocessRecordRequest_default_instance_;
class PreprocessRecordResponse;
class PreprocessRecordResponseDefaultTypeInternal;
extern PreprocessRecordResponseDefaultTypeInternal _PreprocessRecordResponse_default_instance_;
class PrimeEngineRequest;
class PrimeEngineRequestDefaultTypeInternal;
extern PrimeEngineRequestDefaultTypeInternal _PrimeEngineRequest_default_instance_;
class PrimeEngineResponse;
class PrimeEngineResponseDefaultTypeInternal;
extern PrimeEngineResponseDefaultTypeInternal _PrimeEngineResponse_default_instance_;
class ProcessRedoRecordRequest;
class ProcessRedoRecordRequestDefaultTypeInternal;
extern ProcessRedoRecordRequestDefaultTypeInternal _ProcessRedoRecordRequest_default_instance_;
class ProcessRedoRecordResponse;
class ProcessRedoRecordResponseDefaultTypeInternal;
extern ProcessRedoRecordResponseDefaultTypeInternal _ProcessRedoRecordResponse_default_instance_;
class ReevaluateEntityRequest;
class ReevaluateEntityRequestDefaultTypeInternal;
extern ReevaluateEntityRequestDefaultTypeInternal _ReevaluateEntityRequest_default_instance_;
class ReevaluateEntityResponse;
class ReevaluateEntityResponseDefaultTypeInternal;
extern ReevaluateEntityResponseDefaultTypeInternal _ReevaluateEntityResponse_default_instance_;
class ReevaluateRecordRequest;
class ReevaluateRecordRequestDefaultTypeInternal;
extern ReevaluateRecordRequestDefaultTypeInternal _ReevaluateRecordRequest_default_instance_;
class ReevaluateRecordResponse;
class ReevaluateRecordResponseDefaultTypeInternal;
extern ReevaluateRecordResponseDefaultTypeInternal _ReevaluateRecordResponse_default_instance_;
class ReinitializeRequest;
class ReinitializeRequestDefaultTypeInternal;
extern ReinitializeRequestDefaultTypeInternal _ReinitializeRequest_default_instance_;
class ReinitializeResponse;
class ReinitializeResponseDefaultTypeInternal;
extern ReinitializeResponseDefaultTypeInternal _ReinitializeResponse_default_instance_;
class SearchByAttributesRequest;
class SearchByAttributesRequestDefaultTypeInternal;
extern SearchByAttributesRequestDefaultTypeInternal _SearchByAttributesRequest_default_instance_;
class SearchByAttributesResponse;
class SearchByAttributesResponseDefaultTypeInternal;
extern SearchByAttributesResponseDefaultTypeInternal _SearchByAttributesResponse_default_instance_;
class StreamExportCsvEntityReportRequest;
class StreamExportCsvEntityReportRequestDefaultTypeInternal;
extern StreamExportCsvEntityReportRequestDefaultTypeInternal _StreamExportCsvEntityReportRequest_default_instance_;
class StreamExportCsvEntityReportResponse;
class StreamExportCsvEntityReportResponseDefaultTypeInternal;
extern StreamExportCsvEntityReportResponseDefaultTypeInternal _StreamExportCsvEntityReportResponse_default_instance_;
class StreamExportJsonEntityReportRequest;
class StreamExportJsonEntityReportRequestDefaultTypeInternal;
extern StreamExportJsonEntityReportRequestDefaultTypeInternal _StreamExportJsonEntityReportRequest_default_instance_;
class StreamExportJsonEntityReportResponse;
class StreamExportJsonEntityReportResponseDefaultTypeInternal;
extern StreamExportJsonEntityReportResponseDefaultTypeInternal _StreamExportJsonEntityReportResponse_default_instance_;
class WhyEntitiesRequest;
class WhyEntitiesRequestDefaultTypeInternal;
extern WhyEntitiesRequestDefaultTypeInternal _WhyEntitiesRequest_default_instance_;
class WhyEntitiesResponse;
class WhyEntitiesResponseDefaultTypeInternal;
extern WhyEntitiesResponseDefaultTypeInternal _WhyEntitiesResponse_default_instance_;
class WhyRecordInEntityRequest;
class WhyRecordInEntityRequestDefaultTypeInternal;
extern WhyRecordInEntityRequestDefaultTypeInternal _WhyRecordInEntityRequest_default_instance_;
class WhyRecordInEntityResponse;
class WhyRecordInEntityResponseDefaultTypeInternal;
extern WhyRecordInEntityResponseDefaultTypeInternal _WhyRecordInEntityResponse_default_instance_;
class WhyRecordsRequest;
class WhyRecordsRequestDefaultTypeInternal;
extern WhyRecordsRequestDefaultTypeInternal _WhyRecordsRequest_default_instance_;
class WhyRecordsResponse;
class WhyRecordsResponseDefaultTypeInternal;
extern WhyRecordsResponseDefaultTypeInternal _WhyRecordsResponse_default_instance_;
}  // namespace szengine
PROTOBUF_NAMESPACE_OPEN
template<> ::szengine::AddRecordRequest* Arena::CreateMaybeMessage<::szengine::AddRecordRequest>(Arena*);
template<> ::szengine::AddRecordResponse* Arena::CreateMaybeMessage<::szengine::AddRecordResponse>(Arena*);
template<> ::szengine::CloseExportRequest* Arena::CreateMaybeMessage<::szengine::CloseExportRequest>(Arena*);
template<> ::szengine::CloseExportResponse* Arena::CreateMaybeMessage<::szengine::CloseExportResponse>(Arena*);
template<> ::szengine::CountRedoRecordsRequest* Arena::CreateMaybeMessage<::szengine::CountRedoRecordsRequest>(Arena*);
template<> ::szengine::CountRedoRecordsResponse* Arena::CreateMaybeMessage<::szengine::CountRedoRecordsResponse>(Arena*);
template<> ::szengine::DeleteRecordRequest* Arena::CreateMaybeMessage<::szengine::DeleteRecordRequest>(Arena*);
template<> ::szengine::DeleteRecordResponse* Arena::CreateMaybeMessage<::szengine::DeleteRecordResponse>(Arena*);
template<> ::szengine::ExportCsvEntityReportRequest* Arena::CreateMaybeMessage<::szengine::ExportCsvEntityReportRequest>(Arena*);
template<> ::szengine::ExportCsvEntityReportResponse* Arena::CreateMaybeMessage<::szengine::ExportCsvEntityReportResponse>(Arena*);
template<> ::szengine::ExportJsonEntityReportRequest* Arena::CreateMaybeMessage<::szengine::ExportJsonEntityReportRequest>(Arena*);
template<> ::szengine::ExportJsonEntityReportResponse* Arena::CreateMaybeMessage<::szengine::ExportJsonEntityReportResponse>(Arena*);
template<> ::szengine::FetchNextRequest* Arena::CreateMaybeMessage<::szengine::FetchNextRequest>(Arena*);
template<> ::szengine::FetchNextResponse* Arena::CreateMaybeMessage<::szengine::FetchNextResponse>(Arena*);
template<> ::szengine::FindInterestingEntitiesByEntityIdRequest* Arena::CreateMaybeMessage<::szengine::FindInterestingEntitiesByEntityIdRequest>(Arena*);
template<> ::szengine::FindInterestingEntitiesByEntityIdResponse* Arena::CreateMaybeMessage<::szengine::FindInterestingEntitiesByEntityIdResponse>(Arena*);
template<> ::szengine::FindInterestingEntitiesByRecordIdRequest* Arena::CreateMaybeMessage<::szengine::FindInterestingEntitiesByRecordIdRequest>(Arena*);
template<> ::szengine::FindInterestingEntitiesByRecordIdResponse* Arena::CreateMaybeMessage<::szengine::FindInterestingEntitiesByRecordIdResponse>(Arena*);
template<> ::szengine::FindNetworkByEntityIdRequest* Arena::CreateMaybeMessage<::szengine::FindNetworkByEntityIdRequest>(Arena*);
template<> ::szengine::FindNetworkByEntityIdResponse* Arena::CreateMaybeMessage<::szengine::FindNetworkByEntityIdResponse>(Arena*);
template<> ::szengine::FindNetworkByRecordIdRequest* Arena::CreateMaybeMessage<::szengine::FindNetworkByRecordIdRequest>(Arena*);
template<> ::szengine::FindNetworkByRecordIdResponse* Arena::CreateMaybeMessage<::szengine::FindNetworkByRecordIdResponse>(Arena*);
template<> ::szengine::FindPathByEntityIdRequest* Arena::CreateMaybeMessage<::szengine::FindPathByEntityIdRequest>(Arena*);
template<> ::szengine::FindPathByEntityIdResponse* Arena::CreateMaybeMessage<::szengine::FindPathByEntityIdResponse>(Arena*);
template<> ::szengine::FindPathByRecordIdRequest* Arena::CreateMaybeMessage<::szengine::FindPathByRecordIdRequest>(Arena*);
template<> ::szengine::FindPathByRecordIdResponse* Arena::CreateMaybeMessage<::szengine::FindPathByRecordIdResponse>(Arena*);
template<> ::szengine::GetActiveConfigIdRequest* Arena::CreateMaybeMessage<::szengine::GetActiveConfigIdRequest>(Arena*);
template<> ::szengine::GetActiveConfigIdResponse* Arena::CreateMaybeMessage<::szengine::GetActiveConfigIdResponse>(Arena*);
template<> ::szengine::GetEntityByEntityIdRequest* Arena::CreateMaybeMessage<::szengine::GetEntityByEntityIdRequest>(Arena*);
template<> ::szengine::GetEntityByEntityIdResponse* Arena::CreateMaybeMessage<::szengine::GetEntityByEntityIdResponse>(Arena*);
template<> ::szengine::GetEntityByRecordIdRequest* Arena::CreateMaybeMessage<::szengine::GetEntityByRecordIdRequest>(Arena*);
template<> ::szengine::GetEntityByRecordIdResponse* Arena::CreateMaybeMessage<::szengine::GetEntityByRecordIdResponse>(Arena*);
template<> ::szengine::GetRecordRequest* Arena::CreateMaybeMessage<::szengine::GetRecordRequest>(Arena*);
template<> ::szengine::GetRecordResponse* Arena::CreateMaybeMessage<::szengine::GetRecordResponse>(Arena*);
template<> ::szengine::GetRedoRecordRequest* Arena::CreateMaybeMessage<::szengine::GetRedoRecordRequest>(Arena*);
template<> ::szengine::GetRedoRecordResponse* Arena::CreateMaybeMessage<::szengine::GetRedoRecordResponse>(Arena*);
template<> ::szengine::GetStatsRequest* Arena::CreateMaybeMessage<::szengine::GetStatsRequest>(Arena*);
template<> ::szengine::GetStatsResponse* Arena::CreateMaybeMessage<::szengine::GetStatsResponse>(Arena*);
template<> ::szengine::GetVirtualEntityByRecordIdRequest* Arena::CreateMaybeMessage<::szengine::GetVirtualEntityByRecordIdRequest>(Arena*);
template<> ::szengine::GetVirtualEntityByRecordIdResponse* Arena::CreateMaybeMessage<::szengine::GetVirtualEntityByRecordIdResponse>(Arena*);
template<> ::szengine::HowEntityByEntityIdRequest* Arena::CreateMaybeMessage<::szengine::HowEntityByEntityIdRequest>(Arena*);
template<> ::szengine::HowEntityByEntityIdResponse* Arena::CreateMaybeMessage<::szengine::HowEntityByEntityIdResponse>(Arena*);
template<> ::szengine::PreprocessRecordRequest* Arena::CreateMaybeMessage<::szengine::PreprocessRecordRequest>(Arena*);
template<> ::szengine::PreprocessRecordResponse* Arena::CreateMaybeMessage<::szengine::PreprocessRecordResponse>(Arena*);
template<> ::szengine::PrimeEngineRequest* Arena::CreateMaybeMessage<::szengine::PrimeEngineRequest>(Arena*);
template<> ::szengine::PrimeEngineResponse* Arena::CreateMaybeMessage<::szengine::PrimeEngineResponse>(Arena*);
template<> ::szengine::ProcessRedoRecordRequest* Arena::CreateMaybeMessage<::szengine::ProcessRedoRecordRequest>(Arena*);
template<> ::szengine::ProcessRedoRecordResponse* Arena::CreateMaybeMessage<::szengine::ProcessRedoRecordResponse>(Arena*);
template<> ::szengine::ReevaluateEntityRequest* Arena::CreateMaybeMessage<::szengine::ReevaluateEntityRequest>(Arena*);
template<> ::szengine::ReevaluateEntityResponse* Arena::CreateMaybeMessage<::szengine::ReevaluateEntityResponse>(Arena*);
template<> ::szengine::ReevaluateRecordRequest* Arena::CreateMaybeMessage<::szengine::ReevaluateRecordRequest>(Arena*);
template<> ::szengine::ReevaluateRecordResponse* Arena::CreateMaybeMessage<::szengine::ReevaluateRecordResponse>(Arena*);
template<> ::szengine::ReinitializeRequest* Arena::CreateMaybeMessage<::szengine::ReinitializeRequest>(Arena*);
template<> ::szengine::ReinitializeResponse* Arena::CreateMaybeMessage<::szengine::ReinitializeResponse>(Arena*);
template<> ::szengine::SearchByAttributesRequest* Arena::CreateMaybeMessage<::szengine::SearchByAttributesRequest>(Arena*);
template<> ::szengine::SearchByAttributesResponse* Arena::CreateMaybeMessage<::szengine::SearchByAttributesResponse>(Arena*);
template<> ::szengine::StreamExportCsvEntityReportRequest* Arena::CreateMaybeMessage<::szengine::StreamExportCsvEntityReportRequest>(Arena*);
template<> ::szengine::StreamExportCsvEntityReportResponse* Arena::CreateMaybeMessage<::szengine::StreamExportCsvEntityReportResponse>(Arena*);
template<> ::szengine::StreamExportJsonEntityReportRequest* Arena::CreateMaybeMessage<::szengine::StreamExportJsonEntityReportRequest>(Arena*);
template<> ::szengine::StreamExportJsonEntityReportResponse* Arena::CreateMaybeMessage<::szengine::StreamExportJsonEntityReportResponse>(Arena*);
template<> ::szengine::WhyEntitiesRequest* Arena::CreateMaybeMessage<::szengine::WhyEntitiesRequest>(Arena*);
template<> ::szengine::WhyEntitiesResponse* Arena::CreateMaybeMessage<::szengine::WhyEntitiesResponse>(Arena*);
template<> ::szengine::WhyRecordInEntityRequest* Arena::CreateMaybeMessage<::szengine::WhyRecordInEntityRequest>(Arena*);
template<> ::szengine::WhyRecordInEntityResponse* Arena::CreateMaybeMessage<::szengine::WhyRecordInEntityResponse>(Arena*);
template<> ::szengine::WhyRecordsRequest* Arena::CreateMaybeMessage<::szengine::WhyRecordsRequest>(Arena*);
template<> ::szengine::WhyRecordsResponse* Arena::CreateMaybeMessage<::szengine::WhyRecordsResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace szengine {

// ===================================================================

class AddRecordRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:szengine.AddRecordRequest) */ {
 public:
  inline AddRecordRequest() : AddRecordRequest(nullptr) {};
  virtual ~AddRecordRequest();

  AddRecordRequest(const AddRecordRequest& from);
  AddRecordRequest(AddRecordRequest&& from) noexcept
    : AddRecordRequest() {
    *this = ::std::move(from);
  }

  inline AddRecordRequest& operator=(const AddRecordRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddRecordRequest& operator=(AddRecordRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AddRecordRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AddRecordRequest* internal_default_instance() {
    return reinterpret_cast<const AddRecordRequest*>(
               &_AddRecordRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(AddRecordRequest& a, AddRecordRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(AddRecordRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AddRecordRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AddRecordRequest* New() const final {
    return CreateMaybeMessage<AddRecordRequest>(nullptr);
  }

  AddRecordRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AddRecordRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AddRecordRequest& from);
  void MergeFrom(const AddRecordRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddRecordRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "szengine.AddRecordRequest";
  }
  protected:
  explicit AddRecordRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_szengine_2eproto);
    return ::descriptor_table_szengine_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataSourceCodeFieldNumber = 1,
    kRecordIdFieldNumber = 2,
    kRecordDefinitionFieldNumber = 3,
    kFlagsFieldNumber = 4,
  };
  // string dataSourceCode = 1;
  void clear_datasourcecode();
  const std::string& datasourcecode() const;
  void set_datasourcecode(const std::string& value);
  void set_datasourcecode(std::string&& value);
  void set_datasourcecode(const char* value);
  void set_datasourcecode(const char* value, size_t size);
  std::string* mutable_datasourcecode();
  std::string* release_datasourcecode();
  void set_allocated_datasourcecode(std::string* datasourcecode);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_datasourcecode();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_datasourcecode(
      std::string* datasourcecode);
  private:
  const std::string& _internal_datasourcecode() const;
  void _internal_set_datasourcecode(const std::string& value);
  std::string* _internal_mutable_datasourcecode();
  public:

  // string recordId = 2;
  void clear_recordid();
  const std::string& recordid() const;
  void set_recordid(const std::string& value);
  void set_recordid(std::string&& value);
  void set_recordid(const char* value);
  void set_recordid(const char* value, size_t size);
  std::string* mutable_recordid();
  std::string* release_recordid();
  void set_allocated_recordid(std::string* recordid);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_recordid();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_recordid(
      std::string* recordid);
  private:
  const std::string& _internal_recordid() const;
  void _internal_set_recordid(const std::string& value);
  std::string* _internal_mutable_recordid();
  public:

  // string recordDefinition = 3;
  void clear_recorddefinition();
  const std::string& recorddefinition() const;
  void set_recorddefinition(const std::string& value);
  void set_recorddefinition(std::string&& value);
  void set_recorddefinition(const char* value);
  void set_recorddefinition(const char* value, size_t size);
  std::string* mutable_recorddefinition();
  std::string* release_recorddefinition();
  void set_allocated_recorddefinition(std::string* recorddefinition);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_recorddefinition();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_recorddefinition(
      std::string* recorddefinition);
  private:
  const std::string& _internal_recorddefinition() const;
  void _internal_set_recorddefinition(const std::string& value);
  std::string* _internal_mutable_recorddefinition();
  public:

  // int64 flags = 4;
  void clear_flags();
  ::PROTOBUF_NAMESPACE_ID::int64 flags() const;
  void set_flags(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_flags() const;
  void _internal_set_flags(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:szengine.AddRecordRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr datasourcecode_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr recordid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr recorddefinition_;
  ::PROTOBUF_NAMESPACE_ID::int64 flags_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_szengine_2eproto;
};
// -------------------------------------------------------------------

class AddRecordResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:szengine.AddRecordResponse) */ {
 public:
  inline AddRecordResponse() : AddRecordResponse(nullptr) {};
  virtual ~AddRecordResponse();

  AddRecordResponse(const AddRecordResponse& from);
  AddRecordResponse(AddRecordResponse&& from) noexcept
    : AddRecordResponse() {
    *this = ::std::move(from);
  }

  inline AddRecordResponse& operator=(const AddRecordResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddRecordResponse& operator=(AddRecordResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AddRecordResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AddRecordResponse* internal_default_instance() {
    return reinterpret_cast<const AddRecordResponse*>(
               &_AddRecordResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(AddRecordResponse& a, AddRecordResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(AddRecordResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AddRecordResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AddRecordResponse* New() const final {
    return CreateMaybeMessage<AddRecordResponse>(nullptr);
  }

  AddRecordResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AddRecordResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AddRecordResponse& from);
  void MergeFrom(const AddRecordResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddRecordResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "szengine.AddRecordResponse";
  }
  protected:
  explicit AddRecordResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_szengine_2eproto);
    return ::descriptor_table_szengine_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
  };
  // string result = 1;
  void clear_result();
  const std::string& result() const;
  void set_result(const std::string& value);
  void set_result(std::string&& value);
  void set_result(const char* value);
  void set_result(const char* value, size_t size);
  std::string* mutable_result();
  std::string* release_result();
  void set_allocated_result(std::string* result);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_result();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_result(
      std::string* result);
  private:
  const std::string& _internal_result() const;
  void _internal_set_result(const std::string& value);
  std::string* _internal_mutable_result();
  public:

  // @@protoc_insertion_point(class_scope:szengine.AddRecordResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_szengine_2eproto;
};
// -------------------------------------------------------------------

class CloseExportRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:szengine.CloseExportRequest) */ {
 public:
  inline CloseExportRequest() : CloseExportRequest(nullptr) {};
  virtual ~CloseExportRequest();

  CloseExportRequest(const CloseExportRequest& from);
  CloseExportRequest(CloseExportRequest&& from) noexcept
    : CloseExportRequest() {
    *this = ::std::move(from);
  }

  inline CloseExportRequest& operator=(const CloseExportRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CloseExportRequest& operator=(CloseExportRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CloseExportRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CloseExportRequest* internal_default_instance() {
    return reinterpret_cast<const CloseExportRequest*>(
               &_CloseExportRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(CloseExportRequest& a, CloseExportRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CloseExportRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CloseExportRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CloseExportRequest* New() const final {
    return CreateMaybeMessage<CloseExportRequest>(nullptr);
  }

  CloseExportRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CloseExportRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CloseExportRequest& from);
  void MergeFrom(const CloseExportRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CloseExportRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "szengine.CloseExportRequest";
  }
  protected:
  explicit CloseExportRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_szengine_2eproto);
    return ::descriptor_table_szengine_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kExportHandleFieldNumber = 1,
  };
  // int64 exportHandle = 1;
  void clear_exporthandle();
  ::PROTOBUF_NAMESPACE_ID::int64 exporthandle() const;
  void set_exporthandle(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_exporthandle() const;
  void _internal_set_exporthandle(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:szengine.CloseExportRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int64 exporthandle_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_szengine_2eproto;
};
// -------------------------------------------------------------------

class CloseExportResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:szengine.CloseExportResponse) */ {
 public:
  inline CloseExportResponse() : CloseExportResponse(nullptr) {};
  virtual ~CloseExportResponse();

  CloseExportResponse(const CloseExportResponse& from);
  CloseExportResponse(CloseExportResponse&& from) noexcept
    : CloseExportResponse() {
    *this = ::std::move(from);
  }

  inline CloseExportResponse& operator=(const CloseExportResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CloseExportResponse& operator=(CloseExportResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CloseExportResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CloseExportResponse* internal_default_instance() {
    return reinterpret_cast<const CloseExportResponse*>(
               &_CloseExportResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(CloseExportResponse& a, CloseExportResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CloseExportResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CloseExportResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CloseExportResponse* New() const final {
    return CreateMaybeMessage<CloseExportResponse>(nullptr);
  }

  CloseExportResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CloseExportResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CloseExportResponse& from);
  void MergeFrom(const CloseExportResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CloseExportResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "szengine.CloseExportResponse";
  }
  protected:
  explicit CloseExportResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_szengine_2eproto);
    return ::descriptor_table_szengine_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:szengine.CloseExportResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_szengine_2eproto;
};
// -------------------------------------------------------------------

class CountRedoRecordsRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:szengine.CountRedoRecordsRequest) */ {
 public:
  inline CountRedoRecordsRequest() : CountRedoRecordsRequest(nullptr) {};
  virtual ~CountRedoRecordsRequest();

  CountRedoRecordsRequest(const CountRedoRecordsRequest& from);
  CountRedoRecordsRequest(CountRedoRecordsRequest&& from) noexcept
    : CountRedoRecordsRequest() {
    *this = ::std::move(from);
  }

  inline CountRedoRecordsRequest& operator=(const CountRedoRecordsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CountRedoRecordsRequest& operator=(CountRedoRecordsRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CountRedoRecordsRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CountRedoRecordsRequest* internal_default_instance() {
    return reinterpret_cast<const CountRedoRecordsRequest*>(
               &_CountRedoRecordsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(CountRedoRecordsRequest& a, CountRedoRecordsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CountRedoRecordsRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CountRedoRecordsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CountRedoRecordsRequest* New() const final {
    return CreateMaybeMessage<CountRedoRecordsRequest>(nullptr);
  }

  CountRedoRecordsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CountRedoRecordsRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CountRedoRecordsRequest& from);
  void MergeFrom(const CountRedoRecordsRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CountRedoRecordsRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "szengine.CountRedoRecordsRequest";
  }
  protected:
  explicit CountRedoRecordsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_szengine_2eproto);
    return ::descriptor_table_szengine_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:szengine.CountRedoRecordsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_szengine_2eproto;
};
// -------------------------------------------------------------------

class CountRedoRecordsResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:szengine.CountRedoRecordsResponse) */ {
 public:
  inline CountRedoRecordsResponse() : CountRedoRecordsResponse(nullptr) {};
  virtual ~CountRedoRecordsResponse();

  CountRedoRecordsResponse(const CountRedoRecordsResponse& from);
  CountRedoRecordsResponse(CountRedoRecordsResponse&& from) noexcept
    : CountRedoRecordsResponse() {
    *this = ::std::move(from);
  }

  inline CountRedoRecordsResponse& operator=(const CountRedoRecordsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CountRedoRecordsResponse& operator=(CountRedoRecordsResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CountRedoRecordsResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CountRedoRecordsResponse* internal_default_instance() {
    return reinterpret_cast<const CountRedoRecordsResponse*>(
               &_CountRedoRecordsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(CountRedoRecordsResponse& a, CountRedoRecordsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CountRedoRecordsResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CountRedoRecordsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CountRedoRecordsResponse* New() const final {
    return CreateMaybeMessage<CountRedoRecordsResponse>(nullptr);
  }

  CountRedoRecordsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CountRedoRecordsResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CountRedoRecordsResponse& from);
  void MergeFrom(const CountRedoRecordsResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CountRedoRecordsResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "szengine.CountRedoRecordsResponse";
  }
  protected:
  explicit CountRedoRecordsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_szengine_2eproto);
    return ::descriptor_table_szengine_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
  };
  // int64 result = 1;
  void clear_result();
  ::PROTOBUF_NAMESPACE_ID::int64 result() const;
  void set_result(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_result() const;
  void _internal_set_result(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:szengine.CountRedoRecordsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int64 result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_szengine_2eproto;
};
// -------------------------------------------------------------------

class DeleteRecordRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:szengine.DeleteRecordRequest) */ {
 public:
  inline DeleteRecordRequest() : DeleteRecordRequest(nullptr) {};
  virtual ~DeleteRecordRequest();

  DeleteRecordRequest(const DeleteRecordRequest& from);
  DeleteRecordRequest(DeleteRecordRequest&& from) noexcept
    : DeleteRecordRequest() {
    *this = ::std::move(from);
  }

  inline DeleteRecordRequest& operator=(const DeleteRecordRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteRecordRequest& operator=(DeleteRecordRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeleteRecordRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeleteRecordRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteRecordRequest*>(
               &_DeleteRecordRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(DeleteRecordRequest& a, DeleteRecordRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteRecordRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteRecordRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeleteRecordRequest* New() const final {
    return CreateMaybeMessage<DeleteRecordRequest>(nullptr);
  }

  DeleteRecordRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeleteRecordRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeleteRecordRequest& from);
  void MergeFrom(const DeleteRecordRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteRecordRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "szengine.DeleteRecordRequest";
  }
  protected:
  explicit DeleteRecordRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_szengine_2eproto);
    return ::descriptor_table_szengine_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataSourceCodeFieldNumber = 1,
    kRecordIdFieldNumber = 2,
    kFlagsFieldNumber = 3,
  };
  // string dataSourceCode = 1;
  void clear_datasourcecode();
  const std::string& datasourcecode() const;
  void set_datasourcecode(const std::string& value);
  void set_datasourcecode(std::string&& value);
  void set_datasourcecode(const char* value);
  void set_datasourcecode(const char* value, size_t size);
  std::string* mutable_datasourcecode();
  std::string* release_datasourcecode();
  void set_allocated_datasourcecode(std::string* datasourcecode);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_datasourcecode();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_datasourcecode(
      std::string* datasourcecode);
  private:
  const std::string& _internal_datasourcecode() const;
  void _internal_set_datasourcecode(const std::string& value);
  std::string* _internal_mutable_datasourcecode();
  public:

  // string recordId = 2;
  void clear_recordid();
  const std::string& recordid() const;
  void set_recordid(const std::string& value);
  void set_recordid(std::string&& value);
  void set_recordid(const char* value);
  void set_recordid(const char* value, size_t size);
  std::string* mutable_recordid();
  std::string* release_recordid();
  void set_allocated_recordid(std::string* recordid);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_recordid();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_recordid(
      std::string* recordid);
  private:
  const std::string& _internal_recordid() const;
  void _internal_set_recordid(const std::string& value);
  std::string* _internal_mutable_recordid();
  public:

  // int64 flags = 3;
  void clear_flags();
  ::PROTOBUF_NAMESPACE_ID::int64 flags() const;
  void set_flags(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_flags() const;
  void _internal_set_flags(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:szengine.DeleteRecordRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr datasourcecode_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr recordid_;
  ::PROTOBUF_NAMESPACE_ID::int64 flags_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_szengine_2eproto;
};
// -------------------------------------------------------------------

class DeleteRecordResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:szengine.DeleteRecordResponse) */ {
 public:
  inline DeleteRecordResponse() : DeleteRecordResponse(nullptr) {};
  virtual ~DeleteRecordResponse();

  DeleteRecordResponse(const DeleteRecordResponse& from);
  DeleteRecordResponse(DeleteRecordResponse&& from) noexcept
    : DeleteRecordResponse() {
    *this = ::std::move(from);
  }

  inline DeleteRecordResponse& operator=(const DeleteRecordResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteRecordResponse& operator=(DeleteRecordResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeleteRecordResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeleteRecordResponse* internal_default_instance() {
    return reinterpret_cast<const DeleteRecordResponse*>(
               &_DeleteRecordResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(DeleteRecordResponse& a, DeleteRecordResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteRecordResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteRecordResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeleteRecordResponse* New() const final {
    return CreateMaybeMessage<DeleteRecordResponse>(nullptr);
  }

  DeleteRecordResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeleteRecordResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeleteRecordResponse& from);
  void MergeFrom(const DeleteRecordResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteRecordResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "szengine.DeleteRecordResponse";
  }
  protected:
  explicit DeleteRecordResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_szengine_2eproto);
    return ::descriptor_table_szengine_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
  };
  // string result = 1;
  void clear_result();
  const std::string& result() const;
  void set_result(const std::string& value);
  void set_result(std::string&& value);
  void set_result(const char* value);
  void set_result(const char* value, size_t size);
  std::string* mutable_result();
  std::string* release_result();
  void set_allocated_result(std::string* result);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_result();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_result(
      std::string* result);
  private:
  const std::string& _internal_result() const;
  void _internal_set_result(const std::string& value);
  std::string* _internal_mutable_result();
  public:

  // @@protoc_insertion_point(class_scope:szengine.DeleteRecordResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_szengine_2eproto;
};
// -------------------------------------------------------------------

class ExportCsvEntityReportRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:szengine.ExportCsvEntityReportRequest) */ {
 public:
  inline ExportCsvEntityReportRequest() : ExportCsvEntityReportRequest(nullptr) {};
  virtual ~ExportCsvEntityReportRequest();

  ExportCsvEntityReportRequest(const ExportCsvEntityReportRequest& from);
  ExportCsvEntityReportRequest(ExportCsvEntityReportRequest&& from) noexcept
    : ExportCsvEntityReportRequest() {
    *this = ::std::move(from);
  }

  inline ExportCsvEntityReportRequest& operator=(const ExportCsvEntityReportRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ExportCsvEntityReportRequest& operator=(ExportCsvEntityReportRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ExportCsvEntityReportRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ExportCsvEntityReportRequest* internal_default_instance() {
    return reinterpret_cast<const ExportCsvEntityReportRequest*>(
               &_ExportCsvEntityReportRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(ExportCsvEntityReportRequest& a, ExportCsvEntityReportRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ExportCsvEntityReportRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ExportCsvEntityReportRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ExportCsvEntityReportRequest* New() const final {
    return CreateMaybeMessage<ExportCsvEntityReportRequest>(nullptr);
  }

  ExportCsvEntityReportRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ExportCsvEntityReportRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ExportCsvEntityReportRequest& from);
  void MergeFrom(const ExportCsvEntityReportRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ExportCsvEntityReportRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "szengine.ExportCsvEntityReportRequest";
  }
  protected:
  explicit ExportCsvEntityReportRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_szengine_2eproto);
    return ::descriptor_table_szengine_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCsvColumnListFieldNumber = 1,
    kFlagsFieldNumber = 2,
  };
  // string csvColumnList = 1;
  void clear_csvcolumnlist();
  const std::string& csvcolumnlist() const;
  void set_csvcolumnlist(const std::string& value);
  void set_csvcolumnlist(std::string&& value);
  void set_csvcolumnlist(const char* value);
  void set_csvcolumnlist(const char* value, size_t size);
  std::string* mutable_csvcolumnlist();
  std::string* release_csvcolumnlist();
  void set_allocated_csvcolumnlist(std::string* csvcolumnlist);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_csvcolumnlist();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_csvcolumnlist(
      std::string* csvcolumnlist);
  private:
  const std::string& _internal_csvcolumnlist() const;
  void _internal_set_csvcolumnlist(const std::string& value);
  std::string* _internal_mutable_csvcolumnlist();
  public:

  // int64 flags = 2;
  void clear_flags();
  ::PROTOBUF_NAMESPACE_ID::int64 flags() const;
  void set_flags(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_flags() const;
  void _internal_set_flags(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:szengine.ExportCsvEntityReportRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr csvcolumnlist_;
  ::PROTOBUF_NAMESPACE_ID::int64 flags_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_szengine_2eproto;
};
// -------------------------------------------------------------------

class ExportCsvEntityReportResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:szengine.ExportCsvEntityReportResponse) */ {
 public:
  inline ExportCsvEntityReportResponse() : ExportCsvEntityReportResponse(nullptr) {};
  virtual ~ExportCsvEntityReportResponse();

  ExportCsvEntityReportResponse(const ExportCsvEntityReportResponse& from);
  ExportCsvEntityReportResponse(ExportCsvEntityReportResponse&& from) noexcept
    : ExportCsvEntityReportResponse() {
    *this = ::std::move(from);
  }

  inline ExportCsvEntityReportResponse& operator=(const ExportCsvEntityReportResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ExportCsvEntityReportResponse& operator=(ExportCsvEntityReportResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ExportCsvEntityReportResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ExportCsvEntityReportResponse* internal_default_instance() {
    return reinterpret_cast<const ExportCsvEntityReportResponse*>(
               &_ExportCsvEntityReportResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(ExportCsvEntityReportResponse& a, ExportCsvEntityReportResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ExportCsvEntityReportResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ExportCsvEntityReportResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ExportCsvEntityReportResponse* New() const final {
    return CreateMaybeMessage<ExportCsvEntityReportResponse>(nullptr);
  }

  ExportCsvEntityReportResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ExportCsvEntityReportResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ExportCsvEntityReportResponse& from);
  void MergeFrom(const ExportCsvEntityReportResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ExportCsvEntityReportResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "szengine.ExportCsvEntityReportResponse";
  }
  protected:
  explicit ExportCsvEntityReportResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_szengine_2eproto);
    return ::descriptor_table_szengine_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
  };
  // int64 result = 1;
  void clear_result();
  ::PROTOBUF_NAMESPACE_ID::int64 result() const;
  void set_result(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_result() const;
  void _internal_set_result(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:szengine.ExportCsvEntityReportResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int64 result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_szengine_2eproto;
};
// -------------------------------------------------------------------

class ExportJsonEntityReportRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:szengine.ExportJsonEntityReportRequest) */ {
 public:
  inline ExportJsonEntityReportRequest() : ExportJsonEntityReportRequest(nullptr) {};
  virtual ~ExportJsonEntityReportRequest();

  ExportJsonEntityReportRequest(const ExportJsonEntityReportRequest& from);
  ExportJsonEntityReportRequest(ExportJsonEntityReportRequest&& from) noexcept
    : ExportJsonEntityReportRequest() {
    *this = ::std::move(from);
  }

  inline ExportJsonEntityReportRequest& operator=(const ExportJsonEntityReportRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ExportJsonEntityReportRequest& operator=(ExportJsonEntityReportRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ExportJsonEntityReportRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ExportJsonEntityReportRequest* internal_default_instance() {
    return reinterpret_cast<const ExportJsonEntityReportRequest*>(
               &_ExportJsonEntityReportRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(ExportJsonEntityReportRequest& a, ExportJsonEntityReportRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ExportJsonEntityReportRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ExportJsonEntityReportRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ExportJsonEntityReportRequest* New() const final {
    return CreateMaybeMessage<ExportJsonEntityReportRequest>(nullptr);
  }

  ExportJsonEntityReportRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ExportJsonEntityReportRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ExportJsonEntityReportRequest& from);
  void MergeFrom(const ExportJsonEntityReportRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ExportJsonEntityReportRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "szengine.ExportJsonEntityReportRequest";
  }
  protected:
  explicit ExportJsonEntityReportRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_szengine_2eproto);
    return ::descriptor_table_szengine_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFlagsFieldNumber = 1,
  };
  // int64 flags = 1;
  void clear_flags();
  ::PROTOBUF_NAMESPACE_ID::int64 flags() const;
  void set_flags(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_flags() const;
  void _internal_set_flags(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:szengine.ExportJsonEntityReportRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int64 flags_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_szengine_2eproto;
};
// -------------------------------------------------------------------

class ExportJsonEntityReportResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:szengine.ExportJsonEntityReportResponse) */ {
 public:
  inline ExportJsonEntityReportResponse() : ExportJsonEntityReportResponse(nullptr) {};
  virtual ~ExportJsonEntityReportResponse();

  ExportJsonEntityReportResponse(const ExportJsonEntityReportResponse& from);
  ExportJsonEntityReportResponse(ExportJsonEntityReportResponse&& from) noexcept
    : ExportJsonEntityReportResponse() {
    *this = ::std::move(from);
  }

  inline ExportJsonEntityReportResponse& operator=(const ExportJsonEntityReportResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ExportJsonEntityReportResponse& operator=(ExportJsonEntityReportResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ExportJsonEntityReportResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ExportJsonEntityReportResponse* internal_default_instance() {
    return reinterpret_cast<const ExportJsonEntityReportResponse*>(
               &_ExportJsonEntityReportResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(ExportJsonEntityReportResponse& a, ExportJsonEntityReportResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ExportJsonEntityReportResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ExportJsonEntityReportResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ExportJsonEntityReportResponse* New() const final {
    return CreateMaybeMessage<ExportJsonEntityReportResponse>(nullptr);
  }

  ExportJsonEntityReportResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ExportJsonEntityReportResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ExportJsonEntityReportResponse& from);
  void MergeFrom(const ExportJsonEntityReportResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ExportJsonEntityReportResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "szengine.ExportJsonEntityReportResponse";
  }
  protected:
  explicit ExportJsonEntityReportResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_szengine_2eproto);
    return ::descriptor_table_szengine_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
  };
  // int64 result = 1;
  void clear_result();
  ::PROTOBUF_NAMESPACE_ID::int64 result() const;
  void set_result(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_result() const;
  void _internal_set_result(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:szengine.ExportJsonEntityReportResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int64 result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_szengine_2eproto;
};
// -------------------------------------------------------------------

class FetchNextRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:szengine.FetchNextRequest) */ {
 public:
  inline FetchNextRequest() : FetchNextRequest(nullptr) {};
  virtual ~FetchNextRequest();

  FetchNextRequest(const FetchNextRequest& from);
  FetchNextRequest(FetchNextRequest&& from) noexcept
    : FetchNextRequest() {
    *this = ::std::move(from);
  }

  inline FetchNextRequest& operator=(const FetchNextRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline FetchNextRequest& operator=(FetchNextRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FetchNextRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FetchNextRequest* internal_default_instance() {
    return reinterpret_cast<const FetchNextRequest*>(
               &_FetchNextRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(FetchNextRequest& a, FetchNextRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(FetchNextRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FetchNextRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FetchNextRequest* New() const final {
    return CreateMaybeMessage<FetchNextRequest>(nullptr);
  }

  FetchNextRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FetchNextRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FetchNextRequest& from);
  void MergeFrom(const FetchNextRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FetchNextRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "szengine.FetchNextRequest";
  }
  protected:
  explicit FetchNextRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_szengine_2eproto);
    return ::descriptor_table_szengine_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kExportHandleFieldNumber = 1,
  };
  // int64 exportHandle = 1;
  void clear_exporthandle();
  ::PROTOBUF_NAMESPACE_ID::int64 exporthandle() const;
  void set_exporthandle(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_exporthandle() const;
  void _internal_set_exporthandle(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:szengine.FetchNextRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int64 exporthandle_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_szengine_2eproto;
};
// -------------------------------------------------------------------

class FetchNextResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:szengine.FetchNextResponse) */ {
 public:
  inline FetchNextResponse() : FetchNextResponse(nullptr) {};
  virtual ~FetchNextResponse();

  FetchNextResponse(const FetchNextResponse& from);
  FetchNextResponse(FetchNextResponse&& from) noexcept
    : FetchNextResponse() {
    *this = ::std::move(from);
  }

  inline FetchNextResponse& operator=(const FetchNextResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline FetchNextResponse& operator=(FetchNextResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FetchNextResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FetchNextResponse* internal_default_instance() {
    return reinterpret_cast<const FetchNextResponse*>(
               &_FetchNextResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(FetchNextResponse& a, FetchNextResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(FetchNextResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FetchNextResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FetchNextResponse* New() const final {
    return CreateMaybeMessage<FetchNextResponse>(nullptr);
  }

  FetchNextResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FetchNextResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FetchNextResponse& from);
  void MergeFrom(const FetchNextResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FetchNextResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "szengine.FetchNextResponse";
  }
  protected:
  explicit FetchNextResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_szengine_2eproto);
    return ::descriptor_table_szengine_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
  };
  // string result = 1;
  void clear_result();
  const std::string& result() const;
  void set_result(const std::string& value);
  void set_result(std::string&& value);
  void set_result(const char* value);
  void set_result(const char* value, size_t size);
  std::string* mutable_result();
  std::string* release_result();
  void set_allocated_result(std::string* result);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_result();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_result(
      std::string* result);
  private:
  const std::string& _internal_result() const;
  void _internal_set_result(const std::string& value);
  std::string* _internal_mutable_result();
  public:

  // @@protoc_insertion_point(class_scope:szengine.FetchNextResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_szengine_2eproto;
};
// -------------------------------------------------------------------

class FindInterestingEntitiesByEntityIdRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:szengine.FindInterestingEntitiesByEntityIdRequest) */ {
 public:
  inline FindInterestingEntitiesByEntityIdRequest() : FindInterestingEntitiesByEntityIdRequest(nullptr) {};
  virtual ~FindInterestingEntitiesByEntityIdRequest();

  FindInterestingEntitiesByEntityIdRequest(const FindInterestingEntitiesByEntityIdRequest& from);
  FindInterestingEntitiesByEntityIdRequest(FindInterestingEntitiesByEntityIdRequest&& from) noexcept
    : FindInterestingEntitiesByEntityIdRequest() {
    *this = ::std::move(from);
  }

  inline FindInterestingEntitiesByEntityIdRequest& operator=(const FindInterestingEntitiesByEntityIdRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline FindInterestingEntitiesByEntityIdRequest& operator=(FindInterestingEntitiesByEntityIdRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FindInterestingEntitiesByEntityIdRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FindInterestingEntitiesByEntityIdRequest* internal_default_instance() {
    return reinterpret_cast<const FindInterestingEntitiesByEntityIdRequest*>(
               &_FindInterestingEntitiesByEntityIdRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(FindInterestingEntitiesByEntityIdRequest& a, FindInterestingEntitiesByEntityIdRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(FindInterestingEntitiesByEntityIdRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FindInterestingEntitiesByEntityIdRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FindInterestingEntitiesByEntityIdRequest* New() const final {
    return CreateMaybeMessage<FindInterestingEntitiesByEntityIdRequest>(nullptr);
  }

  FindInterestingEntitiesByEntityIdRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FindInterestingEntitiesByEntityIdRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FindInterestingEntitiesByEntityIdRequest& from);
  void MergeFrom(const FindInterestingEntitiesByEntityIdRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FindInterestingEntitiesByEntityIdRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "szengine.FindInterestingEntitiesByEntityIdRequest";
  }
  protected:
  explicit FindInterestingEntitiesByEntityIdRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_szengine_2eproto);
    return ::descriptor_table_szengine_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEntityIdFieldNumber = 1,
    kFlagsFieldNumber = 2,
  };
  // int64 entityId = 1;
  void clear_entityid();
  ::PROTOBUF_NAMESPACE_ID::int64 entityid() const;
  void set_entityid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_entityid() const;
  void _internal_set_entityid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 flags = 2;
  void clear_flags();
  ::PROTOBUF_NAMESPACE_ID::int64 flags() const;
  void set_flags(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_flags() const;
  void _internal_set_flags(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:szengine.FindInterestingEntitiesByEntityIdRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int64 entityid_;
  ::PROTOBUF_NAMESPACE_ID::int64 flags_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_szengine_2eproto;
};
// -------------------------------------------------------------------

class FindInterestingEntitiesByEntityIdResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:szengine.FindInterestingEntitiesByEntityIdResponse) */ {
 public:
  inline FindInterestingEntitiesByEntityIdResponse() : FindInterestingEntitiesByEntityIdResponse(nullptr) {};
  virtual ~FindInterestingEntitiesByEntityIdResponse();

  FindInterestingEntitiesByEntityIdResponse(const FindInterestingEntitiesByEntityIdResponse& from);
  FindInterestingEntitiesByEntityIdResponse(FindInterestingEntitiesByEntityIdResponse&& from) noexcept
    : FindInterestingEntitiesByEntityIdResponse() {
    *this = ::std::move(from);
  }

  inline FindInterestingEntitiesByEntityIdResponse& operator=(const FindInterestingEntitiesByEntityIdResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline FindInterestingEntitiesByEntityIdResponse& operator=(FindInterestingEntitiesByEntityIdResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FindInterestingEntitiesByEntityIdResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FindInterestingEntitiesByEntityIdResponse* internal_default_instance() {
    return reinterpret_cast<const FindInterestingEntitiesByEntityIdResponse*>(
               &_FindInterestingEntitiesByEntityIdResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(FindInterestingEntitiesByEntityIdResponse& a, FindInterestingEntitiesByEntityIdResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(FindInterestingEntitiesByEntityIdResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FindInterestingEntitiesByEntityIdResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FindInterestingEntitiesByEntityIdResponse* New() const final {
    return CreateMaybeMessage<FindInterestingEntitiesByEntityIdResponse>(nullptr);
  }

  FindInterestingEntitiesByEntityIdResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FindInterestingEntitiesByEntityIdResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FindInterestingEntitiesByEntityIdResponse& from);
  void MergeFrom(const FindInterestingEntitiesByEntityIdResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FindInterestingEntitiesByEntityIdResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "szengine.FindInterestingEntitiesByEntityIdResponse";
  }
  protected:
  explicit FindInterestingEntitiesByEntityIdResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_szengine_2eproto);
    return ::descriptor_table_szengine_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
  };
  // string result = 1;
  void clear_result();
  const std::string& result() const;
  void set_result(const std::string& value);
  void set_result(std::string&& value);
  void set_result(const char* value);
  void set_result(const char* value, size_t size);
  std::string* mutable_result();
  std::string* release_result();
  void set_allocated_result(std::string* result);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_result();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_result(
      std::string* result);
  private:
  const std::string& _internal_result() const;
  void _internal_set_result(const std::string& value);
  std::string* _internal_mutable_result();
  public:

  // @@protoc_insertion_point(class_scope:szengine.FindInterestingEntitiesByEntityIdResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_szengine_2eproto;
};
// -------------------------------------------------------------------

class FindInterestingEntitiesByRecordIdRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:szengine.FindInterestingEntitiesByRecordIdRequest) */ {
 public:
  inline FindInterestingEntitiesByRecordIdRequest() : FindInterestingEntitiesByRecordIdRequest(nullptr) {};
  virtual ~FindInterestingEntitiesByRecordIdRequest();

  FindInterestingEntitiesByRecordIdRequest(const FindInterestingEntitiesByRecordIdRequest& from);
  FindInterestingEntitiesByRecordIdRequest(FindInterestingEntitiesByRecordIdRequest&& from) noexcept
    : FindInterestingEntitiesByRecordIdRequest() {
    *this = ::std::move(from);
  }

  inline FindInterestingEntitiesByRecordIdRequest& operator=(const FindInterestingEntitiesByRecordIdRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline FindInterestingEntitiesByRecordIdRequest& operator=(FindInterestingEntitiesByRecordIdRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FindInterestingEntitiesByRecordIdRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FindInterestingEntitiesByRecordIdRequest* internal_default_instance() {
    return reinterpret_cast<const FindInterestingEntitiesByRecordIdRequest*>(
               &_FindInterestingEntitiesByRecordIdRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(FindInterestingEntitiesByRecordIdRequest& a, FindInterestingEntitiesByRecordIdRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(FindInterestingEntitiesByRecordIdRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FindInterestingEntitiesByRecordIdRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FindInterestingEntitiesByRecordIdRequest* New() const final {
    return CreateMaybeMessage<FindInterestingEntitiesByRecordIdRequest>(nullptr);
  }

  FindInterestingEntitiesByRecordIdRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FindInterestingEntitiesByRecordIdRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FindInterestingEntitiesByRecordIdRequest& from);
  void MergeFrom(const FindInterestingEntitiesByRecordIdRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FindInterestingEntitiesByRecordIdRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "szengine.FindInterestingEntitiesByRecordIdRequest";
  }
  protected:
  explicit FindInterestingEntitiesByRecordIdRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_szengine_2eproto);
    return ::descriptor_table_szengine_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataSourceCodeFieldNumber = 1,
    kRecordIdFieldNumber = 2,
    kFlagsFieldNumber = 3,
  };
  // string dataSourceCode = 1;
  void clear_datasourcecode();
  const std::string& datasourcecode() const;
  void set_datasourcecode(const std::string& value);
  void set_datasourcecode(std::string&& value);
  void set_datasourcecode(const char* value);
  void set_datasourcecode(const char* value, size_t size);
  std::string* mutable_datasourcecode();
  std::string* release_datasourcecode();
  void set_allocated_datasourcecode(std::string* datasourcecode);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_datasourcecode();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_datasourcecode(
      std::string* datasourcecode);
  private:
  const std::string& _internal_datasourcecode() const;
  void _internal_set_datasourcecode(const std::string& value);
  std::string* _internal_mutable_datasourcecode();
  public:

  // string recordId = 2;
  void clear_recordid();
  const std::string& recordid() const;
  void set_recordid(const std::string& value);
  void set_recordid(std::string&& value);
  void set_recordid(const char* value);
  void set_recordid(const char* value, size_t size);
  std::string* mutable_recordid();
  std::string* release_recordid();
  void set_allocated_recordid(std::string* recordid);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_recordid();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_recordid(
      std::string* recordid);
  private:
  const std::string& _internal_recordid() const;
  void _internal_set_recordid(const std::string& value);
  std::string* _internal_mutable_recordid();
  public:

  // int64 flags = 3;
  void clear_flags();
  ::PROTOBUF_NAMESPACE_ID::int64 flags() const;
  void set_flags(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_flags() const;
  void _internal_set_flags(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:szengine.FindInterestingEntitiesByRecordIdRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr datasourcecode_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr recordid_;
  ::PROTOBUF_NAMESPACE_ID::int64 flags_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_szengine_2eproto;
};
// -------------------------------------------------------------------

class FindInterestingEntitiesByRecordIdResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:szengine.FindInterestingEntitiesByRecordIdResponse) */ {
 public:
  inline FindInterestingEntitiesByRecordIdResponse() : FindInterestingEntitiesByRecordIdResponse(nullptr) {};
  virtual ~FindInterestingEntitiesByRecordIdResponse();

  FindInterestingEntitiesByRecordIdResponse(const FindInterestingEntitiesByRecordIdResponse& from);
  FindInterestingEntitiesByRecordIdResponse(FindInterestingEntitiesByRecordIdResponse&& from) noexcept
    : FindInterestingEntitiesByRecordIdResponse() {
    *this = ::std::move(from);
  }

  inline FindInterestingEntitiesByRecordIdResponse& operator=(const FindInterestingEntitiesByRecordIdResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline FindInterestingEntitiesByRecordIdResponse& operator=(FindInterestingEntitiesByRecordIdResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FindInterestingEntitiesByRecordIdResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FindInterestingEntitiesByRecordIdResponse* internal_default_instance() {
    return reinterpret_cast<const FindInterestingEntitiesByRecordIdResponse*>(
               &_FindInterestingEntitiesByRecordIdResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(FindInterestingEntitiesByRecordIdResponse& a, FindInterestingEntitiesByRecordIdResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(FindInterestingEntitiesByRecordIdResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FindInterestingEntitiesByRecordIdResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FindInterestingEntitiesByRecordIdResponse* New() const final {
    return CreateMaybeMessage<FindInterestingEntitiesByRecordIdResponse>(nullptr);
  }

  FindInterestingEntitiesByRecordIdResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FindInterestingEntitiesByRecordIdResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FindInterestingEntitiesByRecordIdResponse& from);
  void MergeFrom(const FindInterestingEntitiesByRecordIdResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FindInterestingEntitiesByRecordIdResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "szengine.FindInterestingEntitiesByRecordIdResponse";
  }
  protected:
  explicit FindInterestingEntitiesByRecordIdResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_szengine_2eproto);
    return ::descriptor_table_szengine_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
  };
  // string result = 1;
  void clear_result();
  const std::string& result() const;
  void set_result(const std::string& value);
  void set_result(std::string&& value);
  void set_result(const char* value);
  void set_result(const char* value, size_t size);
  std::string* mutable_result();
  std::string* release_result();
  void set_allocated_result(std::string* result);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_result();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_result(
      std::string* result);
  private:
  const std::string& _internal_result() const;
  void _internal_set_result(const std::string& value);
  std::string* _internal_mutable_result();
  public:

  // @@protoc_insertion_point(class_scope:szengine.FindInterestingEntitiesByRecordIdResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_szengine_2eproto;
};
// -------------------------------------------------------------------

class FindNetworkByEntityIdRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:szengine.FindNetworkByEntityIdRequest) */ {
 public:
  inline FindNetworkByEntityIdRequest() : FindNetworkByEntityIdRequest(nullptr) {};
  virtual ~FindNetworkByEntityIdRequest();

  FindNetworkByEntityIdRequest(const FindNetworkByEntityIdRequest& from);
  FindNetworkByEntityIdRequest(FindNetworkByEntityIdRequest&& from) noexcept
    : FindNetworkByEntityIdRequest() {
    *this = ::std::move(from);
  }

  inline FindNetworkByEntityIdRequest& operator=(const FindNetworkByEntityIdRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline FindNetworkByEntityIdRequest& operator=(FindNetworkByEntityIdRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FindNetworkByEntityIdRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FindNetworkByEntityIdRequest* internal_default_instance() {
    return reinterpret_cast<const FindNetworkByEntityIdRequest*>(
               &_FindNetworkByEntityIdRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(FindNetworkByEntityIdRequest& a, FindNetworkByEntityIdRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(FindNetworkByEntityIdRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FindNetworkByEntityIdRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FindNetworkByEntityIdRequest* New() const final {
    return CreateMaybeMessage<FindNetworkByEntityIdRequest>(nullptr);
  }

  FindNetworkByEntityIdRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FindNetworkByEntityIdRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FindNetworkByEntityIdRequest& from);
  void MergeFrom(const FindNetworkByEntityIdRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FindNetworkByEntityIdRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "szengine.FindNetworkByEntityIdRequest";
  }
  protected:
  explicit FindNetworkByEntityIdRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_szengine_2eproto);
    return ::descriptor_table_szengine_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEntityIdsFieldNumber = 1,
    kMaxDegreesFieldNumber = 2,
    kBuildOutDegreesFieldNumber = 3,
    kBuildOutMaxEntitiesFieldNumber = 4,
    kFlagsFieldNumber = 5,
  };
  // string entityIds = 1;
  void clear_entityids();
  const std::string& entityids() const;
  void set_entityids(const std::string& value);
  void set_entityids(std::string&& value);
  void set_entityids(const char* value);
  void set_entityids(const char* value, size_t size);
  std::string* mutable_entityids();
  std::string* release_entityids();
  void set_allocated_entityids(std::string* entityids);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_entityids();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_entityids(
      std::string* entityids);
  private:
  const std::string& _internal_entityids() const;
  void _internal_set_entityids(const std::string& value);
  std::string* _internal_mutable_entityids();
  public:

  // int64 maxDegrees = 2;
  void clear_maxdegrees();
  ::PROTOBUF_NAMESPACE_ID::int64 maxdegrees() const;
  void set_maxdegrees(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_maxdegrees() const;
  void _internal_set_maxdegrees(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 buildOutDegrees = 3;
  void clear_buildoutdegrees();
  ::PROTOBUF_NAMESPACE_ID::int64 buildoutdegrees() const;
  void set_buildoutdegrees(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_buildoutdegrees() const;
  void _internal_set_buildoutdegrees(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 buildOutMaxEntities = 4;
  void clear_buildoutmaxentities();
  ::PROTOBUF_NAMESPACE_ID::int64 buildoutmaxentities() const;
  void set_buildoutmaxentities(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_buildoutmaxentities() const;
  void _internal_set_buildoutmaxentities(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 flags = 5;
  void clear_flags();
  ::PROTOBUF_NAMESPACE_ID::int64 flags() const;
  void set_flags(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_flags() const;
  void _internal_set_flags(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:szengine.FindNetworkByEntityIdRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr entityids_;
  ::PROTOBUF_NAMESPACE_ID::int64 maxdegrees_;
  ::PROTOBUF_NAMESPACE_ID::int64 buildoutdegrees_;
  ::PROTOBUF_NAMESPACE_ID::int64 buildoutmaxentities_;
  ::PROTOBUF_NAMESPACE_ID::int64 flags_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_szengine_2eproto;
};
// -------------------------------------------------------------------

class FindNetworkByEntityIdResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:szengine.FindNetworkByEntityIdResponse) */ {
 public:
  inline FindNetworkByEntityIdResponse() : FindNetworkByEntityIdResponse(nullptr) {};
  virtual ~FindNetworkByEntityIdResponse();

  FindNetworkByEntityIdResponse(const FindNetworkByEntityIdResponse& from);
  FindNetworkByEntityIdResponse(FindNetworkByEntityIdResponse&& from) noexcept
    : FindNetworkByEntityIdResponse() {
    *this = ::std::move(from);
  }

  inline FindNetworkByEntityIdResponse& operator=(const FindNetworkByEntityIdResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline FindNetworkByEntityIdResponse& operator=(FindNetworkByEntityIdResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FindNetworkByEntityIdResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FindNetworkByEntityIdResponse* internal_default_instance() {
    return reinterpret_cast<const FindNetworkByEntityIdResponse*>(
               &_FindNetworkByEntityIdResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(FindNetworkByEntityIdResponse& a, FindNetworkByEntityIdResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(FindNetworkByEntityIdResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FindNetworkByEntityIdResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FindNetworkByEntityIdResponse* New() const final {
    return CreateMaybeMessage<FindNetworkByEntityIdResponse>(nullptr);
  }

  FindNetworkByEntityIdResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FindNetworkByEntityIdResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FindNetworkByEntityIdResponse& from);
  void MergeFrom(const FindNetworkByEntityIdResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FindNetworkByEntityIdResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "szengine.FindNetworkByEntityIdResponse";
  }
  protected:
  explicit FindNetworkByEntityIdResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_szengine_2eproto);
    return ::descriptor_table_szengine_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
  };
  // string result = 1;
  void clear_result();
  const std::string& result() const;
  void set_result(const std::string& value);
  void set_result(std::string&& value);
  void set_result(const char* value);
  void set_result(const char* value, size_t size);
  std::string* mutable_result();
  std::string* release_result();
  void set_allocated_result(std::string* result);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_result();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_result(
      std::string* result);
  private:
  const std::string& _internal_result() const;
  void _internal_set_result(const std::string& value);
  std::string* _internal_mutable_result();
  public:

  // @@protoc_insertion_point(class_scope:szengine.FindNetworkByEntityIdResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_szengine_2eproto;
};
// -------------------------------------------------------------------

class FindNetworkByRecordIdRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:szengine.FindNetworkByRecordIdRequest) */ {
 public:
  inline FindNetworkByRecordIdRequest() : FindNetworkByRecordIdRequest(nullptr) {};
  virtual ~FindNetworkByRecordIdRequest();

  FindNetworkByRecordIdRequest(const FindNetworkByRecordIdRequest& from);
  FindNetworkByRecordIdRequest(FindNetworkByRecordIdRequest&& from) noexcept
    : FindNetworkByRecordIdRequest() {
    *this = ::std::move(from);
  }

  inline FindNetworkByRecordIdRequest& operator=(const FindNetworkByRecordIdRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline FindNetworkByRecordIdRequest& operator=(FindNetworkByRecordIdRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FindNetworkByRecordIdRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FindNetworkByRecordIdRequest* internal_default_instance() {
    return reinterpret_cast<const FindNetworkByRecordIdRequest*>(
               &_FindNetworkByRecordIdRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(FindNetworkByRecordIdRequest& a, FindNetworkByRecordIdRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(FindNetworkByRecordIdRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FindNetworkByRecordIdRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FindNetworkByRecordIdRequest* New() const final {
    return CreateMaybeMessage<FindNetworkByRecordIdRequest>(nullptr);
  }

  FindNetworkByRecordIdRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FindNetworkByRecordIdRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FindNetworkByRecordIdRequest& from);
  void MergeFrom(const FindNetworkByRecordIdRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FindNetworkByRecordIdRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "szengine.FindNetworkByRecordIdRequest";
  }
  protected:
  explicit FindNetworkByRecordIdRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_szengine_2eproto);
    return ::descriptor_table_szengine_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRecordKeysFieldNumber = 1,
    kMaxDegreesFieldNumber = 2,
    kBuildOutDegreesFieldNumber = 3,
    kBuildOutMaxEntitiesFieldNumber = 4,
    kFlagsFieldNumber = 5,
  };
  // string recordKeys = 1;
  void clear_recordkeys();
  const std::string& recordkeys() const;
  void set_recordkeys(const std::string& value);
  void set_recordkeys(std::string&& value);
  void set_recordkeys(const char* value);
  void set_recordkeys(const char* value, size_t size);
  std::string* mutable_recordkeys();
  std::string* release_recordkeys();
  void set_allocated_recordkeys(std::string* recordkeys);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_recordkeys();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_recordkeys(
      std::string* recordkeys);
  private:
  const std::string& _internal_recordkeys() const;
  void _internal_set_recordkeys(const std::string& value);
  std::string* _internal_mutable_recordkeys();
  public:

  // int64 maxDegrees = 2;
  void clear_maxdegrees();
  ::PROTOBUF_NAMESPACE_ID::int64 maxdegrees() const;
  void set_maxdegrees(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_maxdegrees() const;
  void _internal_set_maxdegrees(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 buildOutDegrees = 3;
  void clear_buildoutdegrees();
  ::PROTOBUF_NAMESPACE_ID::int64 buildoutdegrees() const;
  void set_buildoutdegrees(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_buildoutdegrees() const;
  void _internal_set_buildoutdegrees(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 buildOutMaxEntities = 4;
  void clear_buildoutmaxentities();
  ::PROTOBUF_NAMESPACE_ID::int64 buildoutmaxentities() const;
  void set_buildoutmaxentities(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_buildoutmaxentities() const;
  void _internal_set_buildoutmaxentities(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 flags = 5;
  void clear_flags();
  ::PROTOBUF_NAMESPACE_ID::int64 flags() const;
  void set_flags(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_flags() const;
  void _internal_set_flags(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:szengine.FindNetworkByRecordIdRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr recordkeys_;
  ::PROTOBUF_NAMESPACE_ID::int64 maxdegrees_;
  ::PROTOBUF_NAMESPACE_ID::int64 buildoutdegrees_;
  ::PROTOBUF_NAMESPACE_ID::int64 buildoutmaxentities_;
  ::PROTOBUF_NAMESPACE_ID::int64 flags_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_szengine_2eproto;
};
// -------------------------------------------------------------------

class FindNetworkByRecordIdResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:szengine.FindNetworkByRecordIdResponse) */ {
 public:
  inline FindNetworkByRecordIdResponse() : FindNetworkByRecordIdResponse(nullptr) {};
  virtual ~FindNetworkByRecordIdResponse();

  FindNetworkByRecordIdResponse(const FindNetworkByRecordIdResponse& from);
  FindNetworkByRecordIdResponse(FindNetworkByRecordIdResponse&& from) noexcept
    : FindNetworkByRecordIdResponse() {
    *this = ::std::move(from);
  }

  inline FindNetworkByRecordIdResponse& operator=(const FindNetworkByRecordIdResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline FindNetworkByRecordIdResponse& operator=(FindNetworkByRecordIdResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FindNetworkByRecordIdResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FindNetworkByRecordIdResponse* internal_default_instance() {
    return reinterpret_cast<const FindNetworkByRecordIdResponse*>(
               &_FindNetworkByRecordIdResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(FindNetworkByRecordIdResponse& a, FindNetworkByRecordIdResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(FindNetworkByRecordIdResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FindNetworkByRecordIdResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FindNetworkByRecordIdResponse* New() const final {
    return CreateMaybeMessage<FindNetworkByRecordIdResponse>(nullptr);
  }

  FindNetworkByRecordIdResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FindNetworkByRecordIdResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FindNetworkByRecordIdResponse& from);
  void MergeFrom(const FindNetworkByRecordIdResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FindNetworkByRecordIdResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "szengine.FindNetworkByRecordIdResponse";
  }
  protected:
  explicit FindNetworkByRecordIdResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_szengine_2eproto);
    return ::descriptor_table_szengine_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
  };
  // string result = 1;
  void clear_result();
  const std::string& result() const;
  void set_result(const std::string& value);
  void set_result(std::string&& value);
  void set_result(const char* value);
  void set_result(const char* value, size_t size);
  std::string* mutable_result();
  std::string* release_result();
  void set_allocated_result(std::string* result);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_result();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_result(
      std::string* result);
  private:
  const std::string& _internal_result() const;
  void _internal_set_result(const std::string& value);
  std::string* _internal_mutable_result();
  public:

  // @@protoc_insertion_point(class_scope:szengine.FindNetworkByRecordIdResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_szengine_2eproto;
};
// -------------------------------------------------------------------

class FindPathByEntityIdRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:szengine.FindPathByEntityIdRequest) */ {
 public:
  inline FindPathByEntityIdRequest() : FindPathByEntityIdRequest(nullptr) {};
  virtual ~FindPathByEntityIdRequest();

  FindPathByEntityIdRequest(const FindPathByEntityIdRequest& from);
  FindPathByEntityIdRequest(FindPathByEntityIdRequest&& from) noexcept
    : FindPathByEntityIdRequest() {
    *this = ::std::move(from);
  }

  inline FindPathByEntityIdRequest& operator=(const FindPathByEntityIdRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline FindPathByEntityIdRequest& operator=(FindPathByEntityIdRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FindPathByEntityIdRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FindPathByEntityIdRequest* internal_default_instance() {
    return reinterpret_cast<const FindPathByEntityIdRequest*>(
               &_FindPathByEntityIdRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(FindPathByEntityIdRequest& a, FindPathByEntityIdRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(FindPathByEntityIdRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FindPathByEntityIdRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FindPathByEntityIdRequest* New() const final {
    return CreateMaybeMessage<FindPathByEntityIdRequest>(nullptr);
  }

  FindPathByEntityIdRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FindPathByEntityIdRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FindPathByEntityIdRequest& from);
  void MergeFrom(const FindPathByEntityIdRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FindPathByEntityIdRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "szengine.FindPathByEntityIdRequest";
  }
  protected:
  explicit FindPathByEntityIdRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_szengine_2eproto);
    return ::descriptor_table_szengine_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAvoidEntityIdsFieldNumber = 4,
    kRequiredDataSourcesFieldNumber = 5,
    kStartEntityIdFieldNumber = 1,
    kEndEntityIdFieldNumber = 2,
    kMaxDegreesFieldNumber = 3,
    kFlagsFieldNumber = 6,
  };
  // string avoidEntityIds = 4;
  void clear_avoidentityids();
  const std::string& avoidentityids() const;
  void set_avoidentityids(const std::string& value);
  void set_avoidentityids(std::string&& value);
  void set_avoidentityids(const char* value);
  void set_avoidentityids(const char* value, size_t size);
  std::string* mutable_avoidentityids();
  std::string* release_avoidentityids();
  void set_allocated_avoidentityids(std::string* avoidentityids);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_avoidentityids();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_avoidentityids(
      std::string* avoidentityids);
  private:
  const std::string& _internal_avoidentityids() const;
  void _internal_set_avoidentityids(const std::string& value);
  std::string* _internal_mutable_avoidentityids();
  public:

  // string requiredDataSources = 5;
  void clear_requireddatasources();
  const std::string& requireddatasources() const;
  void set_requireddatasources(const std::string& value);
  void set_requireddatasources(std::string&& value);
  void set_requireddatasources(const char* value);
  void set_requireddatasources(const char* value, size_t size);
  std::string* mutable_requireddatasources();
  std::string* release_requireddatasources();
  void set_allocated_requireddatasources(std::string* requireddatasources);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_requireddatasources();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_requireddatasources(
      std::string* requireddatasources);
  private:
  const std::string& _internal_requireddatasources() const;
  void _internal_set_requireddatasources(const std::string& value);
  std::string* _internal_mutable_requireddatasources();
  public:

  // int64 startEntityId = 1;
  void clear_startentityid();
  ::PROTOBUF_NAMESPACE_ID::int64 startentityid() const;
  void set_startentityid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_startentityid() const;
  void _internal_set_startentityid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 endEntityId = 2;
  void clear_endentityid();
  ::PROTOBUF_NAMESPACE_ID::int64 endentityid() const;
  void set_endentityid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_endentityid() const;
  void _internal_set_endentityid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 maxDegrees = 3;
  void clear_maxdegrees();
  ::PROTOBUF_NAMESPACE_ID::int64 maxdegrees() const;
  void set_maxdegrees(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_maxdegrees() const;
  void _internal_set_maxdegrees(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 flags = 6;
  void clear_flags();
  ::PROTOBUF_NAMESPACE_ID::int64 flags() const;
  void set_flags(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_flags() const;
  void _internal_set_flags(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:szengine.FindPathByEntityIdRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr avoidentityids_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr requireddatasources_;
  ::PROTOBUF_NAMESPACE_ID::int64 startentityid_;
  ::PROTOBUF_NAMESPACE_ID::int64 endentityid_;
  ::PROTOBUF_NAMESPACE_ID::int64 maxdegrees_;
  ::PROTOBUF_NAMESPACE_ID::int64 flags_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_szengine_2eproto;
};
// -------------------------------------------------------------------

class FindPathByEntityIdResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:szengine.FindPathByEntityIdResponse) */ {
 public:
  inline FindPathByEntityIdResponse() : FindPathByEntityIdResponse(nullptr) {};
  virtual ~FindPathByEntityIdResponse();

  FindPathByEntityIdResponse(const FindPathByEntityIdResponse& from);
  FindPathByEntityIdResponse(FindPathByEntityIdResponse&& from) noexcept
    : FindPathByEntityIdResponse() {
    *this = ::std::move(from);
  }

  inline FindPathByEntityIdResponse& operator=(const FindPathByEntityIdResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline FindPathByEntityIdResponse& operator=(FindPathByEntityIdResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FindPathByEntityIdResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FindPathByEntityIdResponse* internal_default_instance() {
    return reinterpret_cast<const FindPathByEntityIdResponse*>(
               &_FindPathByEntityIdResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(FindPathByEntityIdResponse& a, FindPathByEntityIdResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(FindPathByEntityIdResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FindPathByEntityIdResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FindPathByEntityIdResponse* New() const final {
    return CreateMaybeMessage<FindPathByEntityIdResponse>(nullptr);
  }

  FindPathByEntityIdResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FindPathByEntityIdResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FindPathByEntityIdResponse& from);
  void MergeFrom(const FindPathByEntityIdResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FindPathByEntityIdResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "szengine.FindPathByEntityIdResponse";
  }
  protected:
  explicit FindPathByEntityIdResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_szengine_2eproto);
    return ::descriptor_table_szengine_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
  };
  // string result = 1;
  void clear_result();
  const std::string& result() const;
  void set_result(const std::string& value);
  void set_result(std::string&& value);
  void set_result(const char* value);
  void set_result(const char* value, size_t size);
  std::string* mutable_result();
  std::string* release_result();
  void set_allocated_result(std::string* result);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_result();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_result(
      std::string* result);
  private:
  const std::string& _internal_result() const;
  void _internal_set_result(const std::string& value);
  std::string* _internal_mutable_result();
  public:

  // @@protoc_insertion_point(class_scope:szengine.FindPathByEntityIdResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_szengine_2eproto;
};
// -------------------------------------------------------------------

class FindPathByRecordIdRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:szengine.FindPathByRecordIdRequest) */ {
 public:
  inline FindPathByRecordIdRequest() : FindPathByRecordIdRequest(nullptr) {};
  virtual ~FindPathByRecordIdRequest();

  FindPathByRecordIdRequest(const FindPathByRecordIdRequest& from);
  FindPathByRecordIdRequest(FindPathByRecordIdRequest&& from) noexcept
    : FindPathByRecordIdRequest() {
    *this = ::std::move(from);
  }

  inline FindPathByRecordIdRequest& operator=(const FindPathByRecordIdRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline FindPathByRecordIdRequest& operator=(FindPathByRecordIdRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FindPathByRecordIdRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FindPathByRecordIdRequest* internal_default_instance() {
    return reinterpret_cast<const FindPathByRecordIdRequest*>(
               &_FindPathByRecordIdRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(FindPathByRecordIdRequest& a, FindPathByRecordIdRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(FindPathByRecordIdRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FindPathByRecordIdRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FindPathByRecordIdRequest* New() const final {
    return CreateMaybeMessage<FindPathByRecordIdRequest>(nullptr);
  }

  FindPathByRecordIdRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FindPathByRecordIdRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FindPathByRecordIdRequest& from);
  void MergeFrom(const FindPathByRecordIdRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FindPathByRecordIdRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "szengine.FindPathByRecordIdRequest";
  }
  protected:
  explicit FindPathByRecordIdRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_szengine_2eproto);
    return ::descriptor_table_szengine_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStartDataSourceCodeFieldNumber = 1,
    kStartRecordIdFieldNumber = 2,
    kEndDataSourceCodeFieldNumber = 3,
    kEndRecordIdFieldNumber = 4,
    kAvoidRecordKeysFieldNumber = 6,
    kRequiredDataSourcesFieldNumber = 7,
    kMaxDegreesFieldNumber = 5,
    kFlagsFieldNumber = 8,
  };
  // string startDataSourceCode = 1;
  void clear_startdatasourcecode();
  const std::string& startdatasourcecode() const;
  void set_startdatasourcecode(const std::string& value);
  void set_startdatasourcecode(std::string&& value);
  void set_startdatasourcecode(const char* value);
  void set_startdatasourcecode(const char* value, size_t size);
  std::string* mutable_startdatasourcecode();
  std::string* release_startdatasourcecode();
  void set_allocated_startdatasourcecode(std::string* startdatasourcecode);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_startdatasourcecode();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_startdatasourcecode(
      std::string* startdatasourcecode);
  private:
  const std::string& _internal_startdatasourcecode() const;
  void _internal_set_startdatasourcecode(const std::string& value);
  std::string* _internal_mutable_startdatasourcecode();
  public:

  // string startRecordId = 2;
  void clear_startrecordid();
  const std::string& startrecordid() const;
  void set_startrecordid(const std::string& value);
  void set_startrecordid(std::string&& value);
  void set_startrecordid(const char* value);
  void set_startrecordid(const char* value, size_t size);
  std::string* mutable_startrecordid();
  std::string* release_startrecordid();
  void set_allocated_startrecordid(std::string* startrecordid);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_startrecordid();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_startrecordid(
      std::string* startrecordid);
  private:
  const std::string& _internal_startrecordid() const;
  void _internal_set_startrecordid(const std::string& value);
  std::string* _internal_mutable_startrecordid();
  public:

  // string endDataSourceCode = 3;
  void clear_enddatasourcecode();
  const std::string& enddatasourcecode() const;
  void set_enddatasourcecode(const std::string& value);
  void set_enddatasourcecode(std::string&& value);
  void set_enddatasourcecode(const char* value);
  void set_enddatasourcecode(const char* value, size_t size);
  std::string* mutable_enddatasourcecode();
  std::string* release_enddatasourcecode();
  void set_allocated_enddatasourcecode(std::string* enddatasourcecode);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_enddatasourcecode();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_enddatasourcecode(
      std::string* enddatasourcecode);
  private:
  const std::string& _internal_enddatasourcecode() const;
  void _internal_set_enddatasourcecode(const std::string& value);
  std::string* _internal_mutable_enddatasourcecode();
  public:

  // string endRecordId = 4;
  void clear_endrecordid();
  const std::string& endrecordid() const;
  void set_endrecordid(const std::string& value);
  void set_endrecordid(std::string&& value);
  void set_endrecordid(const char* value);
  void set_endrecordid(const char* value, size_t size);
  std::string* mutable_endrecordid();
  std::string* release_endrecordid();
  void set_allocated_endrecordid(std::string* endrecordid);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_endrecordid();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_endrecordid(
      std::string* endrecordid);
  private:
  const std::string& _internal_endrecordid() const;
  void _internal_set_endrecordid(const std::string& value);
  std::string* _internal_mutable_endrecordid();
  public:

  // string avoidRecordKeys = 6;
  void clear_avoidrecordkeys();
  const std::string& avoidrecordkeys() const;
  void set_avoidrecordkeys(const std::string& value);
  void set_avoidrecordkeys(std::string&& value);
  void set_avoidrecordkeys(const char* value);
  void set_avoidrecordkeys(const char* value, size_t size);
  std::string* mutable_avoidrecordkeys();
  std::string* release_avoidrecordkeys();
  void set_allocated_avoidrecordkeys(std::string* avoidrecordkeys);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_avoidrecordkeys();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_avoidrecordkeys(
      std::string* avoidrecordkeys);
  private:
  const std::string& _internal_avoidrecordkeys() const;
  void _internal_set_avoidrecordkeys(const std::string& value);
  std::string* _internal_mutable_avoidrecordkeys();
  public:

  // string requiredDataSources = 7;
  void clear_requireddatasources();
  const std::string& requireddatasources() const;
  void set_requireddatasources(const std::string& value);
  void set_requireddatasources(std::string&& value);
  void set_requireddatasources(const char* value);
  void set_requireddatasources(const char* value, size_t size);
  std::string* mutable_requireddatasources();
  std::string* release_requireddatasources();
  void set_allocated_requireddatasources(std::string* requireddatasources);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_requireddatasources();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_requireddatasources(
      std::string* requireddatasources);
  private:
  const std::string& _internal_requireddatasources() const;
  void _internal_set_requireddatasources(const std::string& value);
  std::string* _internal_mutable_requireddatasources();
  public:

  // int64 maxDegrees = 5;
  void clear_maxdegrees();
  ::PROTOBUF_NAMESPACE_ID::int64 maxdegrees() const;
  void set_maxdegrees(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_maxdegrees() const;
  void _internal_set_maxdegrees(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 flags = 8;
  void clear_flags();
  ::PROTOBUF_NAMESPACE_ID::int64 flags() const;
  void set_flags(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_flags() const;
  void _internal_set_flags(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:szengine.FindPathByRecordIdRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr startdatasourcecode_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr startrecordid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr enddatasourcecode_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr endrecordid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr avoidrecordkeys_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr requireddatasources_;
  ::PROTOBUF_NAMESPACE_ID::int64 maxdegrees_;
  ::PROTOBUF_NAMESPACE_ID::int64 flags_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_szengine_2eproto;
};
// -------------------------------------------------------------------

class FindPathByRecordIdResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:szengine.FindPathByRecordIdResponse) */ {
 public:
  inline FindPathByRecordIdResponse() : FindPathByRecordIdResponse(nullptr) {};
  virtual ~FindPathByRecordIdResponse();

  FindPathByRecordIdResponse(const FindPathByRecordIdResponse& from);
  FindPathByRecordIdResponse(FindPathByRecordIdResponse&& from) noexcept
    : FindPathByRecordIdResponse() {
    *this = ::std::move(from);
  }

  inline FindPathByRecordIdResponse& operator=(const FindPathByRecordIdResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline FindPathByRecordIdResponse& operator=(FindPathByRecordIdResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FindPathByRecordIdResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FindPathByRecordIdResponse* internal_default_instance() {
    return reinterpret_cast<const FindPathByRecordIdResponse*>(
               &_FindPathByRecordIdResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(FindPathByRecordIdResponse& a, FindPathByRecordIdResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(FindPathByRecordIdResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FindPathByRecordIdResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FindPathByRecordIdResponse* New() const final {
    return CreateMaybeMessage<FindPathByRecordIdResponse>(nullptr);
  }

  FindPathByRecordIdResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FindPathByRecordIdResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FindPathByRecordIdResponse& from);
  void MergeFrom(const FindPathByRecordIdResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FindPathByRecordIdResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "szengine.FindPathByRecordIdResponse";
  }
  protected:
  explicit FindPathByRecordIdResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_szengine_2eproto);
    return ::descriptor_table_szengine_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
  };
  // string result = 1;
  void clear_result();
  const std::string& result() const;
  void set_result(const std::string& value);
  void set_result(std::string&& value);
  void set_result(const char* value);
  void set_result(const char* value, size_t size);
  std::string* mutable_result();
  std::string* release_result();
  void set_allocated_result(std::string* result);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_result();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_result(
      std::string* result);
  private:
  const std::string& _internal_result() const;
  void _internal_set_result(const std::string& value);
  std::string* _internal_mutable_result();
  public:

  // @@protoc_insertion_point(class_scope:szengine.FindPathByRecordIdResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_szengine_2eproto;
};
// -------------------------------------------------------------------

class GetActiveConfigIdRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:szengine.GetActiveConfigIdRequest) */ {
 public:
  inline GetActiveConfigIdRequest() : GetActiveConfigIdRequest(nullptr) {};
  virtual ~GetActiveConfigIdRequest();

  GetActiveConfigIdRequest(const GetActiveConfigIdRequest& from);
  GetActiveConfigIdRequest(GetActiveConfigIdRequest&& from) noexcept
    : GetActiveConfigIdRequest() {
    *this = ::std::move(from);
  }

  inline GetActiveConfigIdRequest& operator=(const GetActiveConfigIdRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetActiveConfigIdRequest& operator=(GetActiveConfigIdRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetActiveConfigIdRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetActiveConfigIdRequest* internal_default_instance() {
    return reinterpret_cast<const GetActiveConfigIdRequest*>(
               &_GetActiveConfigIdRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(GetActiveConfigIdRequest& a, GetActiveConfigIdRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetActiveConfigIdRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetActiveConfigIdRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetActiveConfigIdRequest* New() const final {
    return CreateMaybeMessage<GetActiveConfigIdRequest>(nullptr);
  }

  GetActiveConfigIdRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetActiveConfigIdRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetActiveConfigIdRequest& from);
  void MergeFrom(const GetActiveConfigIdRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetActiveConfigIdRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "szengine.GetActiveConfigIdRequest";
  }
  protected:
  explicit GetActiveConfigIdRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_szengine_2eproto);
    return ::descriptor_table_szengine_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:szengine.GetActiveConfigIdRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_szengine_2eproto;
};
// -------------------------------------------------------------------

class GetActiveConfigIdResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:szengine.GetActiveConfigIdResponse) */ {
 public:
  inline GetActiveConfigIdResponse() : GetActiveConfigIdResponse(nullptr) {};
  virtual ~GetActiveConfigIdResponse();

  GetActiveConfigIdResponse(const GetActiveConfigIdResponse& from);
  GetActiveConfigIdResponse(GetActiveConfigIdResponse&& from) noexcept
    : GetActiveConfigIdResponse() {
    *this = ::std::move(from);
  }

  inline GetActiveConfigIdResponse& operator=(const GetActiveConfigIdResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetActiveConfigIdResponse& operator=(GetActiveConfigIdResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetActiveConfigIdResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetActiveConfigIdResponse* internal_default_instance() {
    return reinterpret_cast<const GetActiveConfigIdResponse*>(
               &_GetActiveConfigIdResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  friend void swap(GetActiveConfigIdResponse& a, GetActiveConfigIdResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetActiveConfigIdResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetActiveConfigIdResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetActiveConfigIdResponse* New() const final {
    return CreateMaybeMessage<GetActiveConfigIdResponse>(nullptr);
  }

  GetActiveConfigIdResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetActiveConfigIdResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetActiveConfigIdResponse& from);
  void MergeFrom(const GetActiveConfigIdResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetActiveConfigIdResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "szengine.GetActiveConfigIdResponse";
  }
  protected:
  explicit GetActiveConfigIdResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_szengine_2eproto);
    return ::descriptor_table_szengine_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
  };
  // int64 result = 1;
  void clear_result();
  ::PROTOBUF_NAMESPACE_ID::int64 result() const;
  void set_result(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_result() const;
  void _internal_set_result(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:szengine.GetActiveConfigIdResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int64 result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_szengine_2eproto;
};
// -------------------------------------------------------------------

class GetEntityByEntityIdRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:szengine.GetEntityByEntityIdRequest) */ {
 public:
  inline GetEntityByEntityIdRequest() : GetEntityByEntityIdRequest(nullptr) {};
  virtual ~GetEntityByEntityIdRequest();

  GetEntityByEntityIdRequest(const GetEntityByEntityIdRequest& from);
  GetEntityByEntityIdRequest(GetEntityByEntityIdRequest&& from) noexcept
    : GetEntityByEntityIdRequest() {
    *this = ::std::move(from);
  }

  inline GetEntityByEntityIdRequest& operator=(const GetEntityByEntityIdRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetEntityByEntityIdRequest& operator=(GetEntityByEntityIdRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetEntityByEntityIdRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetEntityByEntityIdRequest* internal_default_instance() {
    return reinterpret_cast<const GetEntityByEntityIdRequest*>(
               &_GetEntityByEntityIdRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  friend void swap(GetEntityByEntityIdRequest& a, GetEntityByEntityIdRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetEntityByEntityIdRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetEntityByEntityIdRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetEntityByEntityIdRequest* New() const final {
    return CreateMaybeMessage<GetEntityByEntityIdRequest>(nullptr);
  }

  GetEntityByEntityIdRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetEntityByEntityIdRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetEntityByEntityIdRequest& from);
  void MergeFrom(const GetEntityByEntityIdRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetEntityByEntityIdRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "szengine.GetEntityByEntityIdRequest";
  }
  protected:
  explicit GetEntityByEntityIdRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_szengine_2eproto);
    return ::descriptor_table_szengine_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEntityIdFieldNumber = 1,
    kFlagsFieldNumber = 2,
  };
  // int64 entityId = 1;
  void clear_entityid();
  ::PROTOBUF_NAMESPACE_ID::int64 entityid() const;
  void set_entityid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_entityid() const;
  void _internal_set_entityid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 flags = 2;
  void clear_flags();
  ::PROTOBUF_NAMESPACE_ID::int64 flags() const;
  void set_flags(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_flags() const;
  void _internal_set_flags(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:szengine.GetEntityByEntityIdRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int64 entityid_;
  ::PROTOBUF_NAMESPACE_ID::int64 flags_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_szengine_2eproto;
};
// -------------------------------------------------------------------

class GetEntityByEntityIdResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:szengine.GetEntityByEntityIdResponse) */ {
 public:
  inline GetEntityByEntityIdResponse() : GetEntityByEntityIdResponse(nullptr) {};
  virtual ~GetEntityByEntityIdResponse();

  GetEntityByEntityIdResponse(const GetEntityByEntityIdResponse& from);
  GetEntityByEntityIdResponse(GetEntityByEntityIdResponse&& from) noexcept
    : GetEntityByEntityIdResponse() {
    *this = ::std::move(from);
  }

  inline GetEntityByEntityIdResponse& operator=(const GetEntityByEntityIdResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetEntityByEntityIdResponse& operator=(GetEntityByEntityIdResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetEntityByEntityIdResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetEntityByEntityIdResponse* internal_default_instance() {
    return reinterpret_cast<const GetEntityByEntityIdResponse*>(
               &_GetEntityByEntityIdResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  friend void swap(GetEntityByEntityIdResponse& a, GetEntityByEntityIdResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetEntityByEntityIdResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetEntityByEntityIdResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetEntityByEntityIdResponse* New() const final {
    return CreateMaybeMessage<GetEntityByEntityIdResponse>(nullptr);
  }

  GetEntityByEntityIdResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetEntityByEntityIdResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetEntityByEntityIdResponse& from);
  void MergeFrom(const GetEntityByEntityIdResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetEntityByEntityIdResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "szengine.GetEntityByEntityIdResponse";
  }
  protected:
  explicit GetEntityByEntityIdResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_szengine_2eproto);
    return ::descriptor_table_szengine_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
  };
  // string result = 1;
  void clear_result();
  const std::string& result() const;
  void set_result(const std::string& value);
  void set_result(std::string&& value);
  void set_result(const char* value);
  void set_result(const char* value, size_t size);
  std::string* mutable_result();
  std::string* release_result();
  void set_allocated_result(std::string* result);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_result();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_result(
      std::string* result);
  private:
  const std::string& _internal_result() const;
  void _internal_set_result(const std::string& value);
  std::string* _internal_mutable_result();
  public:

  // @@protoc_insertion_point(class_scope:szengine.GetEntityByEntityIdResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_szengine_2eproto;
};
// -------------------------------------------------------------------

class GetEntityByRecordIdRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:szengine.GetEntityByRecordIdRequest) */ {
 public:
  inline GetEntityByRecordIdRequest() : GetEntityByRecordIdRequest(nullptr) {};
  virtual ~GetEntityByRecordIdRequest();

  GetEntityByRecordIdRequest(const GetEntityByRecordIdRequest& from);
  GetEntityByRecordIdRequest(GetEntityByRecordIdRequest&& from) noexcept
    : GetEntityByRecordIdRequest() {
    *this = ::std::move(from);
  }

  inline GetEntityByRecordIdRequest& operator=(const GetEntityByRecordIdRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetEntityByRecordIdRequest& operator=(GetEntityByRecordIdRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetEntityByRecordIdRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetEntityByRecordIdRequest* internal_default_instance() {
    return reinterpret_cast<const GetEntityByRecordIdRequest*>(
               &_GetEntityByRecordIdRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  friend void swap(GetEntityByRecordIdRequest& a, GetEntityByRecordIdRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetEntityByRecordIdRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetEntityByRecordIdRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetEntityByRecordIdRequest* New() const final {
    return CreateMaybeMessage<GetEntityByRecordIdRequest>(nullptr);
  }

  GetEntityByRecordIdRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetEntityByRecordIdRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetEntityByRecordIdRequest& from);
  void MergeFrom(const GetEntityByRecordIdRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetEntityByRecordIdRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "szengine.GetEntityByRecordIdRequest";
  }
  protected:
  explicit GetEntityByRecordIdRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_szengine_2eproto);
    return ::descriptor_table_szengine_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataSourceCodeFieldNumber = 1,
    kRecordIdFieldNumber = 2,
    kFlagsFieldNumber = 3,
  };
  // string dataSourceCode = 1;
  void clear_datasourcecode();
  const std::string& datasourcecode() const;
  void set_datasourcecode(const std::string& value);
  void set_datasourcecode(std::string&& value);
  void set_datasourcecode(const char* value);
  void set_datasourcecode(const char* value, size_t size);
  std::string* mutable_datasourcecode();
  std::string* release_datasourcecode();
  void set_allocated_datasourcecode(std::string* datasourcecode);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_datasourcecode();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_datasourcecode(
      std::string* datasourcecode);
  private:
  const std::string& _internal_datasourcecode() const;
  void _internal_set_datasourcecode(const std::string& value);
  std::string* _internal_mutable_datasourcecode();
  public:

  // string recordId = 2;
  void clear_recordid();
  const std::string& recordid() const;
  void set_recordid(const std::string& value);
  void set_recordid(std::string&& value);
  void set_recordid(const char* value);
  void set_recordid(const char* value, size_t size);
  std::string* mutable_recordid();
  std::string* release_recordid();
  void set_allocated_recordid(std::string* recordid);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_recordid();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_recordid(
      std::string* recordid);
  private:
  const std::string& _internal_recordid() const;
  void _internal_set_recordid(const std::string& value);
  std::string* _internal_mutable_recordid();
  public:

  // int64 flags = 3;
  void clear_flags();
  ::PROTOBUF_NAMESPACE_ID::int64 flags() const;
  void set_flags(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_flags() const;
  void _internal_set_flags(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:szengine.GetEntityByRecordIdRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr datasourcecode_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr recordid_;
  ::PROTOBUF_NAMESPACE_ID::int64 flags_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_szengine_2eproto;
};
// -------------------------------------------------------------------

class GetEntityByRecordIdResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:szengine.GetEntityByRecordIdResponse) */ {
 public:
  inline GetEntityByRecordIdResponse() : GetEntityByRecordIdResponse(nullptr) {};
  virtual ~GetEntityByRecordIdResponse();

  GetEntityByRecordIdResponse(const GetEntityByRecordIdResponse& from);
  GetEntityByRecordIdResponse(GetEntityByRecordIdResponse&& from) noexcept
    : GetEntityByRecordIdResponse() {
    *this = ::std::move(from);
  }

  inline GetEntityByRecordIdResponse& operator=(const GetEntityByRecordIdResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetEntityByRecordIdResponse& operator=(GetEntityByRecordIdResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetEntityByRecordIdResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetEntityByRecordIdResponse* internal_default_instance() {
    return reinterpret_cast<const GetEntityByRecordIdResponse*>(
               &_GetEntityByRecordIdResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  friend void swap(GetEntityByRecordIdResponse& a, GetEntityByRecordIdResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetEntityByRecordIdResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetEntityByRecordIdResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetEntityByRecordIdResponse* New() const final {
    return CreateMaybeMessage<GetEntityByRecordIdResponse>(nullptr);
  }

  GetEntityByRecordIdResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetEntityByRecordIdResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetEntityByRecordIdResponse& from);
  void MergeFrom(const GetEntityByRecordIdResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetEntityByRecordIdResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "szengine.GetEntityByRecordIdResponse";
  }
  protected:
  explicit GetEntityByRecordIdResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_szengine_2eproto);
    return ::descriptor_table_szengine_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
  };
  // string result = 1;
  void clear_result();
  const std::string& result() const;
  void set_result(const std::string& value);
  void set_result(std::string&& value);
  void set_result(const char* value);
  void set_result(const char* value, size_t size);
  std::string* mutable_result();
  std::string* release_result();
  void set_allocated_result(std::string* result);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_result();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_result(
      std::string* result);
  private:
  const std::string& _internal_result() const;
  void _internal_set_result(const std::string& value);
  std::string* _internal_mutable_result();
  public:

  // @@protoc_insertion_point(class_scope:szengine.GetEntityByRecordIdResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_szengine_2eproto;
};
// -------------------------------------------------------------------

class GetRecordRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:szengine.GetRecordRequest) */ {
 public:
  inline GetRecordRequest() : GetRecordRequest(nullptr) {};
  virtual ~GetRecordRequest();

  GetRecordRequest(const GetRecordRequest& from);
  GetRecordRequest(GetRecordRequest&& from) noexcept
    : GetRecordRequest() {
    *this = ::std::move(from);
  }

  inline GetRecordRequest& operator=(const GetRecordRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetRecordRequest& operator=(GetRecordRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetRecordRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetRecordRequest* internal_default_instance() {
    return reinterpret_cast<const GetRecordRequest*>(
               &_GetRecordRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    32;

  friend void swap(GetRecordRequest& a, GetRecordRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetRecordRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetRecordRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetRecordRequest* New() const final {
    return CreateMaybeMessage<GetRecordRequest>(nullptr);
  }

  GetRecordRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetRecordRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetRecordRequest& from);
  void MergeFrom(const GetRecordRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetRecordRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "szengine.GetRecordRequest";
  }
  protected:
  explicit GetRecordRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_szengine_2eproto);
    return ::descriptor_table_szengine_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataSourceCodeFieldNumber = 1,
    kRecordIdFieldNumber = 2,
    kFlagsFieldNumber = 3,
  };
  // string dataSourceCode = 1;
  void clear_datasourcecode();
  const std::string& datasourcecode() const;
  void set_datasourcecode(const std::string& value);
  void set_datasourcecode(std::string&& value);
  void set_datasourcecode(const char* value);
  void set_datasourcecode(const char* value, size_t size);
  std::string* mutable_datasourcecode();
  std::string* release_datasourcecode();
  void set_allocated_datasourcecode(std::string* datasourcecode);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_datasourcecode();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_datasourcecode(
      std::string* datasourcecode);
  private:
  const std::string& _internal_datasourcecode() const;
  void _internal_set_datasourcecode(const std::string& value);
  std::string* _internal_mutable_datasourcecode();
  public:

  // string recordId = 2;
  void clear_recordid();
  const std::string& recordid() const;
  void set_recordid(const std::string& value);
  void set_recordid(std::string&& value);
  void set_recordid(const char* value);
  void set_recordid(const char* value, size_t size);
  std::string* mutable_recordid();
  std::string* release_recordid();
  void set_allocated_recordid(std::string* recordid);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_recordid();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_recordid(
      std::string* recordid);
  private:
  const std::string& _internal_recordid() const;
  void _internal_set_recordid(const std::string& value);
  std::string* _internal_mutable_recordid();
  public:

  // int64 flags = 3;
  void clear_flags();
  ::PROTOBUF_NAMESPACE_ID::int64 flags() const;
  void set_flags(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_flags() const;
  void _internal_set_flags(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:szengine.GetRecordRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr datasourcecode_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr recordid_;
  ::PROTOBUF_NAMESPACE_ID::int64 flags_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_szengine_2eproto;
};
// -------------------------------------------------------------------

class GetRecordResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:szengine.GetRecordResponse) */ {
 public:
  inline GetRecordResponse() : GetRecordResponse(nullptr) {};
  virtual ~GetRecordResponse();

  GetRecordResponse(const GetRecordResponse& from);
  GetRecordResponse(GetRecordResponse&& from) noexcept
    : GetRecordResponse() {
    *this = ::std::move(from);
  }

  inline GetRecordResponse& operator=(const GetRecordResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetRecordResponse& operator=(GetRecordResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetRecordResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetRecordResponse* internal_default_instance() {
    return reinterpret_cast<const GetRecordResponse*>(
               &_GetRecordResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    33;

  friend void swap(GetRecordResponse& a, GetRecordResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetRecordResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetRecordResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetRecordResponse* New() const final {
    return CreateMaybeMessage<GetRecordResponse>(nullptr);
  }

  GetRecordResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetRecordResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetRecordResponse& from);
  void MergeFrom(const GetRecordResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetRecordResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "szengine.GetRecordResponse";
  }
  protected:
  explicit GetRecordResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_szengine_2eproto);
    return ::descriptor_table_szengine_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
  };
  // string result = 1;
  void clear_result();
  const std::string& result() const;
  void set_result(const std::string& value);
  void set_result(std::string&& value);
  void set_result(const char* value);
  void set_result(const char* value, size_t size);
  std::string* mutable_result();
  std::string* release_result();
  void set_allocated_result(std::string* result);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_result();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_result(
      std::string* result);
  private:
  const std::string& _internal_result() const;
  void _internal_set_result(const std::string& value);
  std::string* _internal_mutable_result();
  public:

  // @@protoc_insertion_point(class_scope:szengine.GetRecordResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_szengine_2eproto;
};
// -------------------------------------------------------------------

class GetRedoRecordRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:szengine.GetRedoRecordRequest) */ {
 public:
  inline GetRedoRecordRequest() : GetRedoRecordRequest(nullptr) {};
  virtual ~GetRedoRecordRequest();

  GetRedoRecordRequest(const GetRedoRecordRequest& from);
  GetRedoRecordRequest(GetRedoRecordRequest&& from) noexcept
    : GetRedoRecordRequest() {
    *this = ::std::move(from);
  }

  inline GetRedoRecordRequest& operator=(const GetRedoRecordRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetRedoRecordRequest& operator=(GetRedoRecordRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetRedoRecordRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetRedoRecordRequest* internal_default_instance() {
    return reinterpret_cast<const GetRedoRecordRequest*>(
               &_GetRedoRecordRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    34;

  friend void swap(GetRedoRecordRequest& a, GetRedoRecordRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetRedoRecordRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetRedoRecordRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetRedoRecordRequest* New() const final {
    return CreateMaybeMessage<GetRedoRecordRequest>(nullptr);
  }

  GetRedoRecordRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetRedoRecordRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetRedoRecordRequest& from);
  void MergeFrom(const GetRedoRecordRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetRedoRecordRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "szengine.GetRedoRecordRequest";
  }
  protected:
  explicit GetRedoRecordRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_szengine_2eproto);
    return ::descriptor_table_szengine_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:szengine.GetRedoRecordRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_szengine_2eproto;
};
// -------------------------------------------------------------------

class GetRedoRecordResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:szengine.GetRedoRecordResponse) */ {
 public:
  inline GetRedoRecordResponse() : GetRedoRecordResponse(nullptr) {};
  virtual ~GetRedoRecordResponse();

  GetRedoRecordResponse(const GetRedoRecordResponse& from);
  GetRedoRecordResponse(GetRedoRecordResponse&& from) noexcept
    : GetRedoRecordResponse() {
    *this = ::std::move(from);
  }

  inline GetRedoRecordResponse& operator=(const GetRedoRecordResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetRedoRecordResponse& operator=(GetRedoRecordResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetRedoRecordResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetRedoRecordResponse* internal_default_instance() {
    return reinterpret_cast<const GetRedoRecordResponse*>(
               &_GetRedoRecordResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    35;

  friend void swap(GetRedoRecordResponse& a, GetRedoRecordResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetRedoRecordResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetRedoRecordResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetRedoRecordResponse* New() const final {
    return CreateMaybeMessage<GetRedoRecordResponse>(nullptr);
  }

  GetRedoRecordResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetRedoRecordResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetRedoRecordResponse& from);
  void MergeFrom(const GetRedoRecordResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetRedoRecordResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "szengine.GetRedoRecordResponse";
  }
  protected:
  explicit GetRedoRecordResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_szengine_2eproto);
    return ::descriptor_table_szengine_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
  };
  // string result = 1;
  void clear_result();
  const std::string& result() const;
  void set_result(const std::string& value);
  void set_result(std::string&& value);
  void set_result(const char* value);
  void set_result(const char* value, size_t size);
  std::string* mutable_result();
  std::string* release_result();
  void set_allocated_result(std::string* result);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_result();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_result(
      std::string* result);
  private:
  const std::string& _internal_result() const;
  void _internal_set_result(const std::string& value);
  std::string* _internal_mutable_result();
  public:

  // @@protoc_insertion_point(class_scope:szengine.GetRedoRecordResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_szengine_2eproto;
};
// -------------------------------------------------------------------

class GetStatsRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:szengine.GetStatsRequest) */ {
 public:
  inline GetStatsRequest() : GetStatsRequest(nullptr) {};
  virtual ~GetStatsRequest();

  GetStatsRequest(const GetStatsRequest& from);
  GetStatsRequest(GetStatsRequest&& from) noexcept
    : GetStatsRequest() {
    *this = ::std::move(from);
  }

  inline GetStatsRequest& operator=(const GetStatsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetStatsRequest& operator=(GetStatsRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetStatsRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetStatsRequest* internal_default_instance() {
    return reinterpret_cast<const GetStatsRequest*>(
               &_GetStatsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    36;

  friend void swap(GetStatsRequest& a, GetStatsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetStatsRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetStatsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetStatsRequest* New() const final {
    return CreateMaybeMessage<GetStatsRequest>(nullptr);
  }

  GetStatsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetStatsRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetStatsRequest& from);
  void MergeFrom(const GetStatsRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetStatsRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "szengine.GetStatsRequest";
  }
  protected:
  explicit GetStatsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_szengine_2eproto);
    return ::descriptor_table_szengine_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:szengine.GetStatsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_szengine_2eproto;
};
// -------------------------------------------------------------------

class GetStatsResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:szengine.GetStatsResponse) */ {
 public:
  inline GetStatsResponse() : GetStatsResponse(nullptr) {};
  virtual ~GetStatsResponse();

  GetStatsResponse(const GetStatsResponse& from);
  GetStatsResponse(GetStatsResponse&& from) noexcept
    : GetStatsResponse() {
    *this = ::std::move(from);
  }

  inline GetStatsResponse& operator=(const GetStatsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetStatsResponse& operator=(GetStatsResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetStatsResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetStatsResponse* internal_default_instance() {
    return reinterpret_cast<const GetStatsResponse*>(
               &_GetStatsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    37;

  friend void swap(GetStatsResponse& a, GetStatsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetStatsResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetStatsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetStatsResponse* New() const final {
    return CreateMaybeMessage<GetStatsResponse>(nullptr);
  }

  GetStatsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetStatsResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetStatsResponse& from);
  void MergeFrom(const GetStatsResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetStatsResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "szengine.GetStatsResponse";
  }
  protected:
  explicit GetStatsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_szengine_2eproto);
    return ::descriptor_table_szengine_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
  };
  // string result = 1;
  void clear_result();
  const std::string& result() const;
  void set_result(const std::string& value);
  void set_result(std::string&& value);
  void set_result(const char* value);
  void set_result(const char* value, size_t size);
  std::string* mutable_result();
  std::string* release_result();
  void set_allocated_result(std::string* result);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_result();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_result(
      std::string* result);
  private:
  const std::string& _internal_result() const;
  void _internal_set_result(const std::string& value);
  std::string* _internal_mutable_result();
  public:

  // @@protoc_insertion_point(class_scope:szengine.GetStatsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_szengine_2eproto;
};
// -------------------------------------------------------------------

class GetVirtualEntityByRecordIdRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:szengine.GetVirtualEntityByRecordIdRequest) */ {
 public:
  inline GetVirtualEntityByRecordIdRequest() : GetVirtualEntityByRecordIdRequest(nullptr) {};
  virtual ~GetVirtualEntityByRecordIdRequest();

  GetVirtualEntityByRecordIdRequest(const GetVirtualEntityByRecordIdRequest& from);
  GetVirtualEntityByRecordIdRequest(GetVirtualEntityByRecordIdRequest&& from) noexcept
    : GetVirtualEntityByRecordIdRequest() {
    *this = ::std::move(from);
  }

  inline GetVirtualEntityByRecordIdRequest& operator=(const GetVirtualEntityByRecordIdRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetVirtualEntityByRecordIdRequest& operator=(GetVirtualEntityByRecordIdRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetVirtualEntityByRecordIdRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetVirtualEntityByRecordIdRequest* internal_default_instance() {
    return reinterpret_cast<const GetVirtualEntityByRecordIdRequest*>(
               &_GetVirtualEntityByRecordIdRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    38;

  friend void swap(GetVirtualEntityByRecordIdRequest& a, GetVirtualEntityByRecordIdRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetVirtualEntityByRecordIdRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetVirtualEntityByRecordIdRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetVirtualEntityByRecordIdRequest* New() const final {
    return CreateMaybeMessage<GetVirtualEntityByRecordIdRequest>(nullptr);
  }

  GetVirtualEntityByRecordIdRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetVirtualEntityByRecordIdRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetVirtualEntityByRecordIdRequest& from);
  void MergeFrom(const GetVirtualEntityByRecordIdRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetVirtualEntityByRecordIdRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "szengine.GetVirtualEntityByRecordIdRequest";
  }
  protected:
  explicit GetVirtualEntityByRecordIdRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_szengine_2eproto);
    return ::descriptor_table_szengine_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRecordKeysFieldNumber = 1,
    kFlagsFieldNumber = 2,
  };
  // string recordKeys = 1;
  void clear_recordkeys();
  const std::string& recordkeys() const;
  void set_recordkeys(const std::string& value);
  void set_recordkeys(std::string&& value);
  void set_recordkeys(const char* value);
  void set_recordkeys(const char* value, size_t size);
  std::string* mutable_recordkeys();
  std::string* release_recordkeys();
  void set_allocated_recordkeys(std::string* recordkeys);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_recordkeys();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_recordkeys(
      std::string* recordkeys);
  private:
  const std::string& _internal_recordkeys() const;
  void _internal_set_recordkeys(const std::string& value);
  std::string* _internal_mutable_recordkeys();
  public:

  // int64 flags = 2;
  void clear_flags();
  ::PROTOBUF_NAMESPACE_ID::int64 flags() const;
  void set_flags(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_flags() const;
  void _internal_set_flags(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:szengine.GetVirtualEntityByRecordIdRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr recordkeys_;
  ::PROTOBUF_NAMESPACE_ID::int64 flags_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_szengine_2eproto;
};
// -------------------------------------------------------------------

class GetVirtualEntityByRecordIdResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:szengine.GetVirtualEntityByRecordIdResponse) */ {
 public:
  inline GetVirtualEntityByRecordIdResponse() : GetVirtualEntityByRecordIdResponse(nullptr) {};
  virtual ~GetVirtualEntityByRecordIdResponse();

  GetVirtualEntityByRecordIdResponse(const GetVirtualEntityByRecordIdResponse& from);
  GetVirtualEntityByRecordIdResponse(GetVirtualEntityByRecordIdResponse&& from) noexcept
    : GetVirtualEntityByRecordIdResponse() {
    *this = ::std::move(from);
  }

  inline GetVirtualEntityByRecordIdResponse& operator=(const GetVirtualEntityByRecordIdResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetVirtualEntityByRecordIdResponse& operator=(GetVirtualEntityByRecordIdResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetVirtualEntityByRecordIdResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetVirtualEntityByRecordIdResponse* internal_default_instance() {
    return reinterpret_cast<const GetVirtualEntityByRecordIdResponse*>(
               &_GetVirtualEntityByRecordIdResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    39;

  friend void swap(GetVirtualEntityByRecordIdResponse& a, GetVirtualEntityByRecordIdResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetVirtualEntityByRecordIdResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetVirtualEntityByRecordIdResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetVirtualEntityByRecordIdResponse* New() const final {
    return CreateMaybeMessage<GetVirtualEntityByRecordIdResponse>(nullptr);
  }

  GetVirtualEntityByRecordIdResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetVirtualEntityByRecordIdResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetVirtualEntityByRecordIdResponse& from);
  void MergeFrom(const GetVirtualEntityByRecordIdResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetVirtualEntityByRecordIdResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "szengine.GetVirtualEntityByRecordIdResponse";
  }
  protected:
  explicit GetVirtualEntityByRecordIdResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_szengine_2eproto);
    return ::descriptor_table_szengine_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
  };
  // string result = 1;
  void clear_result();
  const std::string& result() const;
  void set_result(const std::string& value);
  void set_result(std::string&& value);
  void set_result(const char* value);
  void set_result(const char* value, size_t size);
  std::string* mutable_result();
  std::string* release_result();
  void set_allocated_result(std::string* result);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_result();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_result(
      std::string* result);
  private:
  const std::string& _internal_result() const;
  void _internal_set_result(const std::string& value);
  std::string* _internal_mutable_result();
  public:

  // @@protoc_insertion_point(class_scope:szengine.GetVirtualEntityByRecordIdResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_szengine_2eproto;
};
// -------------------------------------------------------------------

class HowEntityByEntityIdRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:szengine.HowEntityByEntityIdRequest) */ {
 public:
  inline HowEntityByEntityIdRequest() : HowEntityByEntityIdRequest(nullptr) {};
  virtual ~HowEntityByEntityIdRequest();

  HowEntityByEntityIdRequest(const HowEntityByEntityIdRequest& from);
  HowEntityByEntityIdRequest(HowEntityByEntityIdRequest&& from) noexcept
    : HowEntityByEntityIdRequest() {
    *this = ::std::move(from);
  }

  inline HowEntityByEntityIdRequest& operator=(const HowEntityByEntityIdRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline HowEntityByEntityIdRequest& operator=(HowEntityByEntityIdRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const HowEntityByEntityIdRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HowEntityByEntityIdRequest* internal_default_instance() {
    return reinterpret_cast<const HowEntityByEntityIdRequest*>(
               &_HowEntityByEntityIdRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    40;

  friend void swap(HowEntityByEntityIdRequest& a, HowEntityByEntityIdRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(HowEntityByEntityIdRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HowEntityByEntityIdRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline HowEntityByEntityIdRequest* New() const final {
    return CreateMaybeMessage<HowEntityByEntityIdRequest>(nullptr);
  }

  HowEntityByEntityIdRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<HowEntityByEntityIdRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const HowEntityByEntityIdRequest& from);
  void MergeFrom(const HowEntityByEntityIdRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HowEntityByEntityIdRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "szengine.HowEntityByEntityIdRequest";
  }
  protected:
  explicit HowEntityByEntityIdRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_szengine_2eproto);
    return ::descriptor_table_szengine_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEntityIdFieldNumber = 1,
    kFlagsFieldNumber = 2,
  };
  // int64 entityId = 1;
  void clear_entityid();
  ::PROTOBUF_NAMESPACE_ID::int64 entityid() const;
  void set_entityid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_entityid() const;
  void _internal_set_entityid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 flags = 2;
  void clear_flags();
  ::PROTOBUF_NAMESPACE_ID::int64 flags() const;
  void set_flags(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_flags() const;
  void _internal_set_flags(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:szengine.HowEntityByEntityIdRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int64 entityid_;
  ::PROTOBUF_NAMESPACE_ID::int64 flags_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_szengine_2eproto;
};
// -------------------------------------------------------------------

class HowEntityByEntityIdResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:szengine.HowEntityByEntityIdResponse) */ {
 public:
  inline HowEntityByEntityIdResponse() : HowEntityByEntityIdResponse(nullptr) {};
  virtual ~HowEntityByEntityIdResponse();

  HowEntityByEntityIdResponse(const HowEntityByEntityIdResponse& from);
  HowEntityByEntityIdResponse(HowEntityByEntityIdResponse&& from) noexcept
    : HowEntityByEntityIdResponse() {
    *this = ::std::move(from);
  }

  inline HowEntityByEntityIdResponse& operator=(const HowEntityByEntityIdResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline HowEntityByEntityIdResponse& operator=(HowEntityByEntityIdResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const HowEntityByEntityIdResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HowEntityByEntityIdResponse* internal_default_instance() {
    return reinterpret_cast<const HowEntityByEntityIdResponse*>(
               &_HowEntityByEntityIdResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    41;

  friend void swap(HowEntityByEntityIdResponse& a, HowEntityByEntityIdResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(HowEntityByEntityIdResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HowEntityByEntityIdResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline HowEntityByEntityIdResponse* New() const final {
    return CreateMaybeMessage<HowEntityByEntityIdResponse>(nullptr);
  }

  HowEntityByEntityIdResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<HowEntityByEntityIdResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const HowEntityByEntityIdResponse& from);
  void MergeFrom(const HowEntityByEntityIdResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HowEntityByEntityIdResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "szengine.HowEntityByEntityIdResponse";
  }
  protected:
  explicit HowEntityByEntityIdResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_szengine_2eproto);
    return ::descriptor_table_szengine_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
  };
  // string result = 1;
  void clear_result();
  const std::string& result() const;
  void set_result(const std::string& value);
  void set_result(std::string&& value);
  void set_result(const char* value);
  void set_result(const char* value, size_t size);
  std::string* mutable_result();
  std::string* release_result();
  void set_allocated_result(std::string* result);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_result();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_result(
      std::string* result);
  private:
  const std::string& _internal_result() const;
  void _internal_set_result(const std::string& value);
  std::string* _internal_mutable_result();
  public:

  // @@protoc_insertion_point(class_scope:szengine.HowEntityByEntityIdResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_szengine_2eproto;
};
// -------------------------------------------------------------------

class PreprocessRecordRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:szengine.PreprocessRecordRequest) */ {
 public:
  inline PreprocessRecordRequest() : PreprocessRecordRequest(nullptr) {};
  virtual ~PreprocessRecordRequest();

  PreprocessRecordRequest(const PreprocessRecordRequest& from);
  PreprocessRecordRequest(PreprocessRecordRequest&& from) noexcept
    : PreprocessRecordRequest() {
    *this = ::std::move(from);
  }

  inline PreprocessRecordRequest& operator=(const PreprocessRecordRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PreprocessRecordRequest& operator=(PreprocessRecordRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PreprocessRecordRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PreprocessRecordRequest* internal_default_instance() {
    return reinterpret_cast<const PreprocessRecordRequest*>(
               &_PreprocessRecordRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    42;

  friend void swap(PreprocessRecordRequest& a, PreprocessRecordRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PreprocessRecordRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PreprocessRecordRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PreprocessRecordRequest* New() const final {
    return CreateMaybeMessage<PreprocessRecordRequest>(nullptr);
  }

  PreprocessRecordRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PreprocessRecordRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PreprocessRecordRequest& from);
  void MergeFrom(const PreprocessRecordRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PreprocessRecordRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "szengine.PreprocessRecordRequest";
  }
  protected:
  explicit PreprocessRecordRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_szengine_2eproto);
    return ::descriptor_table_szengine_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRecordDefinitionFieldNumber = 1,
    kFlagsFieldNumber = 2,
  };
  // string recordDefinition = 1;
  void clear_recorddefinition();
  const std::string& recorddefinition() const;
  void set_recorddefinition(const std::string& value);
  void set_recorddefinition(std::string&& value);
  void set_recorddefinition(const char* value);
  void set_recorddefinition(const char* value, size_t size);
  std::string* mutable_recorddefinition();
  std::string* release_recorddefinition();
  void set_allocated_recorddefinition(std::string* recorddefinition);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_recorddefinition();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_recorddefinition(
      std::string* recorddefinition);
  private:
  const std::string& _internal_recorddefinition() const;
  void _internal_set_recorddefinition(const std::string& value);
  std::string* _internal_mutable_recorddefinition();
  public:

  // int64 flags = 2;
  void clear_flags();
  ::PROTOBUF_NAMESPACE_ID::int64 flags() const;
  void set_flags(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_flags() const;
  void _internal_set_flags(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:szengine.PreprocessRecordRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr recorddefinition_;
  ::PROTOBUF_NAMESPACE_ID::int64 flags_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_szengine_2eproto;
};
// -------------------------------------------------------------------

class PreprocessRecordResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:szengine.PreprocessRecordResponse) */ {
 public:
  inline PreprocessRecordResponse() : PreprocessRecordResponse(nullptr) {};
  virtual ~PreprocessRecordResponse();

  PreprocessRecordResponse(const PreprocessRecordResponse& from);
  PreprocessRecordResponse(PreprocessRecordResponse&& from) noexcept
    : PreprocessRecordResponse() {
    *this = ::std::move(from);
  }

  inline PreprocessRecordResponse& operator=(const PreprocessRecordResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline PreprocessRecordResponse& operator=(PreprocessRecordResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PreprocessRecordResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PreprocessRecordResponse* internal_default_instance() {
    return reinterpret_cast<const PreprocessRecordResponse*>(
               &_PreprocessRecordResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    43;

  friend void swap(PreprocessRecordResponse& a, PreprocessRecordResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(PreprocessRecordResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PreprocessRecordResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PreprocessRecordResponse* New() const final {
    return CreateMaybeMessage<PreprocessRecordResponse>(nullptr);
  }

  PreprocessRecordResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PreprocessRecordResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PreprocessRecordResponse& from);
  void MergeFrom(const PreprocessRecordResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PreprocessRecordResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "szengine.PreprocessRecordResponse";
  }
  protected:
  explicit PreprocessRecordResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_szengine_2eproto);
    return ::descriptor_table_szengine_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
  };
  // string result = 1;
  void clear_result();
  const std::string& result() const;
  void set_result(const std::string& value);
  void set_result(std::string&& value);
  void set_result(const char* value);
  void set_result(const char* value, size_t size);
  std::string* mutable_result();
  std::string* release_result();
  void set_allocated_result(std::string* result);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_result();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_result(
      std::string* result);
  private:
  const std::string& _internal_result() const;
  void _internal_set_result(const std::string& value);
  std::string* _internal_mutable_result();
  public:

  // @@protoc_insertion_point(class_scope:szengine.PreprocessRecordResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_szengine_2eproto;
};
// -------------------------------------------------------------------

class PrimeEngineRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:szengine.PrimeEngineRequest) */ {
 public:
  inline PrimeEngineRequest() : PrimeEngineRequest(nullptr) {};
  virtual ~PrimeEngineRequest();

  PrimeEngineRequest(const PrimeEngineRequest& from);
  PrimeEngineRequest(PrimeEngineRequest&& from) noexcept
    : PrimeEngineRequest() {
    *this = ::std::move(from);
  }

  inline PrimeEngineRequest& operator=(const PrimeEngineRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PrimeEngineRequest& operator=(PrimeEngineRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PrimeEngineRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PrimeEngineRequest* internal_default_instance() {
    return reinterpret_cast<const PrimeEngineRequest*>(
               &_PrimeEngineRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    44;

  friend void swap(PrimeEngineRequest& a, PrimeEngineRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PrimeEngineRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PrimeEngineRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PrimeEngineRequest* New() const final {
    return CreateMaybeMessage<PrimeEngineRequest>(nullptr);
  }

  PrimeEngineRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PrimeEngineRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PrimeEngineRequest& from);
  void MergeFrom(const PrimeEngineRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PrimeEngineRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "szengine.PrimeEngineRequest";
  }
  protected:
  explicit PrimeEngineRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_szengine_2eproto);
    return ::descriptor_table_szengine_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:szengine.PrimeEngineRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_szengine_2eproto;
};
// -------------------------------------------------------------------

class PrimeEngineResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:szengine.PrimeEngineResponse) */ {
 public:
  inline PrimeEngineResponse() : PrimeEngineResponse(nullptr) {};
  virtual ~PrimeEngineResponse();

  PrimeEngineResponse(const PrimeEngineResponse& from);
  PrimeEngineResponse(PrimeEngineResponse&& from) noexcept
    : PrimeEngineResponse() {
    *this = ::std::move(from);
  }

  inline PrimeEngineResponse& operator=(const PrimeEngineResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline PrimeEngineResponse& operator=(PrimeEngineResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PrimeEngineResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PrimeEngineResponse* internal_default_instance() {
    return reinterpret_cast<const PrimeEngineResponse*>(
               &_PrimeEngineResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    45;

  friend void swap(PrimeEngineResponse& a, PrimeEngineResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(PrimeEngineResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PrimeEngineResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PrimeEngineResponse* New() const final {
    return CreateMaybeMessage<PrimeEngineResponse>(nullptr);
  }

  PrimeEngineResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PrimeEngineResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PrimeEngineResponse& from);
  void MergeFrom(const PrimeEngineResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PrimeEngineResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "szengine.PrimeEngineResponse";
  }
  protected:
  explicit PrimeEngineResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_szengine_2eproto);
    return ::descriptor_table_szengine_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:szengine.PrimeEngineResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_szengine_2eproto;
};
// -------------------------------------------------------------------

class ProcessRedoRecordRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:szengine.ProcessRedoRecordRequest) */ {
 public:
  inline ProcessRedoRecordRequest() : ProcessRedoRecordRequest(nullptr) {};
  virtual ~ProcessRedoRecordRequest();

  ProcessRedoRecordRequest(const ProcessRedoRecordRequest& from);
  ProcessRedoRecordRequest(ProcessRedoRecordRequest&& from) noexcept
    : ProcessRedoRecordRequest() {
    *this = ::std::move(from);
  }

  inline ProcessRedoRecordRequest& operator=(const ProcessRedoRecordRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProcessRedoRecordRequest& operator=(ProcessRedoRecordRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ProcessRedoRecordRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ProcessRedoRecordRequest* internal_default_instance() {
    return reinterpret_cast<const ProcessRedoRecordRequest*>(
               &_ProcessRedoRecordRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    46;

  friend void swap(ProcessRedoRecordRequest& a, ProcessRedoRecordRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ProcessRedoRecordRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProcessRedoRecordRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ProcessRedoRecordRequest* New() const final {
    return CreateMaybeMessage<ProcessRedoRecordRequest>(nullptr);
  }

  ProcessRedoRecordRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ProcessRedoRecordRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ProcessRedoRecordRequest& from);
  void MergeFrom(const ProcessRedoRecordRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProcessRedoRecordRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "szengine.ProcessRedoRecordRequest";
  }
  protected:
  explicit ProcessRedoRecordRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_szengine_2eproto);
    return ::descriptor_table_szengine_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRedoRecordFieldNumber = 1,
    kFlagsFieldNumber = 2,
  };
  // string redoRecord = 1;
  void clear_redorecord();
  const std::string& redorecord() const;
  void set_redorecord(const std::string& value);
  void set_redorecord(std::string&& value);
  void set_redorecord(const char* value);
  void set_redorecord(const char* value, size_t size);
  std::string* mutable_redorecord();
  std::string* release_redorecord();
  void set_allocated_redorecord(std::string* redorecord);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_redorecord();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_redorecord(
      std::string* redorecord);
  private:
  const std::string& _internal_redorecord() const;
  void _internal_set_redorecord(const std::string& value);
  std::string* _internal_mutable_redorecord();
  public:

  // int64 flags = 2;
  void clear_flags();
  ::PROTOBUF_NAMESPACE_ID::int64 flags() const;
  void set_flags(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_flags() const;
  void _internal_set_flags(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:szengine.ProcessRedoRecordRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr redorecord_;
  ::PROTOBUF_NAMESPACE_ID::int64 flags_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_szengine_2eproto;
};
// -------------------------------------------------------------------

class ProcessRedoRecordResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:szengine.ProcessRedoRecordResponse) */ {
 public:
  inline ProcessRedoRecordResponse() : ProcessRedoRecordResponse(nullptr) {};
  virtual ~ProcessRedoRecordResponse();

  ProcessRedoRecordResponse(const ProcessRedoRecordResponse& from);
  ProcessRedoRecordResponse(ProcessRedoRecordResponse&& from) noexcept
    : ProcessRedoRecordResponse() {
    *this = ::std::move(from);
  }

  inline ProcessRedoRecordResponse& operator=(const ProcessRedoRecordResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProcessRedoRecordResponse& operator=(ProcessRedoRecordResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ProcessRedoRecordResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ProcessRedoRecordResponse* internal_default_instance() {
    return reinterpret_cast<const ProcessRedoRecordResponse*>(
               &_ProcessRedoRecordResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    47;

  friend void swap(ProcessRedoRecordResponse& a, ProcessRedoRecordResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ProcessRedoRecordResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProcessRedoRecordResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ProcessRedoRecordResponse* New() const final {
    return CreateMaybeMessage<ProcessRedoRecordResponse>(nullptr);
  }

  ProcessRedoRecordResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ProcessRedoRecordResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ProcessRedoRecordResponse& from);
  void MergeFrom(const ProcessRedoRecordResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProcessRedoRecordResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "szengine.ProcessRedoRecordResponse";
  }
  protected:
  explicit ProcessRedoRecordResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_szengine_2eproto);
    return ::descriptor_table_szengine_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
  };
  // string result = 1;
  void clear_result();
  const std::string& result() const;
  void set_result(const std::string& value);
  void set_result(std::string&& value);
  void set_result(const char* value);
  void set_result(const char* value, size_t size);
  std::string* mutable_result();
  std::string* release_result();
  void set_allocated_result(std::string* result);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_result();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_result(
      std::string* result);
  private:
  const std::string& _internal_result() const;
  void _internal_set_result(const std::string& value);
  std::string* _internal_mutable_result();
  public:

  // @@protoc_insertion_point(class_scope:szengine.ProcessRedoRecordResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_szengine_2eproto;
};
// -------------------------------------------------------------------

class ReevaluateEntityRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:szengine.ReevaluateEntityRequest) */ {
 public:
  inline ReevaluateEntityRequest() : ReevaluateEntityRequest(nullptr) {};
  virtual ~ReevaluateEntityRequest();

  ReevaluateEntityRequest(const ReevaluateEntityRequest& from);
  ReevaluateEntityRequest(ReevaluateEntityRequest&& from) noexcept
    : ReevaluateEntityRequest() {
    *this = ::std::move(from);
  }

  inline ReevaluateEntityRequest& operator=(const ReevaluateEntityRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReevaluateEntityRequest& operator=(ReevaluateEntityRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ReevaluateEntityRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReevaluateEntityRequest* internal_default_instance() {
    return reinterpret_cast<const ReevaluateEntityRequest*>(
               &_ReevaluateEntityRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    48;

  friend void swap(ReevaluateEntityRequest& a, ReevaluateEntityRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ReevaluateEntityRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReevaluateEntityRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReevaluateEntityRequest* New() const final {
    return CreateMaybeMessage<ReevaluateEntityRequest>(nullptr);
  }

  ReevaluateEntityRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReevaluateEntityRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReevaluateEntityRequest& from);
  void MergeFrom(const ReevaluateEntityRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReevaluateEntityRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "szengine.ReevaluateEntityRequest";
  }
  protected:
  explicit ReevaluateEntityRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_szengine_2eproto);
    return ::descriptor_table_szengine_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEntityIdFieldNumber = 1,
    kFlagsFieldNumber = 2,
  };
  // int64 entityId = 1;
  void clear_entityid();
  ::PROTOBUF_NAMESPACE_ID::int64 entityid() const;
  void set_entityid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_entityid() const;
  void _internal_set_entityid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 flags = 2;
  void clear_flags();
  ::PROTOBUF_NAMESPACE_ID::int64 flags() const;
  void set_flags(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_flags() const;
  void _internal_set_flags(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:szengine.ReevaluateEntityRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int64 entityid_;
  ::PROTOBUF_NAMESPACE_ID::int64 flags_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_szengine_2eproto;
};
// -------------------------------------------------------------------

class ReevaluateEntityResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:szengine.ReevaluateEntityResponse) */ {
 public:
  inline ReevaluateEntityResponse() : ReevaluateEntityResponse(nullptr) {};
  virtual ~ReevaluateEntityResponse();

  ReevaluateEntityResponse(const ReevaluateEntityResponse& from);
  ReevaluateEntityResponse(ReevaluateEntityResponse&& from) noexcept
    : ReevaluateEntityResponse() {
    *this = ::std::move(from);
  }

  inline ReevaluateEntityResponse& operator=(const ReevaluateEntityResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReevaluateEntityResponse& operator=(ReevaluateEntityResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ReevaluateEntityResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReevaluateEntityResponse* internal_default_instance() {
    return reinterpret_cast<const ReevaluateEntityResponse*>(
               &_ReevaluateEntityResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    49;

  friend void swap(ReevaluateEntityResponse& a, ReevaluateEntityResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ReevaluateEntityResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReevaluateEntityResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReevaluateEntityResponse* New() const final {
    return CreateMaybeMessage<ReevaluateEntityResponse>(nullptr);
  }

  ReevaluateEntityResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReevaluateEntityResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReevaluateEntityResponse& from);
  void MergeFrom(const ReevaluateEntityResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReevaluateEntityResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "szengine.ReevaluateEntityResponse";
  }
  protected:
  explicit ReevaluateEntityResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_szengine_2eproto);
    return ::descriptor_table_szengine_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
  };
  // string result = 1;
  void clear_result();
  const std::string& result() const;
  void set_result(const std::string& value);
  void set_result(std::string&& value);
  void set_result(const char* value);
  void set_result(const char* value, size_t size);
  std::string* mutable_result();
  std::string* release_result();
  void set_allocated_result(std::string* result);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_result();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_result(
      std::string* result);
  private:
  const std::string& _internal_result() const;
  void _internal_set_result(const std::string& value);
  std::string* _internal_mutable_result();
  public:

  // @@protoc_insertion_point(class_scope:szengine.ReevaluateEntityResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_szengine_2eproto;
};
// -------------------------------------------------------------------

class ReevaluateRecordRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:szengine.ReevaluateRecordRequest) */ {
 public:
  inline ReevaluateRecordRequest() : ReevaluateRecordRequest(nullptr) {};
  virtual ~ReevaluateRecordRequest();

  ReevaluateRecordRequest(const ReevaluateRecordRequest& from);
  ReevaluateRecordRequest(ReevaluateRecordRequest&& from) noexcept
    : ReevaluateRecordRequest() {
    *this = ::std::move(from);
  }

  inline ReevaluateRecordRequest& operator=(const ReevaluateRecordRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReevaluateRecordRequest& operator=(ReevaluateRecordRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ReevaluateRecordRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReevaluateRecordRequest* internal_default_instance() {
    return reinterpret_cast<const ReevaluateRecordRequest*>(
               &_ReevaluateRecordRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    50;

  friend void swap(ReevaluateRecordRequest& a, ReevaluateRecordRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ReevaluateRecordRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReevaluateRecordRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReevaluateRecordRequest* New() const final {
    return CreateMaybeMessage<ReevaluateRecordRequest>(nullptr);
  }

  ReevaluateRecordRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReevaluateRecordRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReevaluateRecordRequest& from);
  void MergeFrom(const ReevaluateRecordRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReevaluateRecordRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "szengine.ReevaluateRecordRequest";
  }
  protected:
  explicit ReevaluateRecordRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_szengine_2eproto);
    return ::descriptor_table_szengine_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataSourceCodeFieldNumber = 1,
    kRecordIdFieldNumber = 2,
    kFlagsFieldNumber = 3,
  };
  // string dataSourceCode = 1;
  void clear_datasourcecode();
  const std::string& datasourcecode() const;
  void set_datasourcecode(const std::string& value);
  void set_datasourcecode(std::string&& value);
  void set_datasourcecode(const char* value);
  void set_datasourcecode(const char* value, size_t size);
  std::string* mutable_datasourcecode();
  std::string* release_datasourcecode();
  void set_allocated_datasourcecode(std::string* datasourcecode);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_datasourcecode();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_datasourcecode(
      std::string* datasourcecode);
  private:
  const std::string& _internal_datasourcecode() const;
  void _internal_set_datasourcecode(const std::string& value);
  std::string* _internal_mutable_datasourcecode();
  public:

  // string recordId = 2;
  void clear_recordid();
  const std::string& recordid() const;
  void set_recordid(const std::string& value);
  void set_recordid(std::string&& value);
  void set_recordid(const char* value);
  void set_recordid(const char* value, size_t size);
  std::string* mutable_recordid();
  std::string* release_recordid();
  void set_allocated_recordid(std::string* recordid);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_recordid();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_recordid(
      std::string* recordid);
  private:
  const std::string& _internal_recordid() const;
  void _internal_set_recordid(const std::string& value);
  std::string* _internal_mutable_recordid();
  public:

  // int64 flags = 3;
  void clear_flags();
  ::PROTOBUF_NAMESPACE_ID::int64 flags() const;
  void set_flags(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_flags() const;
  void _internal_set_flags(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:szengine.ReevaluateRecordRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr datasourcecode_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr recordid_;
  ::PROTOBUF_NAMESPACE_ID::int64 flags_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_szengine_2eproto;
};
// -------------------------------------------------------------------

class ReevaluateRecordResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:szengine.ReevaluateRecordResponse) */ {
 public:
  inline ReevaluateRecordResponse() : ReevaluateRecordResponse(nullptr) {};
  virtual ~ReevaluateRecordResponse();

  ReevaluateRecordResponse(const ReevaluateRecordResponse& from);
  ReevaluateRecordResponse(ReevaluateRecordResponse&& from) noexcept
    : ReevaluateRecordResponse() {
    *this = ::std::move(from);
  }

  inline ReevaluateRecordResponse& operator=(const ReevaluateRecordResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReevaluateRecordResponse& operator=(ReevaluateRecordResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ReevaluateRecordResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReevaluateRecordResponse* internal_default_instance() {
    return reinterpret_cast<const ReevaluateRecordResponse*>(
               &_ReevaluateRecordResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    51;

  friend void swap(ReevaluateRecordResponse& a, ReevaluateRecordResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ReevaluateRecordResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReevaluateRecordResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReevaluateRecordResponse* New() const final {
    return CreateMaybeMessage<ReevaluateRecordResponse>(nullptr);
  }

  ReevaluateRecordResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReevaluateRecordResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReevaluateRecordResponse& from);
  void MergeFrom(const ReevaluateRecordResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReevaluateRecordResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "szengine.ReevaluateRecordResponse";
  }
  protected:
  explicit ReevaluateRecordResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_szengine_2eproto);
    return ::descriptor_table_szengine_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
  };
  // string result = 1;
  void clear_result();
  const std::string& result() const;
  void set_result(const std::string& value);
  void set_result(std::string&& value);
  void set_result(const char* value);
  void set_result(const char* value, size_t size);
  std::string* mutable_result();
  std::string* release_result();
  void set_allocated_result(std::string* result);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_result();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_result(
      std::string* result);
  private:
  const std::string& _internal_result() const;
  void _internal_set_result(const std::string& value);
  std::string* _internal_mutable_result();
  public:

  // @@protoc_insertion_point(class_scope:szengine.ReevaluateRecordResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_szengine_2eproto;
};
// -------------------------------------------------------------------

class ReinitializeRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:szengine.ReinitializeRequest) */ {
 public:
  inline ReinitializeRequest() : ReinitializeRequest(nullptr) {};
  virtual ~ReinitializeRequest();

  ReinitializeRequest(const ReinitializeRequest& from);
  ReinitializeRequest(ReinitializeRequest&& from) noexcept
    : ReinitializeRequest() {
    *this = ::std::move(from);
  }

  inline ReinitializeRequest& operator=(const ReinitializeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReinitializeRequest& operator=(ReinitializeRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ReinitializeRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReinitializeRequest* internal_default_instance() {
    return reinterpret_cast<const ReinitializeRequest*>(
               &_ReinitializeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    52;

  friend void swap(ReinitializeRequest& a, ReinitializeRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ReinitializeRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReinitializeRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReinitializeRequest* New() const final {
    return CreateMaybeMessage<ReinitializeRequest>(nullptr);
  }

  ReinitializeRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReinitializeRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReinitializeRequest& from);
  void MergeFrom(const ReinitializeRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReinitializeRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "szengine.ReinitializeRequest";
  }
  protected:
  explicit ReinitializeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_szengine_2eproto);
    return ::descriptor_table_szengine_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConfigIdFieldNumber = 1,
  };
  // int64 configId = 1;
  void clear_configid();
  ::PROTOBUF_NAMESPACE_ID::int64 configid() const;
  void set_configid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_configid() const;
  void _internal_set_configid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:szengine.ReinitializeRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int64 configid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_szengine_2eproto;
};
// -------------------------------------------------------------------

class ReinitializeResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:szengine.ReinitializeResponse) */ {
 public:
  inline ReinitializeResponse() : ReinitializeResponse(nullptr) {};
  virtual ~ReinitializeResponse();

  ReinitializeResponse(const ReinitializeResponse& from);
  ReinitializeResponse(ReinitializeResponse&& from) noexcept
    : ReinitializeResponse() {
    *this = ::std::move(from);
  }

  inline ReinitializeResponse& operator=(const ReinitializeResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReinitializeResponse& operator=(ReinitializeResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ReinitializeResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReinitializeResponse* internal_default_instance() {
    return reinterpret_cast<const ReinitializeResponse*>(
               &_ReinitializeResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    53;

  friend void swap(ReinitializeResponse& a, ReinitializeResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ReinitializeResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReinitializeResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReinitializeResponse* New() const final {
    return CreateMaybeMessage<ReinitializeResponse>(nullptr);
  }

  ReinitializeResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReinitializeResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReinitializeResponse& from);
  void MergeFrom(const ReinitializeResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReinitializeResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "szengine.ReinitializeResponse";
  }
  protected:
  explicit ReinitializeResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_szengine_2eproto);
    return ::descriptor_table_szengine_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:szengine.ReinitializeResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_szengine_2eproto;
};
// -------------------------------------------------------------------

class SearchByAttributesRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:szengine.SearchByAttributesRequest) */ {
 public:
  inline SearchByAttributesRequest() : SearchByAttributesRequest(nullptr) {};
  virtual ~SearchByAttributesRequest();

  SearchByAttributesRequest(const SearchByAttributesRequest& from);
  SearchByAttributesRequest(SearchByAttributesRequest&& from) noexcept
    : SearchByAttributesRequest() {
    *this = ::std::move(from);
  }

  inline SearchByAttributesRequest& operator=(const SearchByAttributesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SearchByAttributesRequest& operator=(SearchByAttributesRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SearchByAttributesRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SearchByAttributesRequest* internal_default_instance() {
    return reinterpret_cast<const SearchByAttributesRequest*>(
               &_SearchByAttributesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    54;

  friend void swap(SearchByAttributesRequest& a, SearchByAttributesRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SearchByAttributesRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SearchByAttributesRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SearchByAttributesRequest* New() const final {
    return CreateMaybeMessage<SearchByAttributesRequest>(nullptr);
  }

  SearchByAttributesRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SearchByAttributesRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SearchByAttributesRequest& from);
  void MergeFrom(const SearchByAttributesRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SearchByAttributesRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "szengine.SearchByAttributesRequest";
  }
  protected:
  explicit SearchByAttributesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_szengine_2eproto);
    return ::descriptor_table_szengine_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAttributesFieldNumber = 1,
    kSearchProfileFieldNumber = 2,
    kFlagsFieldNumber = 3,
  };
  // string attributes = 1;
  void clear_attributes();
  const std::string& attributes() const;
  void set_attributes(const std::string& value);
  void set_attributes(std::string&& value);
  void set_attributes(const char* value);
  void set_attributes(const char* value, size_t size);
  std::string* mutable_attributes();
  std::string* release_attributes();
  void set_allocated_attributes(std::string* attributes);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_attributes();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_attributes(
      std::string* attributes);
  private:
  const std::string& _internal_attributes() const;
  void _internal_set_attributes(const std::string& value);
  std::string* _internal_mutable_attributes();
  public:

  // string searchProfile = 2;
  void clear_searchprofile();
  const std::string& searchprofile() const;
  void set_searchprofile(const std::string& value);
  void set_searchprofile(std::string&& value);
  void set_searchprofile(const char* value);
  void set_searchprofile(const char* value, size_t size);
  std::string* mutable_searchprofile();
  std::string* release_searchprofile();
  void set_allocated_searchprofile(std::string* searchprofile);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_searchprofile();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_searchprofile(
      std::string* searchprofile);
  private:
  const std::string& _internal_searchprofile() const;
  void _internal_set_searchprofile(const std::string& value);
  std::string* _internal_mutable_searchprofile();
  public:

  // int64 flags = 3;
  void clear_flags();
  ::PROTOBUF_NAMESPACE_ID::int64 flags() const;
  void set_flags(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_flags() const;
  void _internal_set_flags(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:szengine.SearchByAttributesRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr attributes_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr searchprofile_;
  ::PROTOBUF_NAMESPACE_ID::int64 flags_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_szengine_2eproto;
};
// -------------------------------------------------------------------

class SearchByAttributesResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:szengine.SearchByAttributesResponse) */ {
 public:
  inline SearchByAttributesResponse() : SearchByAttributesResponse(nullptr) {};
  virtual ~SearchByAttributesResponse();

  SearchByAttributesResponse(const SearchByAttributesResponse& from);
  SearchByAttributesResponse(SearchByAttributesResponse&& from) noexcept
    : SearchByAttributesResponse() {
    *this = ::std::move(from);
  }

  inline SearchByAttributesResponse& operator=(const SearchByAttributesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SearchByAttributesResponse& operator=(SearchByAttributesResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SearchByAttributesResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SearchByAttributesResponse* internal_default_instance() {
    return reinterpret_cast<const SearchByAttributesResponse*>(
               &_SearchByAttributesResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    55;

  friend void swap(SearchByAttributesResponse& a, SearchByAttributesResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SearchByAttributesResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SearchByAttributesResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SearchByAttributesResponse* New() const final {
    return CreateMaybeMessage<SearchByAttributesResponse>(nullptr);
  }

  SearchByAttributesResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SearchByAttributesResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SearchByAttributesResponse& from);
  void MergeFrom(const SearchByAttributesResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SearchByAttributesResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "szengine.SearchByAttributesResponse";
  }
  protected:
  explicit SearchByAttributesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_szengine_2eproto);
    return ::descriptor_table_szengine_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
  };
  // string result = 1;
  void clear_result();
  const std::string& result() const;
  void set_result(const std::string& value);
  void set_result(std::string&& value);
  void set_result(const char* value);
  void set_result(const char* value, size_t size);
  std::string* mutable_result();
  std::string* release_result();
  void set_allocated_result(std::string* result);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_result();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_result(
      std::string* result);
  private:
  const std::string& _internal_result() const;
  void _internal_set_result(const std::string& value);
  std::string* _internal_mutable_result();
  public:

  // @@protoc_insertion_point(class_scope:szengine.SearchByAttributesResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_szengine_2eproto;
};
// -------------------------------------------------------------------

class StreamExportCsvEntityReportRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:szengine.StreamExportCsvEntityReportRequest) */ {
 public:
  inline StreamExportCsvEntityReportRequest() : StreamExportCsvEntityReportRequest(nullptr) {};
  virtual ~StreamExportCsvEntityReportRequest();

  StreamExportCsvEntityReportRequest(const StreamExportCsvEntityReportRequest& from);
  StreamExportCsvEntityReportRequest(StreamExportCsvEntityReportRequest&& from) noexcept
    : StreamExportCsvEntityReportRequest() {
    *this = ::std::move(from);
  }

  inline StreamExportCsvEntityReportRequest& operator=(const StreamExportCsvEntityReportRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline StreamExportCsvEntityReportRequest& operator=(StreamExportCsvEntityReportRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StreamExportCsvEntityReportRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StreamExportCsvEntityReportRequest* internal_default_instance() {
    return reinterpret_cast<const StreamExportCsvEntityReportRequest*>(
               &_StreamExportCsvEntityReportRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    56;

  friend void swap(StreamExportCsvEntityReportRequest& a, StreamExportCsvEntityReportRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(StreamExportCsvEntityReportRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StreamExportCsvEntityReportRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StreamExportCsvEntityReportRequest* New() const final {
    return CreateMaybeMessage<StreamExportCsvEntityReportRequest>(nullptr);
  }

  StreamExportCsvEntityReportRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StreamExportCsvEntityReportRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StreamExportCsvEntityReportRequest& from);
  void MergeFrom(const StreamExportCsvEntityReportRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StreamExportCsvEntityReportRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "szengine.StreamExportCsvEntityReportRequest";
  }
  protected:
  explicit StreamExportCsvEntityReportRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_szengine_2eproto);
    return ::descriptor_table_szengine_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCsvColumnListFieldNumber = 1,
    kFlagsFieldNumber = 2,
  };
  // string csvColumnList = 1;
  void clear_csvcolumnlist();
  const std::string& csvcolumnlist() const;
  void set_csvcolumnlist(const std::string& value);
  void set_csvcolumnlist(std::string&& value);
  void set_csvcolumnlist(const char* value);
  void set_csvcolumnlist(const char* value, size_t size);
  std::string* mutable_csvcolumnlist();
  std::string* release_csvcolumnlist();
  void set_allocated_csvcolumnlist(std::string* csvcolumnlist);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_csvcolumnlist();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_csvcolumnlist(
      std::string* csvcolumnlist);
  private:
  const std::string& _internal_csvcolumnlist() const;
  void _internal_set_csvcolumnlist(const std::string& value);
  std::string* _internal_mutable_csvcolumnlist();
  public:

  // int64 flags = 2;
  void clear_flags();
  ::PROTOBUF_NAMESPACE_ID::int64 flags() const;
  void set_flags(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_flags() const;
  void _internal_set_flags(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:szengine.StreamExportCsvEntityReportRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr csvcolumnlist_;
  ::PROTOBUF_NAMESPACE_ID::int64 flags_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_szengine_2eproto;
};
// -------------------------------------------------------------------

class StreamExportCsvEntityReportResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:szengine.StreamExportCsvEntityReportResponse) */ {
 public:
  inline StreamExportCsvEntityReportResponse() : StreamExportCsvEntityReportResponse(nullptr) {};
  virtual ~StreamExportCsvEntityReportResponse();

  StreamExportCsvEntityReportResponse(const StreamExportCsvEntityReportResponse& from);
  StreamExportCsvEntityReportResponse(StreamExportCsvEntityReportResponse&& from) noexcept
    : StreamExportCsvEntityReportResponse() {
    *this = ::std::move(from);
  }

  inline StreamExportCsvEntityReportResponse& operator=(const StreamExportCsvEntityReportResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline StreamExportCsvEntityReportResponse& operator=(StreamExportCsvEntityReportResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StreamExportCsvEntityReportResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StreamExportCsvEntityReportResponse* internal_default_instance() {
    return reinterpret_cast<const StreamExportCsvEntityReportResponse*>(
               &_StreamExportCsvEntityReportResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    57;

  friend void swap(StreamExportCsvEntityReportResponse& a, StreamExportCsvEntityReportResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(StreamExportCsvEntityReportResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StreamExportCsvEntityReportResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StreamExportCsvEntityReportResponse* New() const final {
    return CreateMaybeMessage<StreamExportCsvEntityReportResponse>(nullptr);
  }

  StreamExportCsvEntityReportResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StreamExportCsvEntityReportResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StreamExportCsvEntityReportResponse& from);
  void MergeFrom(const StreamExportCsvEntityReportResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StreamExportCsvEntityReportResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "szengine.StreamExportCsvEntityReportResponse";
  }
  protected:
  explicit StreamExportCsvEntityReportResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_szengine_2eproto);
    return ::descriptor_table_szengine_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
  };
  // string result = 1;
  void clear_result();
  const std::string& result() const;
  void set_result(const std::string& value);
  void set_result(std::string&& value);
  void set_result(const char* value);
  void set_result(const char* value, size_t size);
  std::string* mutable_result();
  std::string* release_result();
  void set_allocated_result(std::string* result);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_result();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_result(
      std::string* result);
  private:
  const std::string& _internal_result() const;
  void _internal_set_result(const std::string& value);
  std::string* _internal_mutable_result();
  public:

  // @@protoc_insertion_point(class_scope:szengine.StreamExportCsvEntityReportResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_szengine_2eproto;
};
// -------------------------------------------------------------------

class StreamExportJsonEntityReportRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:szengine.StreamExportJsonEntityReportRequest) */ {
 public:
  inline StreamExportJsonEntityReportRequest() : StreamExportJsonEntityReportRequest(nullptr) {};
  virtual ~StreamExportJsonEntityReportRequest();

  StreamExportJsonEntityReportRequest(const StreamExportJsonEntityReportRequest& from);
  StreamExportJsonEntityReportRequest(StreamExportJsonEntityReportRequest&& from) noexcept
    : StreamExportJsonEntityReportRequest() {
    *this = ::std::move(from);
  }

  inline StreamExportJsonEntityReportRequest& operator=(const StreamExportJsonEntityReportRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline StreamExportJsonEntityReportRequest& operator=(StreamExportJsonEntityReportRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StreamExportJsonEntityReportRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StreamExportJsonEntityReportRequest* internal_default_instance() {
    return reinterpret_cast<const StreamExportJsonEntityReportRequest*>(
               &_StreamExportJsonEntityReportRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    58;

  friend void swap(StreamExportJsonEntityReportRequest& a, StreamExportJsonEntityReportRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(StreamExportJsonEntityReportRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StreamExportJsonEntityReportRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StreamExportJsonEntityReportRequest* New() const final {
    return CreateMaybeMessage<StreamExportJsonEntityReportRequest>(nullptr);
  }

  StreamExportJsonEntityReportRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StreamExportJsonEntityReportRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StreamExportJsonEntityReportRequest& from);
  void MergeFrom(const StreamExportJsonEntityReportRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StreamExportJsonEntityReportRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "szengine.StreamExportJsonEntityReportRequest";
  }
  protected:
  explicit StreamExportJsonEntityReportRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_szengine_2eproto);
    return ::descriptor_table_szengine_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFlagsFieldNumber = 1,
  };
  // int64 flags = 1;
  void clear_flags();
  ::PROTOBUF_NAMESPACE_ID::int64 flags() const;
  void set_flags(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_flags() const;
  void _internal_set_flags(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:szengine.StreamExportJsonEntityReportRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int64 flags_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_szengine_2eproto;
};
// -------------------------------------------------------------------

class StreamExportJsonEntityReportResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:szengine.StreamExportJsonEntityReportResponse) */ {
 public:
  inline StreamExportJsonEntityReportResponse() : StreamExportJsonEntityReportResponse(nullptr) {};
  virtual ~StreamExportJsonEntityReportResponse();

  StreamExportJsonEntityReportResponse(const StreamExportJsonEntityReportResponse& from);
  StreamExportJsonEntityReportResponse(StreamExportJsonEntityReportResponse&& from) noexcept
    : StreamExportJsonEntityReportResponse() {
    *this = ::std::move(from);
  }

  inline StreamExportJsonEntityReportResponse& operator=(const StreamExportJsonEntityReportResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline StreamExportJsonEntityReportResponse& operator=(StreamExportJsonEntityReportResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StreamExportJsonEntityReportResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StreamExportJsonEntityReportResponse* internal_default_instance() {
    return reinterpret_cast<const StreamExportJsonEntityReportResponse*>(
               &_StreamExportJsonEntityReportResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    59;

  friend void swap(StreamExportJsonEntityReportResponse& a, StreamExportJsonEntityReportResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(StreamExportJsonEntityReportResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StreamExportJsonEntityReportResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StreamExportJsonEntityReportResponse* New() const final {
    return CreateMaybeMessage<StreamExportJsonEntityReportResponse>(nullptr);
  }

  StreamExportJsonEntityReportResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StreamExportJsonEntityReportResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StreamExportJsonEntityReportResponse& from);
  void MergeFrom(const StreamExportJsonEntityReportResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StreamExportJsonEntityReportResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "szengine.StreamExportJsonEntityReportResponse";
  }
  protected:
  explicit StreamExportJsonEntityReportResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_szengine_2eproto);
    return ::descriptor_table_szengine_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
  };
  // string result = 1;
  void clear_result();
  const std::string& result() const;
  void set_result(const std::string& value);
  void set_result(std::string&& value);
  void set_result(const char* value);
  void set_result(const char* value, size_t size);
  std::string* mutable_result();
  std::string* release_result();
  void set_allocated_result(std::string* result);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_result();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_result(
      std::string* result);
  private:
  const std::string& _internal_result() const;
  void _internal_set_result(const std::string& value);
  std::string* _internal_mutable_result();
  public:

  // @@protoc_insertion_point(class_scope:szengine.StreamExportJsonEntityReportResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_szengine_2eproto;
};
// -------------------------------------------------------------------

class WhyEntitiesRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:szengine.WhyEntitiesRequest) */ {
 public:
  inline WhyEntitiesRequest() : WhyEntitiesRequest(nullptr) {};
  virtual ~WhyEntitiesRequest();

  WhyEntitiesRequest(const WhyEntitiesRequest& from);
  WhyEntitiesRequest(WhyEntitiesRequest&& from) noexcept
    : WhyEntitiesRequest() {
    *this = ::std::move(from);
  }

  inline WhyEntitiesRequest& operator=(const WhyEntitiesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline WhyEntitiesRequest& operator=(WhyEntitiesRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const WhyEntitiesRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const WhyEntitiesRequest* internal_default_instance() {
    return reinterpret_cast<const WhyEntitiesRequest*>(
               &_WhyEntitiesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    60;

  friend void swap(WhyEntitiesRequest& a, WhyEntitiesRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(WhyEntitiesRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WhyEntitiesRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline WhyEntitiesRequest* New() const final {
    return CreateMaybeMessage<WhyEntitiesRequest>(nullptr);
  }

  WhyEntitiesRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<WhyEntitiesRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const WhyEntitiesRequest& from);
  void MergeFrom(const WhyEntitiesRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WhyEntitiesRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "szengine.WhyEntitiesRequest";
  }
  protected:
  explicit WhyEntitiesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_szengine_2eproto);
    return ::descriptor_table_szengine_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEntityId1FieldNumber = 1,
    kEntityId2FieldNumber = 2,
    kFlagsFieldNumber = 3,
  };
  // int64 entityId1 = 1;
  void clear_entityid1();
  ::PROTOBUF_NAMESPACE_ID::int64 entityid1() const;
  void set_entityid1(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_entityid1() const;
  void _internal_set_entityid1(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 entityId2 = 2;
  void clear_entityid2();
  ::PROTOBUF_NAMESPACE_ID::int64 entityid2() const;
  void set_entityid2(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_entityid2() const;
  void _internal_set_entityid2(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 flags = 3;
  void clear_flags();
  ::PROTOBUF_NAMESPACE_ID::int64 flags() const;
  void set_flags(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_flags() const;
  void _internal_set_flags(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:szengine.WhyEntitiesRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int64 entityid1_;
  ::PROTOBUF_NAMESPACE_ID::int64 entityid2_;
  ::PROTOBUF_NAMESPACE_ID::int64 flags_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_szengine_2eproto;
};
// -------------------------------------------------------------------

class WhyEntitiesResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:szengine.WhyEntitiesResponse) */ {
 public:
  inline WhyEntitiesResponse() : WhyEntitiesResponse(nullptr) {};
  virtual ~WhyEntitiesResponse();

  WhyEntitiesResponse(const WhyEntitiesResponse& from);
  WhyEntitiesResponse(WhyEntitiesResponse&& from) noexcept
    : WhyEntitiesResponse() {
    *this = ::std::move(from);
  }

  inline WhyEntitiesResponse& operator=(const WhyEntitiesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline WhyEntitiesResponse& operator=(WhyEntitiesResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const WhyEntitiesResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const WhyEntitiesResponse* internal_default_instance() {
    return reinterpret_cast<const WhyEntitiesResponse*>(
               &_WhyEntitiesResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    61;

  friend void swap(WhyEntitiesResponse& a, WhyEntitiesResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(WhyEntitiesResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WhyEntitiesResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline WhyEntitiesResponse* New() const final {
    return CreateMaybeMessage<WhyEntitiesResponse>(nullptr);
  }

  WhyEntitiesResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<WhyEntitiesResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const WhyEntitiesResponse& from);
  void MergeFrom(const WhyEntitiesResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WhyEntitiesResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "szengine.WhyEntitiesResponse";
  }
  protected:
  explicit WhyEntitiesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_szengine_2eproto);
    return ::descriptor_table_szengine_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
  };
  // string result = 1;
  void clear_result();
  const std::string& result() const;
  void set_result(const std::string& value);
  void set_result(std::string&& value);
  void set_result(const char* value);
  void set_result(const char* value, size_t size);
  std::string* mutable_result();
  std::string* release_result();
  void set_allocated_result(std::string* result);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_result();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_result(
      std::string* result);
  private:
  const std::string& _internal_result() const;
  void _internal_set_result(const std::string& value);
  std::string* _internal_mutable_result();
  public:

  // @@protoc_insertion_point(class_scope:szengine.WhyEntitiesResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_szengine_2eproto;
};
// -------------------------------------------------------------------

class WhyRecordInEntityRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:szengine.WhyRecordInEntityRequest) */ {
 public:
  inline WhyRecordInEntityRequest() : WhyRecordInEntityRequest(nullptr) {};
  virtual ~WhyRecordInEntityRequest();

  WhyRecordInEntityRequest(const WhyRecordInEntityRequest& from);
  WhyRecordInEntityRequest(WhyRecordInEntityRequest&& from) noexcept
    : WhyRecordInEntityRequest() {
    *this = ::std::move(from);
  }

  inline WhyRecordInEntityRequest& operator=(const WhyRecordInEntityRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline WhyRecordInEntityRequest& operator=(WhyRecordInEntityRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const WhyRecordInEntityRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const WhyRecordInEntityRequest* internal_default_instance() {
    return reinterpret_cast<const WhyRecordInEntityRequest*>(
               &_WhyRecordInEntityRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    62;

  friend void swap(WhyRecordInEntityRequest& a, WhyRecordInEntityRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(WhyRecordInEntityRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WhyRecordInEntityRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline WhyRecordInEntityRequest* New() const final {
    return CreateMaybeMessage<WhyRecordInEntityRequest>(nullptr);
  }

  WhyRecordInEntityRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<WhyRecordInEntityRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const WhyRecordInEntityRequest& from);
  void MergeFrom(const WhyRecordInEntityRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WhyRecordInEntityRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "szengine.WhyRecordInEntityRequest";
  }
  protected:
  explicit WhyRecordInEntityRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_szengine_2eproto);
    return ::descriptor_table_szengine_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataSourceCodeFieldNumber = 1,
    kRecordIdFieldNumber = 2,
    kFlagsFieldNumber = 3,
  };
  // string dataSourceCode = 1;
  void clear_datasourcecode();
  const std::string& datasourcecode() const;
  void set_datasourcecode(const std::string& value);
  void set_datasourcecode(std::string&& value);
  void set_datasourcecode(const char* value);
  void set_datasourcecode(const char* value, size_t size);
  std::string* mutable_datasourcecode();
  std::string* release_datasourcecode();
  void set_allocated_datasourcecode(std::string* datasourcecode);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_datasourcecode();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_datasourcecode(
      std::string* datasourcecode);
  private:
  const std::string& _internal_datasourcecode() const;
  void _internal_set_datasourcecode(const std::string& value);
  std::string* _internal_mutable_datasourcecode();
  public:

  // string recordId = 2;
  void clear_recordid();
  const std::string& recordid() const;
  void set_recordid(const std::string& value);
  void set_recordid(std::string&& value);
  void set_recordid(const char* value);
  void set_recordid(const char* value, size_t size);
  std::string* mutable_recordid();
  std::string* release_recordid();
  void set_allocated_recordid(std::string* recordid);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_recordid();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_recordid(
      std::string* recordid);
  private:
  const std::string& _internal_recordid() const;
  void _internal_set_recordid(const std::string& value);
  std::string* _internal_mutable_recordid();
  public:

  // int64 flags = 3;
  void clear_flags();
  ::PROTOBUF_NAMESPACE_ID::int64 flags() const;
  void set_flags(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_flags() const;
  void _internal_set_flags(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:szengine.WhyRecordInEntityRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr datasourcecode_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr recordid_;
  ::PROTOBUF_NAMESPACE_ID::int64 flags_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_szengine_2eproto;
};
// -------------------------------------------------------------------

class WhyRecordInEntityResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:szengine.WhyRecordInEntityResponse) */ {
 public:
  inline WhyRecordInEntityResponse() : WhyRecordInEntityResponse(nullptr) {};
  virtual ~WhyRecordInEntityResponse();

  WhyRecordInEntityResponse(const WhyRecordInEntityResponse& from);
  WhyRecordInEntityResponse(WhyRecordInEntityResponse&& from) noexcept
    : WhyRecordInEntityResponse() {
    *this = ::std::move(from);
  }

  inline WhyRecordInEntityResponse& operator=(const WhyRecordInEntityResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline WhyRecordInEntityResponse& operator=(WhyRecordInEntityResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const WhyRecordInEntityResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const WhyRecordInEntityResponse* internal_default_instance() {
    return reinterpret_cast<const WhyRecordInEntityResponse*>(
               &_WhyRecordInEntityResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    63;

  friend void swap(WhyRecordInEntityResponse& a, WhyRecordInEntityResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(WhyRecordInEntityResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WhyRecordInEntityResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline WhyRecordInEntityResponse* New() const final {
    return CreateMaybeMessage<WhyRecordInEntityResponse>(nullptr);
  }

  WhyRecordInEntityResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<WhyRecordInEntityResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const WhyRecordInEntityResponse& from);
  void MergeFrom(const WhyRecordInEntityResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WhyRecordInEntityResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "szengine.WhyRecordInEntityResponse";
  }
  protected:
  explicit WhyRecordInEntityResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_szengine_2eproto);
    return ::descriptor_table_szengine_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
  };
  // string result = 1;
  void clear_result();
  const std::string& result() const;
  void set_result(const std::string& value);
  void set_result(std::string&& value);
  void set_result(const char* value);
  void set_result(const char* value, size_t size);
  std::string* mutable_result();
  std::string* release_result();
  void set_allocated_result(std::string* result);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_result();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_result(
      std::string* result);
  private:
  const std::string& _internal_result() const;
  void _internal_set_result(const std::string& value);
  std::string* _internal_mutable_result();
  public:

  // @@protoc_insertion_point(class_scope:szengine.WhyRecordInEntityResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_szengine_2eproto;
};
// -------------------------------------------------------------------

class WhyRecordsRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:szengine.WhyRecordsRequest) */ {
 public:
  inline WhyRecordsRequest() : WhyRecordsRequest(nullptr) {};
  virtual ~WhyRecordsRequest();

  WhyRecordsRequest(const WhyRecordsRequest& from);
  WhyRecordsRequest(WhyRecordsRequest&& from) noexcept
    : WhyRecordsRequest() {
    *this = ::std::move(from);
  }

  inline WhyRecordsRequest& operator=(const WhyRecordsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline WhyRecordsRequest& operator=(WhyRecordsRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const WhyRecordsRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const WhyRecordsRequest* internal_default_instance() {
    return reinterpret_cast<const WhyRecordsRequest*>(
               &_WhyRecordsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    64;

  friend void swap(WhyRecordsRequest& a, WhyRecordsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(WhyRecordsRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WhyRecordsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline WhyRecordsRequest* New() const final {
    return CreateMaybeMessage<WhyRecordsRequest>(nullptr);
  }

  WhyRecordsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<WhyRecordsRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const WhyRecordsRequest& from);
  void MergeFrom(const WhyRecordsRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WhyRecordsRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "szengine.WhyRecordsRequest";
  }
  protected:
  explicit WhyRecordsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_szengine_2eproto);
    return ::descriptor_table_szengine_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataSourceCode1FieldNumber = 1,
    kRecordId1FieldNumber = 2,
    kDataSourceCode2FieldNumber = 3,
    kRecordId2FieldNumber = 4,
    kFlagsFieldNumber = 5,
  };
  // string dataSourceCode1 = 1;
  void clear_datasourcecode1();
  const std::string& datasourcecode1() const;
  void set_datasourcecode1(const std::string& value);
  void set_datasourcecode1(std::string&& value);
  void set_datasourcecode1(const char* value);
  void set_datasourcecode1(const char* value, size_t size);
  std::string* mutable_datasourcecode1();
  std::string* release_datasourcecode1();
  void set_allocated_datasourcecode1(std::string* datasourcecode1);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_datasourcecode1();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_datasourcecode1(
      std::string* datasourcecode1);
  private:
  const std::string& _internal_datasourcecode1() const;
  void _internal_set_datasourcecode1(const std::string& value);
  std::string* _internal_mutable_datasourcecode1();
  public:

  // string recordId1 = 2;
  void clear_recordid1();
  const std::string& recordid1() const;
  void set_recordid1(const std::string& value);
  void set_recordid1(std::string&& value);
  void set_recordid1(const char* value);
  void set_recordid1(const char* value, size_t size);
  std::string* mutable_recordid1();
  std::string* release_recordid1();
  void set_allocated_recordid1(std::string* recordid1);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_recordid1();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_recordid1(
      std::string* recordid1);
  private:
  const std::string& _internal_recordid1() const;
  void _internal_set_recordid1(const std::string& value);
  std::string* _internal_mutable_recordid1();
  public:

  // string dataSourceCode2 = 3;
  void clear_datasourcecode2();
  const std::string& datasourcecode2() const;
  void set_datasourcecode2(const std::string& value);
  void set_datasourcecode2(std::string&& value);
  void set_datasourcecode2(const char* value);
  void set_datasourcecode2(const char* value, size_t size);
  std::string* mutable_datasourcecode2();
  std::string* release_datasourcecode2();
  void set_allocated_datasourcecode2(std::string* datasourcecode2);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_datasourcecode2();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_datasourcecode2(
      std::string* datasourcecode2);
  private:
  const std::string& _internal_datasourcecode2() const;
  void _internal_set_datasourcecode2(const std::string& value);
  std::string* _internal_mutable_datasourcecode2();
  public:

  // string recordId2 = 4;
  void clear_recordid2();
  const std::string& recordid2() const;
  void set_recordid2(const std::string& value);
  void set_recordid2(std::string&& value);
  void set_recordid2(const char* value);
  void set_recordid2(const char* value, size_t size);
  std::string* mutable_recordid2();
  std::string* release_recordid2();
  void set_allocated_recordid2(std::string* recordid2);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_recordid2();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_recordid2(
      std::string* recordid2);
  private:
  const std::string& _internal_recordid2() const;
  void _internal_set_recordid2(const std::string& value);
  std::string* _internal_mutable_recordid2();
  public:

  // int64 flags = 5;
  void clear_flags();
  ::PROTOBUF_NAMESPACE_ID::int64 flags() const;
  void set_flags(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_flags() const;
  void _internal_set_flags(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:szengine.WhyRecordsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr datasourcecode1_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr recordid1_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr datasourcecode2_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr recordid2_;
  ::PROTOBUF_NAMESPACE_ID::int64 flags_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_szengine_2eproto;
};
// -------------------------------------------------------------------

class WhyRecordsResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:szengine.WhyRecordsResponse) */ {
 public:
  inline WhyRecordsResponse() : WhyRecordsResponse(nullptr) {};
  virtual ~WhyRecordsResponse();

  WhyRecordsResponse(const WhyRecordsResponse& from);
  WhyRecordsResponse(WhyRecordsResponse&& from) noexcept
    : WhyRecordsResponse() {
    *this = ::std::move(from);
  }

  inline WhyRecordsResponse& operator=(const WhyRecordsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline WhyRecordsResponse& operator=(WhyRecordsResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const WhyRecordsResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const WhyRecordsResponse* internal_default_instance() {
    return reinterpret_cast<const WhyRecordsResponse*>(
               &_WhyRecordsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    65;

  friend void swap(WhyRecordsResponse& a, WhyRecordsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(WhyRecordsResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WhyRecordsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline WhyRecordsResponse* New() const final {
    return CreateMaybeMessage<WhyRecordsResponse>(nullptr);
  }

  WhyRecordsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<WhyRecordsResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const WhyRecordsResponse& from);
  void MergeFrom(const WhyRecordsResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WhyRecordsResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "szengine.WhyRecordsResponse";
  }
  protected:
  explicit WhyRecordsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_szengine_2eproto);
    return ::descriptor_table_szengine_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
  };
  // string result = 1;
  void clear_result();
  const std::string& result() const;
  void set_result(const std::string& value);
  void set_result(std::string&& value);
  void set_result(const char* value);
  void set_result(const char* value, size_t size);
  std::string* mutable_result();
  std::string* release_result();
  void set_allocated_result(std::string* result);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_result();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_result(
      std::string* result);
  private:
  const std::string& _internal_result() const;
  void _internal_set_result(const std::string& value);
  std::string* _internal_mutable_result();
  public:

  // @@protoc_insertion_point(class_scope:szengine.WhyRecordsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_szengine_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// AddRecordRequest

// string dataSourceCode = 1;
inline void AddRecordRequest::clear_datasourcecode() {
  datasourcecode_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& AddRecordRequest::datasourcecode() const {
  // @@protoc_insertion_point(field_get:szengine.AddRecordRequest.dataSourceCode)
  return _internal_datasourcecode();
}
inline void AddRecordRequest::set_datasourcecode(const std::string& value) {
  _internal_set_datasourcecode(value);
  // @@protoc_insertion_point(field_set:szengine.AddRecordRequest.dataSourceCode)
}
inline std::string* AddRecordRequest::mutable_datasourcecode() {
  // @@protoc_insertion_point(field_mutable:szengine.AddRecordRequest.dataSourceCode)
  return _internal_mutable_datasourcecode();
}
inline const std::string& AddRecordRequest::_internal_datasourcecode() const {
  return datasourcecode_.Get();
}
inline void AddRecordRequest::_internal_set_datasourcecode(const std::string& value) {
  
  datasourcecode_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void AddRecordRequest::set_datasourcecode(std::string&& value) {
  
  datasourcecode_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:szengine.AddRecordRequest.dataSourceCode)
}
inline void AddRecordRequest::set_datasourcecode(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  datasourcecode_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:szengine.AddRecordRequest.dataSourceCode)
}
inline void AddRecordRequest::set_datasourcecode(const char* value,
    size_t size) {
  
  datasourcecode_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:szengine.AddRecordRequest.dataSourceCode)
}
inline std::string* AddRecordRequest::_internal_mutable_datasourcecode() {
  
  return datasourcecode_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* AddRecordRequest::release_datasourcecode() {
  // @@protoc_insertion_point(field_release:szengine.AddRecordRequest.dataSourceCode)
  return datasourcecode_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AddRecordRequest::set_allocated_datasourcecode(std::string* datasourcecode) {
  if (datasourcecode != nullptr) {
    
  } else {
    
  }
  datasourcecode_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), datasourcecode,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:szengine.AddRecordRequest.dataSourceCode)
}
inline std::string* AddRecordRequest::unsafe_arena_release_datasourcecode() {
  // @@protoc_insertion_point(field_unsafe_arena_release:szengine.AddRecordRequest.dataSourceCode)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return datasourcecode_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void AddRecordRequest::unsafe_arena_set_allocated_datasourcecode(
    std::string* datasourcecode) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (datasourcecode != nullptr) {
    
  } else {
    
  }
  datasourcecode_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      datasourcecode, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:szengine.AddRecordRequest.dataSourceCode)
}

// string recordId = 2;
inline void AddRecordRequest::clear_recordid() {
  recordid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& AddRecordRequest::recordid() const {
  // @@protoc_insertion_point(field_get:szengine.AddRecordRequest.recordId)
  return _internal_recordid();
}
inline void AddRecordRequest::set_recordid(const std::string& value) {
  _internal_set_recordid(value);
  // @@protoc_insertion_point(field_set:szengine.AddRecordRequest.recordId)
}
inline std::string* AddRecordRequest::mutable_recordid() {
  // @@protoc_insertion_point(field_mutable:szengine.AddRecordRequest.recordId)
  return _internal_mutable_recordid();
}
inline const std::string& AddRecordRequest::_internal_recordid() const {
  return recordid_.Get();
}
inline void AddRecordRequest::_internal_set_recordid(const std::string& value) {
  
  recordid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void AddRecordRequest::set_recordid(std::string&& value) {
  
  recordid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:szengine.AddRecordRequest.recordId)
}
inline void AddRecordRequest::set_recordid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  recordid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:szengine.AddRecordRequest.recordId)
}
inline void AddRecordRequest::set_recordid(const char* value,
    size_t size) {
  
  recordid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:szengine.AddRecordRequest.recordId)
}
inline std::string* AddRecordRequest::_internal_mutable_recordid() {
  
  return recordid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* AddRecordRequest::release_recordid() {
  // @@protoc_insertion_point(field_release:szengine.AddRecordRequest.recordId)
  return recordid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AddRecordRequest::set_allocated_recordid(std::string* recordid) {
  if (recordid != nullptr) {
    
  } else {
    
  }
  recordid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), recordid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:szengine.AddRecordRequest.recordId)
}
inline std::string* AddRecordRequest::unsafe_arena_release_recordid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:szengine.AddRecordRequest.recordId)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return recordid_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void AddRecordRequest::unsafe_arena_set_allocated_recordid(
    std::string* recordid) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (recordid != nullptr) {
    
  } else {
    
  }
  recordid_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      recordid, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:szengine.AddRecordRequest.recordId)
}

// string recordDefinition = 3;
inline void AddRecordRequest::clear_recorddefinition() {
  recorddefinition_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& AddRecordRequest::recorddefinition() const {
  // @@protoc_insertion_point(field_get:szengine.AddRecordRequest.recordDefinition)
  return _internal_recorddefinition();
}
inline void AddRecordRequest::set_recorddefinition(const std::string& value) {
  _internal_set_recorddefinition(value);
  // @@protoc_insertion_point(field_set:szengine.AddRecordRequest.recordDefinition)
}
inline std::string* AddRecordRequest::mutable_recorddefinition() {
  // @@protoc_insertion_point(field_mutable:szengine.AddRecordRequest.recordDefinition)
  return _internal_mutable_recorddefinition();
}
inline const std::string& AddRecordRequest::_internal_recorddefinition() const {
  return recorddefinition_.Get();
}
inline void AddRecordRequest::_internal_set_recorddefinition(const std::string& value) {
  
  recorddefinition_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void AddRecordRequest::set_recorddefinition(std::string&& value) {
  
  recorddefinition_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:szengine.AddRecordRequest.recordDefinition)
}
inline void AddRecordRequest::set_recorddefinition(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  recorddefinition_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:szengine.AddRecordRequest.recordDefinition)
}
inline void AddRecordRequest::set_recorddefinition(const char* value,
    size_t size) {
  
  recorddefinition_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:szengine.AddRecordRequest.recordDefinition)
}
inline std::string* AddRecordRequest::_internal_mutable_recorddefinition() {
  
  return recorddefinition_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* AddRecordRequest::release_recorddefinition() {
  // @@protoc_insertion_point(field_release:szengine.AddRecordRequest.recordDefinition)
  return recorddefinition_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AddRecordRequest::set_allocated_recorddefinition(std::string* recorddefinition) {
  if (recorddefinition != nullptr) {
    
  } else {
    
  }
  recorddefinition_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), recorddefinition,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:szengine.AddRecordRequest.recordDefinition)
}
inline std::string* AddRecordRequest::unsafe_arena_release_recorddefinition() {
  // @@protoc_insertion_point(field_unsafe_arena_release:szengine.AddRecordRequest.recordDefinition)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return recorddefinition_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void AddRecordRequest::unsafe_arena_set_allocated_recorddefinition(
    std::string* recorddefinition) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (recorddefinition != nullptr) {
    
  } else {
    
  }
  recorddefinition_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      recorddefinition, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:szengine.AddRecordRequest.recordDefinition)
}

// int64 flags = 4;
inline void AddRecordRequest::clear_flags() {
  flags_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AddRecordRequest::_internal_flags() const {
  return flags_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AddRecordRequest::flags() const {
  // @@protoc_insertion_point(field_get:szengine.AddRecordRequest.flags)
  return _internal_flags();
}
inline void AddRecordRequest::_internal_set_flags(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  flags_ = value;
}
inline void AddRecordRequest::set_flags(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_flags(value);
  // @@protoc_insertion_point(field_set:szengine.AddRecordRequest.flags)
}

// -------------------------------------------------------------------

// AddRecordResponse

// string result = 1;
inline void AddRecordResponse::clear_result() {
  result_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& AddRecordResponse::result() const {
  // @@protoc_insertion_point(field_get:szengine.AddRecordResponse.result)
  return _internal_result();
}
inline void AddRecordResponse::set_result(const std::string& value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:szengine.AddRecordResponse.result)
}
inline std::string* AddRecordResponse::mutable_result() {
  // @@protoc_insertion_point(field_mutable:szengine.AddRecordResponse.result)
  return _internal_mutable_result();
}
inline const std::string& AddRecordResponse::_internal_result() const {
  return result_.Get();
}
inline void AddRecordResponse::_internal_set_result(const std::string& value) {
  
  result_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void AddRecordResponse::set_result(std::string&& value) {
  
  result_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:szengine.AddRecordResponse.result)
}
inline void AddRecordResponse::set_result(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  result_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:szengine.AddRecordResponse.result)
}
inline void AddRecordResponse::set_result(const char* value,
    size_t size) {
  
  result_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:szengine.AddRecordResponse.result)
}
inline std::string* AddRecordResponse::_internal_mutable_result() {
  
  return result_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* AddRecordResponse::release_result() {
  // @@protoc_insertion_point(field_release:szengine.AddRecordResponse.result)
  return result_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AddRecordResponse::set_allocated_result(std::string* result) {
  if (result != nullptr) {
    
  } else {
    
  }
  result_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), result,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:szengine.AddRecordResponse.result)
}
inline std::string* AddRecordResponse::unsafe_arena_release_result() {
  // @@protoc_insertion_point(field_unsafe_arena_release:szengine.AddRecordResponse.result)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return result_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void AddRecordResponse::unsafe_arena_set_allocated_result(
    std::string* result) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (result != nullptr) {
    
  } else {
    
  }
  result_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      result, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:szengine.AddRecordResponse.result)
}

// -------------------------------------------------------------------

// CloseExportRequest

// int64 exportHandle = 1;
inline void CloseExportRequest::clear_exporthandle() {
  exporthandle_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 CloseExportRequest::_internal_exporthandle() const {
  return exporthandle_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 CloseExportRequest::exporthandle() const {
  // @@protoc_insertion_point(field_get:szengine.CloseExportRequest.exportHandle)
  return _internal_exporthandle();
}
inline void CloseExportRequest::_internal_set_exporthandle(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  exporthandle_ = value;
}
inline void CloseExportRequest::set_exporthandle(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_exporthandle(value);
  // @@protoc_insertion_point(field_set:szengine.CloseExportRequest.exportHandle)
}

// -------------------------------------------------------------------

// CloseExportResponse

// -------------------------------------------------------------------

// CountRedoRecordsRequest

// -------------------------------------------------------------------

// CountRedoRecordsResponse

// int64 result = 1;
inline void CountRedoRecordsResponse::clear_result() {
  result_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 CountRedoRecordsResponse::_internal_result() const {
  return result_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 CountRedoRecordsResponse::result() const {
  // @@protoc_insertion_point(field_get:szengine.CountRedoRecordsResponse.result)
  return _internal_result();
}
inline void CountRedoRecordsResponse::_internal_set_result(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  result_ = value;
}
inline void CountRedoRecordsResponse::set_result(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:szengine.CountRedoRecordsResponse.result)
}

// -------------------------------------------------------------------

// DeleteRecordRequest

// string dataSourceCode = 1;
inline void DeleteRecordRequest::clear_datasourcecode() {
  datasourcecode_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& DeleteRecordRequest::datasourcecode() const {
  // @@protoc_insertion_point(field_get:szengine.DeleteRecordRequest.dataSourceCode)
  return _internal_datasourcecode();
}
inline void DeleteRecordRequest::set_datasourcecode(const std::string& value) {
  _internal_set_datasourcecode(value);
  // @@protoc_insertion_point(field_set:szengine.DeleteRecordRequest.dataSourceCode)
}
inline std::string* DeleteRecordRequest::mutable_datasourcecode() {
  // @@protoc_insertion_point(field_mutable:szengine.DeleteRecordRequest.dataSourceCode)
  return _internal_mutable_datasourcecode();
}
inline const std::string& DeleteRecordRequest::_internal_datasourcecode() const {
  return datasourcecode_.Get();
}
inline void DeleteRecordRequest::_internal_set_datasourcecode(const std::string& value) {
  
  datasourcecode_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DeleteRecordRequest::set_datasourcecode(std::string&& value) {
  
  datasourcecode_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:szengine.DeleteRecordRequest.dataSourceCode)
}
inline void DeleteRecordRequest::set_datasourcecode(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  datasourcecode_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:szengine.DeleteRecordRequest.dataSourceCode)
}
inline void DeleteRecordRequest::set_datasourcecode(const char* value,
    size_t size) {
  
  datasourcecode_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:szengine.DeleteRecordRequest.dataSourceCode)
}
inline std::string* DeleteRecordRequest::_internal_mutable_datasourcecode() {
  
  return datasourcecode_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DeleteRecordRequest::release_datasourcecode() {
  // @@protoc_insertion_point(field_release:szengine.DeleteRecordRequest.dataSourceCode)
  return datasourcecode_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DeleteRecordRequest::set_allocated_datasourcecode(std::string* datasourcecode) {
  if (datasourcecode != nullptr) {
    
  } else {
    
  }
  datasourcecode_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), datasourcecode,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:szengine.DeleteRecordRequest.dataSourceCode)
}
inline std::string* DeleteRecordRequest::unsafe_arena_release_datasourcecode() {
  // @@protoc_insertion_point(field_unsafe_arena_release:szengine.DeleteRecordRequest.dataSourceCode)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return datasourcecode_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void DeleteRecordRequest::unsafe_arena_set_allocated_datasourcecode(
    std::string* datasourcecode) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (datasourcecode != nullptr) {
    
  } else {
    
  }
  datasourcecode_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      datasourcecode, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:szengine.DeleteRecordRequest.dataSourceCode)
}

// string recordId = 2;
inline void DeleteRecordRequest::clear_recordid() {
  recordid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& DeleteRecordRequest::recordid() const {
  // @@protoc_insertion_point(field_get:szengine.DeleteRecordRequest.recordId)
  return _internal_recordid();
}
inline void DeleteRecordRequest::set_recordid(const std::string& value) {
  _internal_set_recordid(value);
  // @@protoc_insertion_point(field_set:szengine.DeleteRecordRequest.recordId)
}
inline std::string* DeleteRecordRequest::mutable_recordid() {
  // @@protoc_insertion_point(field_mutable:szengine.DeleteRecordRequest.recordId)
  return _internal_mutable_recordid();
}
inline const std::string& DeleteRecordRequest::_internal_recordid() const {
  return recordid_.Get();
}
inline void DeleteRecordRequest::_internal_set_recordid(const std::string& value) {
  
  recordid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DeleteRecordRequest::set_recordid(std::string&& value) {
  
  recordid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:szengine.DeleteRecordRequest.recordId)
}
inline void DeleteRecordRequest::set_recordid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  recordid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:szengine.DeleteRecordRequest.recordId)
}
inline void DeleteRecordRequest::set_recordid(const char* value,
    size_t size) {
  
  recordid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:szengine.DeleteRecordRequest.recordId)
}
inline std::string* DeleteRecordRequest::_internal_mutable_recordid() {
  
  return recordid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DeleteRecordRequest::release_recordid() {
  // @@protoc_insertion_point(field_release:szengine.DeleteRecordRequest.recordId)
  return recordid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DeleteRecordRequest::set_allocated_recordid(std::string* recordid) {
  if (recordid != nullptr) {
    
  } else {
    
  }
  recordid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), recordid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:szengine.DeleteRecordRequest.recordId)
}
inline std::string* DeleteRecordRequest::unsafe_arena_release_recordid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:szengine.DeleteRecordRequest.recordId)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return recordid_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void DeleteRecordRequest::unsafe_arena_set_allocated_recordid(
    std::string* recordid) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (recordid != nullptr) {
    
  } else {
    
  }
  recordid_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      recordid, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:szengine.DeleteRecordRequest.recordId)
}

// int64 flags = 3;
inline void DeleteRecordRequest::clear_flags() {
  flags_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 DeleteRecordRequest::_internal_flags() const {
  return flags_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 DeleteRecordRequest::flags() const {
  // @@protoc_insertion_point(field_get:szengine.DeleteRecordRequest.flags)
  return _internal_flags();
}
inline void DeleteRecordRequest::_internal_set_flags(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  flags_ = value;
}
inline void DeleteRecordRequest::set_flags(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_flags(value);
  // @@protoc_insertion_point(field_set:szengine.DeleteRecordRequest.flags)
}

// -------------------------------------------------------------------

// DeleteRecordResponse

// string result = 1;
inline void DeleteRecordResponse::clear_result() {
  result_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& DeleteRecordResponse::result() const {
  // @@protoc_insertion_point(field_get:szengine.DeleteRecordResponse.result)
  return _internal_result();
}
inline void DeleteRecordResponse::set_result(const std::string& value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:szengine.DeleteRecordResponse.result)
}
inline std::string* DeleteRecordResponse::mutable_result() {
  // @@protoc_insertion_point(field_mutable:szengine.DeleteRecordResponse.result)
  return _internal_mutable_result();
}
inline const std::string& DeleteRecordResponse::_internal_result() const {
  return result_.Get();
}
inline void DeleteRecordResponse::_internal_set_result(const std::string& value) {
  
  result_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DeleteRecordResponse::set_result(std::string&& value) {
  
  result_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:szengine.DeleteRecordResponse.result)
}
inline void DeleteRecordResponse::set_result(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  result_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:szengine.DeleteRecordResponse.result)
}
inline void DeleteRecordResponse::set_result(const char* value,
    size_t size) {
  
  result_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:szengine.DeleteRecordResponse.result)
}
inline std::string* DeleteRecordResponse::_internal_mutable_result() {
  
  return result_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DeleteRecordResponse::release_result() {
  // @@protoc_insertion_point(field_release:szengine.DeleteRecordResponse.result)
  return result_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DeleteRecordResponse::set_allocated_result(std::string* result) {
  if (result != nullptr) {
    
  } else {
    
  }
  result_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), result,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:szengine.DeleteRecordResponse.result)
}
inline std::string* DeleteRecordResponse::unsafe_arena_release_result() {
  // @@protoc_insertion_point(field_unsafe_arena_release:szengine.DeleteRecordResponse.result)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return result_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void DeleteRecordResponse::unsafe_arena_set_allocated_result(
    std::string* result) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (result != nullptr) {
    
  } else {
    
  }
  result_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      result, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:szengine.DeleteRecordResponse.result)
}

// -------------------------------------------------------------------

// ExportCsvEntityReportRequest

// string csvColumnList = 1;
inline void ExportCsvEntityReportRequest::clear_csvcolumnlist() {
  csvcolumnlist_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ExportCsvEntityReportRequest::csvcolumnlist() const {
  // @@protoc_insertion_point(field_get:szengine.ExportCsvEntityReportRequest.csvColumnList)
  return _internal_csvcolumnlist();
}
inline void ExportCsvEntityReportRequest::set_csvcolumnlist(const std::string& value) {
  _internal_set_csvcolumnlist(value);
  // @@protoc_insertion_point(field_set:szengine.ExportCsvEntityReportRequest.csvColumnList)
}
inline std::string* ExportCsvEntityReportRequest::mutable_csvcolumnlist() {
  // @@protoc_insertion_point(field_mutable:szengine.ExportCsvEntityReportRequest.csvColumnList)
  return _internal_mutable_csvcolumnlist();
}
inline const std::string& ExportCsvEntityReportRequest::_internal_csvcolumnlist() const {
  return csvcolumnlist_.Get();
}
inline void ExportCsvEntityReportRequest::_internal_set_csvcolumnlist(const std::string& value) {
  
  csvcolumnlist_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ExportCsvEntityReportRequest::set_csvcolumnlist(std::string&& value) {
  
  csvcolumnlist_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:szengine.ExportCsvEntityReportRequest.csvColumnList)
}
inline void ExportCsvEntityReportRequest::set_csvcolumnlist(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  csvcolumnlist_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:szengine.ExportCsvEntityReportRequest.csvColumnList)
}
inline void ExportCsvEntityReportRequest::set_csvcolumnlist(const char* value,
    size_t size) {
  
  csvcolumnlist_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:szengine.ExportCsvEntityReportRequest.csvColumnList)
}
inline std::string* ExportCsvEntityReportRequest::_internal_mutable_csvcolumnlist() {
  
  return csvcolumnlist_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ExportCsvEntityReportRequest::release_csvcolumnlist() {
  // @@protoc_insertion_point(field_release:szengine.ExportCsvEntityReportRequest.csvColumnList)
  return csvcolumnlist_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ExportCsvEntityReportRequest::set_allocated_csvcolumnlist(std::string* csvcolumnlist) {
  if (csvcolumnlist != nullptr) {
    
  } else {
    
  }
  csvcolumnlist_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), csvcolumnlist,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:szengine.ExportCsvEntityReportRequest.csvColumnList)
}
inline std::string* ExportCsvEntityReportRequest::unsafe_arena_release_csvcolumnlist() {
  // @@protoc_insertion_point(field_unsafe_arena_release:szengine.ExportCsvEntityReportRequest.csvColumnList)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return csvcolumnlist_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ExportCsvEntityReportRequest::unsafe_arena_set_allocated_csvcolumnlist(
    std::string* csvcolumnlist) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (csvcolumnlist != nullptr) {
    
  } else {
    
  }
  csvcolumnlist_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      csvcolumnlist, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:szengine.ExportCsvEntityReportRequest.csvColumnList)
}

// int64 flags = 2;
inline void ExportCsvEntityReportRequest::clear_flags() {
  flags_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ExportCsvEntityReportRequest::_internal_flags() const {
  return flags_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ExportCsvEntityReportRequest::flags() const {
  // @@protoc_insertion_point(field_get:szengine.ExportCsvEntityReportRequest.flags)
  return _internal_flags();
}
inline void ExportCsvEntityReportRequest::_internal_set_flags(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  flags_ = value;
}
inline void ExportCsvEntityReportRequest::set_flags(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_flags(value);
  // @@protoc_insertion_point(field_set:szengine.ExportCsvEntityReportRequest.flags)
}

// -------------------------------------------------------------------

// ExportCsvEntityReportResponse

// int64 result = 1;
inline void ExportCsvEntityReportResponse::clear_result() {
  result_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ExportCsvEntityReportResponse::_internal_result() const {
  return result_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ExportCsvEntityReportResponse::result() const {
  // @@protoc_insertion_point(field_get:szengine.ExportCsvEntityReportResponse.result)
  return _internal_result();
}
inline void ExportCsvEntityReportResponse::_internal_set_result(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  result_ = value;
}
inline void ExportCsvEntityReportResponse::set_result(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:szengine.ExportCsvEntityReportResponse.result)
}

// -------------------------------------------------------------------

// ExportJsonEntityReportRequest

// int64 flags = 1;
inline void ExportJsonEntityReportRequest::clear_flags() {
  flags_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ExportJsonEntityReportRequest::_internal_flags() const {
  return flags_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ExportJsonEntityReportRequest::flags() const {
  // @@protoc_insertion_point(field_get:szengine.ExportJsonEntityReportRequest.flags)
  return _internal_flags();
}
inline void ExportJsonEntityReportRequest::_internal_set_flags(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  flags_ = value;
}
inline void ExportJsonEntityReportRequest::set_flags(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_flags(value);
  // @@protoc_insertion_point(field_set:szengine.ExportJsonEntityReportRequest.flags)
}

// -------------------------------------------------------------------

// ExportJsonEntityReportResponse

// int64 result = 1;
inline void ExportJsonEntityReportResponse::clear_result() {
  result_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ExportJsonEntityReportResponse::_internal_result() const {
  return result_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ExportJsonEntityReportResponse::result() const {
  // @@protoc_insertion_point(field_get:szengine.ExportJsonEntityReportResponse.result)
  return _internal_result();
}
inline void ExportJsonEntityReportResponse::_internal_set_result(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  result_ = value;
}
inline void ExportJsonEntityReportResponse::set_result(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:szengine.ExportJsonEntityReportResponse.result)
}

// -------------------------------------------------------------------

// FetchNextRequest

// int64 exportHandle = 1;
inline void FetchNextRequest::clear_exporthandle() {
  exporthandle_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 FetchNextRequest::_internal_exporthandle() const {
  return exporthandle_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 FetchNextRequest::exporthandle() const {
  // @@protoc_insertion_point(field_get:szengine.FetchNextRequest.exportHandle)
  return _internal_exporthandle();
}
inline void FetchNextRequest::_internal_set_exporthandle(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  exporthandle_ = value;
}
inline void FetchNextRequest::set_exporthandle(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_exporthandle(value);
  // @@protoc_insertion_point(field_set:szengine.FetchNextRequest.exportHandle)
}

// -------------------------------------------------------------------

// FetchNextResponse

// string result = 1;
inline void FetchNextResponse::clear_result() {
  result_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& FetchNextResponse::result() const {
  // @@protoc_insertion_point(field_get:szengine.FetchNextResponse.result)
  return _internal_result();
}
inline void FetchNextResponse::set_result(const std::string& value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:szengine.FetchNextResponse.result)
}
inline std::string* FetchNextResponse::mutable_result() {
  // @@protoc_insertion_point(field_mutable:szengine.FetchNextResponse.result)
  return _internal_mutable_result();
}
inline const std::string& FetchNextResponse::_internal_result() const {
  return result_.Get();
}
inline void FetchNextResponse::_internal_set_result(const std::string& value) {
  
  result_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void FetchNextResponse::set_result(std::string&& value) {
  
  result_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:szengine.FetchNextResponse.result)
}
inline void FetchNextResponse::set_result(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  result_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:szengine.FetchNextResponse.result)
}
inline void FetchNextResponse::set_result(const char* value,
    size_t size) {
  
  result_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:szengine.FetchNextResponse.result)
}
inline std::string* FetchNextResponse::_internal_mutable_result() {
  
  return result_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* FetchNextResponse::release_result() {
  // @@protoc_insertion_point(field_release:szengine.FetchNextResponse.result)
  return result_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void FetchNextResponse::set_allocated_result(std::string* result) {
  if (result != nullptr) {
    
  } else {
    
  }
  result_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), result,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:szengine.FetchNextResponse.result)
}
inline std::string* FetchNextResponse::unsafe_arena_release_result() {
  // @@protoc_insertion_point(field_unsafe_arena_release:szengine.FetchNextResponse.result)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return result_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void FetchNextResponse::unsafe_arena_set_allocated_result(
    std::string* result) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (result != nullptr) {
    
  } else {
    
  }
  result_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      result, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:szengine.FetchNextResponse.result)
}

// -------------------------------------------------------------------

// FindInterestingEntitiesByEntityIdRequest

// int64 entityId = 1;
inline void FindInterestingEntitiesByEntityIdRequest::clear_entityid() {
  entityid_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 FindInterestingEntitiesByEntityIdRequest::_internal_entityid() const {
  return entityid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 FindInterestingEntitiesByEntityIdRequest::entityid() const {
  // @@protoc_insertion_point(field_get:szengine.FindInterestingEntitiesByEntityIdRequest.entityId)
  return _internal_entityid();
}
inline void FindInterestingEntitiesByEntityIdRequest::_internal_set_entityid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  entityid_ = value;
}
inline void FindInterestingEntitiesByEntityIdRequest::set_entityid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_entityid(value);
  // @@protoc_insertion_point(field_set:szengine.FindInterestingEntitiesByEntityIdRequest.entityId)
}

// int64 flags = 2;
inline void FindInterestingEntitiesByEntityIdRequest::clear_flags() {
  flags_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 FindInterestingEntitiesByEntityIdRequest::_internal_flags() const {
  return flags_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 FindInterestingEntitiesByEntityIdRequest::flags() const {
  // @@protoc_insertion_point(field_get:szengine.FindInterestingEntitiesByEntityIdRequest.flags)
  return _internal_flags();
}
inline void FindInterestingEntitiesByEntityIdRequest::_internal_set_flags(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  flags_ = value;
}
inline void FindInterestingEntitiesByEntityIdRequest::set_flags(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_flags(value);
  // @@protoc_insertion_point(field_set:szengine.FindInterestingEntitiesByEntityIdRequest.flags)
}

// -------------------------------------------------------------------

// FindInterestingEntitiesByEntityIdResponse

// string result = 1;
inline void FindInterestingEntitiesByEntityIdResponse::clear_result() {
  result_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& FindInterestingEntitiesByEntityIdResponse::result() const {
  // @@protoc_insertion_point(field_get:szengine.FindInterestingEntitiesByEntityIdResponse.result)
  return _internal_result();
}
inline void FindInterestingEntitiesByEntityIdResponse::set_result(const std::string& value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:szengine.FindInterestingEntitiesByEntityIdResponse.result)
}
inline std::string* FindInterestingEntitiesByEntityIdResponse::mutable_result() {
  // @@protoc_insertion_point(field_mutable:szengine.FindInterestingEntitiesByEntityIdResponse.result)
  return _internal_mutable_result();
}
inline const std::string& FindInterestingEntitiesByEntityIdResponse::_internal_result() const {
  return result_.Get();
}
inline void FindInterestingEntitiesByEntityIdResponse::_internal_set_result(const std::string& value) {
  
  result_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void FindInterestingEntitiesByEntityIdResponse::set_result(std::string&& value) {
  
  result_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:szengine.FindInterestingEntitiesByEntityIdResponse.result)
}
inline void FindInterestingEntitiesByEntityIdResponse::set_result(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  result_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:szengine.FindInterestingEntitiesByEntityIdResponse.result)
}
inline void FindInterestingEntitiesByEntityIdResponse::set_result(const char* value,
    size_t size) {
  
  result_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:szengine.FindInterestingEntitiesByEntityIdResponse.result)
}
inline std::string* FindInterestingEntitiesByEntityIdResponse::_internal_mutable_result() {
  
  return result_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* FindInterestingEntitiesByEntityIdResponse::release_result() {
  // @@protoc_insertion_point(field_release:szengine.FindInterestingEntitiesByEntityIdResponse.result)
  return result_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void FindInterestingEntitiesByEntityIdResponse::set_allocated_result(std::string* result) {
  if (result != nullptr) {
    
  } else {
    
  }
  result_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), result,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:szengine.FindInterestingEntitiesByEntityIdResponse.result)
}
inline std::string* FindInterestingEntitiesByEntityIdResponse::unsafe_arena_release_result() {
  // @@protoc_insertion_point(field_unsafe_arena_release:szengine.FindInterestingEntitiesByEntityIdResponse.result)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return result_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void FindInterestingEntitiesByEntityIdResponse::unsafe_arena_set_allocated_result(
    std::string* result) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (result != nullptr) {
    
  } else {
    
  }
  result_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      result, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:szengine.FindInterestingEntitiesByEntityIdResponse.result)
}

// -------------------------------------------------------------------

// FindInterestingEntitiesByRecordIdRequest

// string dataSourceCode = 1;
inline void FindInterestingEntitiesByRecordIdRequest::clear_datasourcecode() {
  datasourcecode_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& FindInterestingEntitiesByRecordIdRequest::datasourcecode() const {
  // @@protoc_insertion_point(field_get:szengine.FindInterestingEntitiesByRecordIdRequest.dataSourceCode)
  return _internal_datasourcecode();
}
inline void FindInterestingEntitiesByRecordIdRequest::set_datasourcecode(const std::string& value) {
  _internal_set_datasourcecode(value);
  // @@protoc_insertion_point(field_set:szengine.FindInterestingEntitiesByRecordIdRequest.dataSourceCode)
}
inline std::string* FindInterestingEntitiesByRecordIdRequest::mutable_datasourcecode() {
  // @@protoc_insertion_point(field_mutable:szengine.FindInterestingEntitiesByRecordIdRequest.dataSourceCode)
  return _internal_mutable_datasourcecode();
}
inline const std::string& FindInterestingEntitiesByRecordIdRequest::_internal_datasourcecode() const {
  return datasourcecode_.Get();
}
inline void FindInterestingEntitiesByRecordIdRequest::_internal_set_datasourcecode(const std::string& value) {
  
  datasourcecode_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void FindInterestingEntitiesByRecordIdRequest::set_datasourcecode(std::string&& value) {
  
  datasourcecode_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:szengine.FindInterestingEntitiesByRecordIdRequest.dataSourceCode)
}
inline void FindInterestingEntitiesByRecordIdRequest::set_datasourcecode(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  datasourcecode_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:szengine.FindInterestingEntitiesByRecordIdRequest.dataSourceCode)
}
inline void FindInterestingEntitiesByRecordIdRequest::set_datasourcecode(const char* value,
    size_t size) {
  
  datasourcecode_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:szengine.FindInterestingEntitiesByRecordIdRequest.dataSourceCode)
}
inline std::string* FindInterestingEntitiesByRecordIdRequest::_internal_mutable_datasourcecode() {
  
  return datasourcecode_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* FindInterestingEntitiesByRecordIdRequest::release_datasourcecode() {
  // @@protoc_insertion_point(field_release:szengine.FindInterestingEntitiesByRecordIdRequest.dataSourceCode)
  return datasourcecode_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void FindInterestingEntitiesByRecordIdRequest::set_allocated_datasourcecode(std::string* datasourcecode) {
  if (datasourcecode != nullptr) {
    
  } else {
    
  }
  datasourcecode_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), datasourcecode,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:szengine.FindInterestingEntitiesByRecordIdRequest.dataSourceCode)
}
inline std::string* FindInterestingEntitiesByRecordIdRequest::unsafe_arena_release_datasourcecode() {
  // @@protoc_insertion_point(field_unsafe_arena_release:szengine.FindInterestingEntitiesByRecordIdRequest.dataSourceCode)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return datasourcecode_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void FindInterestingEntitiesByRecordIdRequest::unsafe_arena_set_allocated_datasourcecode(
    std::string* datasourcecode) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (datasourcecode != nullptr) {
    
  } else {
    
  }
  datasourcecode_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      datasourcecode, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:szengine.FindInterestingEntitiesByRecordIdRequest.dataSourceCode)
}

// string recordId = 2;
inline void FindInterestingEntitiesByRecordIdRequest::clear_recordid() {
  recordid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& FindInterestingEntitiesByRecordIdRequest::recordid() const {
  // @@protoc_insertion_point(field_get:szengine.FindInterestingEntitiesByRecordIdRequest.recordId)
  return _internal_recordid();
}
inline void FindInterestingEntitiesByRecordIdRequest::set_recordid(const std::string& value) {
  _internal_set_recordid(value);
  // @@protoc_insertion_point(field_set:szengine.FindInterestingEntitiesByRecordIdRequest.recordId)
}
inline std::string* FindInterestingEntitiesByRecordIdRequest::mutable_recordid() {
  // @@protoc_insertion_point(field_mutable:szengine.FindInterestingEntitiesByRecordIdRequest.recordId)
  return _internal_mutable_recordid();
}
inline const std::string& FindInterestingEntitiesByRecordIdRequest::_internal_recordid() const {
  return recordid_.Get();
}
inline void FindInterestingEntitiesByRecordIdRequest::_internal_set_recordid(const std::string& value) {
  
  recordid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void FindInterestingEntitiesByRecordIdRequest::set_recordid(std::string&& value) {
  
  recordid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:szengine.FindInterestingEntitiesByRecordIdRequest.recordId)
}
inline void FindInterestingEntitiesByRecordIdRequest::set_recordid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  recordid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:szengine.FindInterestingEntitiesByRecordIdRequest.recordId)
}
inline void FindInterestingEntitiesByRecordIdRequest::set_recordid(const char* value,
    size_t size) {
  
  recordid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:szengine.FindInterestingEntitiesByRecordIdRequest.recordId)
}
inline std::string* FindInterestingEntitiesByRecordIdRequest::_internal_mutable_recordid() {
  
  return recordid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* FindInterestingEntitiesByRecordIdRequest::release_recordid() {
  // @@protoc_insertion_point(field_release:szengine.FindInterestingEntitiesByRecordIdRequest.recordId)
  return recordid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void FindInterestingEntitiesByRecordIdRequest::set_allocated_recordid(std::string* recordid) {
  if (recordid != nullptr) {
    
  } else {
    
  }
  recordid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), recordid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:szengine.FindInterestingEntitiesByRecordIdRequest.recordId)
}
inline std::string* FindInterestingEntitiesByRecordIdRequest::unsafe_arena_release_recordid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:szengine.FindInterestingEntitiesByRecordIdRequest.recordId)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return recordid_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void FindInterestingEntitiesByRecordIdRequest::unsafe_arena_set_allocated_recordid(
    std::string* recordid) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (recordid != nullptr) {
    
  } else {
    
  }
  recordid_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      recordid, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:szengine.FindInterestingEntitiesByRecordIdRequest.recordId)
}

// int64 flags = 3;
inline void FindInterestingEntitiesByRecordIdRequest::clear_flags() {
  flags_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 FindInterestingEntitiesByRecordIdRequest::_internal_flags() const {
  return flags_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 FindInterestingEntitiesByRecordIdRequest::flags() const {
  // @@protoc_insertion_point(field_get:szengine.FindInterestingEntitiesByRecordIdRequest.flags)
  return _internal_flags();
}
inline void FindInterestingEntitiesByRecordIdRequest::_internal_set_flags(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  flags_ = value;
}
inline void FindInterestingEntitiesByRecordIdRequest::set_flags(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_flags(value);
  // @@protoc_insertion_point(field_set:szengine.FindInterestingEntitiesByRecordIdRequest.flags)
}

// -------------------------------------------------------------------

// FindInterestingEntitiesByRecordIdResponse

// string result = 1;
inline void FindInterestingEntitiesByRecordIdResponse::clear_result() {
  result_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& FindInterestingEntitiesByRecordIdResponse::result() const {
  // @@protoc_insertion_point(field_get:szengine.FindInterestingEntitiesByRecordIdResponse.result)
  return _internal_result();
}
inline void FindInterestingEntitiesByRecordIdResponse::set_result(const std::string& value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:szengine.FindInterestingEntitiesByRecordIdResponse.result)
}
inline std::string* FindInterestingEntitiesByRecordIdResponse::mutable_result() {
  // @@protoc_insertion_point(field_mutable:szengine.FindInterestingEntitiesByRecordIdResponse.result)
  return _internal_mutable_result();
}
inline const std::string& FindInterestingEntitiesByRecordIdResponse::_internal_result() const {
  return result_.Get();
}
inline void FindInterestingEntitiesByRecordIdResponse::_internal_set_result(const std::string& value) {
  
  result_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void FindInterestingEntitiesByRecordIdResponse::set_result(std::string&& value) {
  
  result_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:szengine.FindInterestingEntitiesByRecordIdResponse.result)
}
inline void FindInterestingEntitiesByRecordIdResponse::set_result(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  result_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:szengine.FindInterestingEntitiesByRecordIdResponse.result)
}
inline void FindInterestingEntitiesByRecordIdResponse::set_result(const char* value,
    size_t size) {
  
  result_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:szengine.FindInterestingEntitiesByRecordIdResponse.result)
}
inline std::string* FindInterestingEntitiesByRecordIdResponse::_internal_mutable_result() {
  
  return result_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* FindInterestingEntitiesByRecordIdResponse::release_result() {
  // @@protoc_insertion_point(field_release:szengine.FindInterestingEntitiesByRecordIdResponse.result)
  return result_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void FindInterestingEntitiesByRecordIdResponse::set_allocated_result(std::string* result) {
  if (result != nullptr) {
    
  } else {
    
  }
  result_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), result,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:szengine.FindInterestingEntitiesByRecordIdResponse.result)
}
inline std::string* FindInterestingEntitiesByRecordIdResponse::unsafe_arena_release_result() {
  // @@protoc_insertion_point(field_unsafe_arena_release:szengine.FindInterestingEntitiesByRecordIdResponse.result)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return result_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void FindInterestingEntitiesByRecordIdResponse::unsafe_arena_set_allocated_result(
    std::string* result) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (result != nullptr) {
    
  } else {
    
  }
  result_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      result, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:szengine.FindInterestingEntitiesByRecordIdResponse.result)
}

// -------------------------------------------------------------------

// FindNetworkByEntityIdRequest

// string entityIds = 1;
inline void FindNetworkByEntityIdRequest::clear_entityids() {
  entityids_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& FindNetworkByEntityIdRequest::entityids() const {
  // @@protoc_insertion_point(field_get:szengine.FindNetworkByEntityIdRequest.entityIds)
  return _internal_entityids();
}
inline void FindNetworkByEntityIdRequest::set_entityids(const std::string& value) {
  _internal_set_entityids(value);
  // @@protoc_insertion_point(field_set:szengine.FindNetworkByEntityIdRequest.entityIds)
}
inline std::string* FindNetworkByEntityIdRequest::mutable_entityids() {
  // @@protoc_insertion_point(field_mutable:szengine.FindNetworkByEntityIdRequest.entityIds)
  return _internal_mutable_entityids();
}
inline const std::string& FindNetworkByEntityIdRequest::_internal_entityids() const {
  return entityids_.Get();
}
inline void FindNetworkByEntityIdRequest::_internal_set_entityids(const std::string& value) {
  
  entityids_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void FindNetworkByEntityIdRequest::set_entityids(std::string&& value) {
  
  entityids_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:szengine.FindNetworkByEntityIdRequest.entityIds)
}
inline void FindNetworkByEntityIdRequest::set_entityids(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  entityids_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:szengine.FindNetworkByEntityIdRequest.entityIds)
}
inline void FindNetworkByEntityIdRequest::set_entityids(const char* value,
    size_t size) {
  
  entityids_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:szengine.FindNetworkByEntityIdRequest.entityIds)
}
inline std::string* FindNetworkByEntityIdRequest::_internal_mutable_entityids() {
  
  return entityids_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* FindNetworkByEntityIdRequest::release_entityids() {
  // @@protoc_insertion_point(field_release:szengine.FindNetworkByEntityIdRequest.entityIds)
  return entityids_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void FindNetworkByEntityIdRequest::set_allocated_entityids(std::string* entityids) {
  if (entityids != nullptr) {
    
  } else {
    
  }
  entityids_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), entityids,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:szengine.FindNetworkByEntityIdRequest.entityIds)
}
inline std::string* FindNetworkByEntityIdRequest::unsafe_arena_release_entityids() {
  // @@protoc_insertion_point(field_unsafe_arena_release:szengine.FindNetworkByEntityIdRequest.entityIds)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return entityids_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void FindNetworkByEntityIdRequest::unsafe_arena_set_allocated_entityids(
    std::string* entityids) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (entityids != nullptr) {
    
  } else {
    
  }
  entityids_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      entityids, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:szengine.FindNetworkByEntityIdRequest.entityIds)
}

// int64 maxDegrees = 2;
inline void FindNetworkByEntityIdRequest::clear_maxdegrees() {
  maxdegrees_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 FindNetworkByEntityIdRequest::_internal_maxdegrees() const {
  return maxdegrees_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 FindNetworkByEntityIdRequest::maxdegrees() const {
  // @@protoc_insertion_point(field_get:szengine.FindNetworkByEntityIdRequest.maxDegrees)
  return _internal_maxdegrees();
}
inline void FindNetworkByEntityIdRequest::_internal_set_maxdegrees(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  maxdegrees_ = value;
}
inline void FindNetworkByEntityIdRequest::set_maxdegrees(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_maxdegrees(value);
  // @@protoc_insertion_point(field_set:szengine.FindNetworkByEntityIdRequest.maxDegrees)
}

// int64 buildOutDegrees = 3;
inline void FindNetworkByEntityIdRequest::clear_buildoutdegrees() {
  buildoutdegrees_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 FindNetworkByEntityIdRequest::_internal_buildoutdegrees() const {
  return buildoutdegrees_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 FindNetworkByEntityIdRequest::buildoutdegrees() const {
  // @@protoc_insertion_point(field_get:szengine.FindNetworkByEntityIdRequest.buildOutDegrees)
  return _internal_buildoutdegrees();
}
inline void FindNetworkByEntityIdRequest::_internal_set_buildoutdegrees(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  buildoutdegrees_ = value;
}
inline void FindNetworkByEntityIdRequest::set_buildoutdegrees(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_buildoutdegrees(value);
  // @@protoc_insertion_point(field_set:szengine.FindNetworkByEntityIdRequest.buildOutDegrees)
}

// int64 buildOutMaxEntities = 4;
inline void FindNetworkByEntityIdRequest::clear_buildoutmaxentities() {
  buildoutmaxentities_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 FindNetworkByEntityIdRequest::_internal_buildoutmaxentities() const {
  return buildoutmaxentities_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 FindNetworkByEntityIdRequest::buildoutmaxentities() const {
  // @@protoc_insertion_point(field_get:szengine.FindNetworkByEntityIdRequest.buildOutMaxEntities)
  return _internal_buildoutmaxentities();
}
inline void FindNetworkByEntityIdRequest::_internal_set_buildoutmaxentities(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  buildoutmaxentities_ = value;
}
inline void FindNetworkByEntityIdRequest::set_buildoutmaxentities(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_buildoutmaxentities(value);
  // @@protoc_insertion_point(field_set:szengine.FindNetworkByEntityIdRequest.buildOutMaxEntities)
}

// int64 flags = 5;
inline void FindNetworkByEntityIdRequest::clear_flags() {
  flags_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 FindNetworkByEntityIdRequest::_internal_flags() const {
  return flags_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 FindNetworkByEntityIdRequest::flags() const {
  // @@protoc_insertion_point(field_get:szengine.FindNetworkByEntityIdRequest.flags)
  return _internal_flags();
}
inline void FindNetworkByEntityIdRequest::_internal_set_flags(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  flags_ = value;
}
inline void FindNetworkByEntityIdRequest::set_flags(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_flags(value);
  // @@protoc_insertion_point(field_set:szengine.FindNetworkByEntityIdRequest.flags)
}

// -------------------------------------------------------------------

// FindNetworkByEntityIdResponse

// string result = 1;
inline void FindNetworkByEntityIdResponse::clear_result() {
  result_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& FindNetworkByEntityIdResponse::result() const {
  // @@protoc_insertion_point(field_get:szengine.FindNetworkByEntityIdResponse.result)
  return _internal_result();
}
inline void FindNetworkByEntityIdResponse::set_result(const std::string& value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:szengine.FindNetworkByEntityIdResponse.result)
}
inline std::string* FindNetworkByEntityIdResponse::mutable_result() {
  // @@protoc_insertion_point(field_mutable:szengine.FindNetworkByEntityIdResponse.result)
  return _internal_mutable_result();
}
inline const std::string& FindNetworkByEntityIdResponse::_internal_result() const {
  return result_.Get();
}
inline void FindNetworkByEntityIdResponse::_internal_set_result(const std::string& value) {
  
  result_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void FindNetworkByEntityIdResponse::set_result(std::string&& value) {
  
  result_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:szengine.FindNetworkByEntityIdResponse.result)
}
inline void FindNetworkByEntityIdResponse::set_result(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  result_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:szengine.FindNetworkByEntityIdResponse.result)
}
inline void FindNetworkByEntityIdResponse::set_result(const char* value,
    size_t size) {
  
  result_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:szengine.FindNetworkByEntityIdResponse.result)
}
inline std::string* FindNetworkByEntityIdResponse::_internal_mutable_result() {
  
  return result_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* FindNetworkByEntityIdResponse::release_result() {
  // @@protoc_insertion_point(field_release:szengine.FindNetworkByEntityIdResponse.result)
  return result_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void FindNetworkByEntityIdResponse::set_allocated_result(std::string* result) {
  if (result != nullptr) {
    
  } else {
    
  }
  result_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), result,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:szengine.FindNetworkByEntityIdResponse.result)
}
inline std::string* FindNetworkByEntityIdResponse::unsafe_arena_release_result() {
  // @@protoc_insertion_point(field_unsafe_arena_release:szengine.FindNetworkByEntityIdResponse.result)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return result_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void FindNetworkByEntityIdResponse::unsafe_arena_set_allocated_result(
    std::string* result) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (result != nullptr) {
    
  } else {
    
  }
  result_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      result, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:szengine.FindNetworkByEntityIdResponse.result)
}

// -------------------------------------------------------------------

// FindNetworkByRecordIdRequest

// string recordKeys = 1;
inline void FindNetworkByRecordIdRequest::clear_recordkeys() {
  recordkeys_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& FindNetworkByRecordIdRequest::recordkeys() const {
  // @@protoc_insertion_point(field_get:szengine.FindNetworkByRecordIdRequest.recordKeys)
  return _internal_recordkeys();
}
inline void FindNetworkByRecordIdRequest::set_recordkeys(const std::string& value) {
  _internal_set_recordkeys(value);
  // @@protoc_insertion_point(field_set:szengine.FindNetworkByRecordIdRequest.recordKeys)
}
inline std::string* FindNetworkByRecordIdRequest::mutable_recordkeys() {
  // @@protoc_insertion_point(field_mutable:szengine.FindNetworkByRecordIdRequest.recordKeys)
  return _internal_mutable_recordkeys();
}
inline const std::string& FindNetworkByRecordIdRequest::_internal_recordkeys() const {
  return recordkeys_.Get();
}
inline void FindNetworkByRecordIdRequest::_internal_set_recordkeys(const std::string& value) {
  
  recordkeys_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void FindNetworkByRecordIdRequest::set_recordkeys(std::string&& value) {
  
  recordkeys_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:szengine.FindNetworkByRecordIdRequest.recordKeys)
}
inline void FindNetworkByRecordIdRequest::set_recordkeys(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  recordkeys_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:szengine.FindNetworkByRecordIdRequest.recordKeys)
}
inline void FindNetworkByRecordIdRequest::set_recordkeys(const char* value,
    size_t size) {
  
  recordkeys_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:szengine.FindNetworkByRecordIdRequest.recordKeys)
}
inline std::string* FindNetworkByRecordIdRequest::_internal_mutable_recordkeys() {
  
  return recordkeys_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* FindNetworkByRecordIdRequest::release_recordkeys() {
  // @@protoc_insertion_point(field_release:szengine.FindNetworkByRecordIdRequest.recordKeys)
  return recordkeys_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void FindNetworkByRecordIdRequest::set_allocated_recordkeys(std::string* recordkeys) {
  if (recordkeys != nullptr) {
    
  } else {
    
  }
  recordkeys_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), recordkeys,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:szengine.FindNetworkByRecordIdRequest.recordKeys)
}
inline std::string* FindNetworkByRecordIdRequest::unsafe_arena_release_recordkeys() {
  // @@protoc_insertion_point(field_unsafe_arena_release:szengine.FindNetworkByRecordIdRequest.recordKeys)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return recordkeys_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void FindNetworkByRecordIdRequest::unsafe_arena_set_allocated_recordkeys(
    std::string* recordkeys) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (recordkeys != nullptr) {
    
  } else {
    
  }
  recordkeys_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      recordkeys, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:szengine.FindNetworkByRecordIdRequest.recordKeys)
}

// int64 maxDegrees = 2;
inline void FindNetworkByRecordIdRequest::clear_maxdegrees() {
  maxdegrees_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 FindNetworkByRecordIdRequest::_internal_maxdegrees() const {
  return maxdegrees_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 FindNetworkByRecordIdRequest::maxdegrees() const {
  // @@protoc_insertion_point(field_get:szengine.FindNetworkByRecordIdRequest.maxDegrees)
  return _internal_maxdegrees();
}
inline void FindNetworkByRecordIdRequest::_internal_set_maxdegrees(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  maxdegrees_ = value;
}
inline void FindNetworkByRecordIdRequest::set_maxdegrees(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_maxdegrees(value);
  // @@protoc_insertion_point(field_set:szengine.FindNetworkByRecordIdRequest.maxDegrees)
}

// int64 buildOutDegrees = 3;
inline void FindNetworkByRecordIdRequest::clear_buildoutdegrees() {
  buildoutdegrees_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 FindNetworkByRecordIdRequest::_internal_buildoutdegrees() const {
  return buildoutdegrees_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 FindNetworkByRecordIdRequest::buildoutdegrees() const {
  // @@protoc_insertion_point(field_get:szengine.FindNetworkByRecordIdRequest.buildOutDegrees)
  return _internal_buildoutdegrees();
}
inline void FindNetworkByRecordIdRequest::_internal_set_buildoutdegrees(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  buildoutdegrees_ = value;
}
inline void FindNetworkByRecordIdRequest::set_buildoutdegrees(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_buildoutdegrees(value);
  // @@protoc_insertion_point(field_set:szengine.FindNetworkByRecordIdRequest.buildOutDegrees)
}

// int64 buildOutMaxEntities = 4;
inline void FindNetworkByRecordIdRequest::clear_buildoutmaxentities() {
  buildoutmaxentities_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 FindNetworkByRecordIdRequest::_internal_buildoutmaxentities() const {
  return buildoutmaxentities_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 FindNetworkByRecordIdRequest::buildoutmaxentities() const {
  // @@protoc_insertion_point(field_get:szengine.FindNetworkByRecordIdRequest.buildOutMaxEntities)
  return _internal_buildoutmaxentities();
}
inline void FindNetworkByRecordIdRequest::_internal_set_buildoutmaxentities(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  buildoutmaxentities_ = value;
}
inline void FindNetworkByRecordIdRequest::set_buildoutmaxentities(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_buildoutmaxentities(value);
  // @@protoc_insertion_point(field_set:szengine.FindNetworkByRecordIdRequest.buildOutMaxEntities)
}

// int64 flags = 5;
inline void FindNetworkByRecordIdRequest::clear_flags() {
  flags_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 FindNetworkByRecordIdRequest::_internal_flags() const {
  return flags_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 FindNetworkByRecordIdRequest::flags() const {
  // @@protoc_insertion_point(field_get:szengine.FindNetworkByRecordIdRequest.flags)
  return _internal_flags();
}
inline void FindNetworkByRecordIdRequest::_internal_set_flags(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  flags_ = value;
}
inline void FindNetworkByRecordIdRequest::set_flags(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_flags(value);
  // @@protoc_insertion_point(field_set:szengine.FindNetworkByRecordIdRequest.flags)
}

// -------------------------------------------------------------------

// FindNetworkByRecordIdResponse

// string result = 1;
inline void FindNetworkByRecordIdResponse::clear_result() {
  result_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& FindNetworkByRecordIdResponse::result() const {
  // @@protoc_insertion_point(field_get:szengine.FindNetworkByRecordIdResponse.result)
  return _internal_result();
}
inline void FindNetworkByRecordIdResponse::set_result(const std::string& value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:szengine.FindNetworkByRecordIdResponse.result)
}
inline std::string* FindNetworkByRecordIdResponse::mutable_result() {
  // @@protoc_insertion_point(field_mutable:szengine.FindNetworkByRecordIdResponse.result)
  return _internal_mutable_result();
}
inline const std::string& FindNetworkByRecordIdResponse::_internal_result() const {
  return result_.Get();
}
inline void FindNetworkByRecordIdResponse::_internal_set_result(const std::string& value) {
  
  result_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void FindNetworkByRecordIdResponse::set_result(std::string&& value) {
  
  result_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:szengine.FindNetworkByRecordIdResponse.result)
}
inline void FindNetworkByRecordIdResponse::set_result(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  result_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:szengine.FindNetworkByRecordIdResponse.result)
}
inline void FindNetworkByRecordIdResponse::set_result(const char* value,
    size_t size) {
  
  result_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:szengine.FindNetworkByRecordIdResponse.result)
}
inline std::string* FindNetworkByRecordIdResponse::_internal_mutable_result() {
  
  return result_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* FindNetworkByRecordIdResponse::release_result() {
  // @@protoc_insertion_point(field_release:szengine.FindNetworkByRecordIdResponse.result)
  return result_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void FindNetworkByRecordIdResponse::set_allocated_result(std::string* result) {
  if (result != nullptr) {
    
  } else {
    
  }
  result_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), result,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:szengine.FindNetworkByRecordIdResponse.result)
}
inline std::string* FindNetworkByRecordIdResponse::unsafe_arena_release_result() {
  // @@protoc_insertion_point(field_unsafe_arena_release:szengine.FindNetworkByRecordIdResponse.result)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return result_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void FindNetworkByRecordIdResponse::unsafe_arena_set_allocated_result(
    std::string* result) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (result != nullptr) {
    
  } else {
    
  }
  result_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      result, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:szengine.FindNetworkByRecordIdResponse.result)
}

// -------------------------------------------------------------------

// FindPathByEntityIdRequest

// int64 startEntityId = 1;
inline void FindPathByEntityIdRequest::clear_startentityid() {
  startentityid_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 FindPathByEntityIdRequest::_internal_startentityid() const {
  return startentityid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 FindPathByEntityIdRequest::startentityid() const {
  // @@protoc_insertion_point(field_get:szengine.FindPathByEntityIdRequest.startEntityId)
  return _internal_startentityid();
}
inline void FindPathByEntityIdRequest::_internal_set_startentityid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  startentityid_ = value;
}
inline void FindPathByEntityIdRequest::set_startentityid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_startentityid(value);
  // @@protoc_insertion_point(field_set:szengine.FindPathByEntityIdRequest.startEntityId)
}

// int64 endEntityId = 2;
inline void FindPathByEntityIdRequest::clear_endentityid() {
  endentityid_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 FindPathByEntityIdRequest::_internal_endentityid() const {
  return endentityid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 FindPathByEntityIdRequest::endentityid() const {
  // @@protoc_insertion_point(field_get:szengine.FindPathByEntityIdRequest.endEntityId)
  return _internal_endentityid();
}
inline void FindPathByEntityIdRequest::_internal_set_endentityid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  endentityid_ = value;
}
inline void FindPathByEntityIdRequest::set_endentityid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_endentityid(value);
  // @@protoc_insertion_point(field_set:szengine.FindPathByEntityIdRequest.endEntityId)
}

// int64 maxDegrees = 3;
inline void FindPathByEntityIdRequest::clear_maxdegrees() {
  maxdegrees_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 FindPathByEntityIdRequest::_internal_maxdegrees() const {
  return maxdegrees_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 FindPathByEntityIdRequest::maxdegrees() const {
  // @@protoc_insertion_point(field_get:szengine.FindPathByEntityIdRequest.maxDegrees)
  return _internal_maxdegrees();
}
inline void FindPathByEntityIdRequest::_internal_set_maxdegrees(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  maxdegrees_ = value;
}
inline void FindPathByEntityIdRequest::set_maxdegrees(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_maxdegrees(value);
  // @@protoc_insertion_point(field_set:szengine.FindPathByEntityIdRequest.maxDegrees)
}

// string avoidEntityIds = 4;
inline void FindPathByEntityIdRequest::clear_avoidentityids() {
  avoidentityids_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& FindPathByEntityIdRequest::avoidentityids() const {
  // @@protoc_insertion_point(field_get:szengine.FindPathByEntityIdRequest.avoidEntityIds)
  return _internal_avoidentityids();
}
inline void FindPathByEntityIdRequest::set_avoidentityids(const std::string& value) {
  _internal_set_avoidentityids(value);
  // @@protoc_insertion_point(field_set:szengine.FindPathByEntityIdRequest.avoidEntityIds)
}
inline std::string* FindPathByEntityIdRequest::mutable_avoidentityids() {
  // @@protoc_insertion_point(field_mutable:szengine.FindPathByEntityIdRequest.avoidEntityIds)
  return _internal_mutable_avoidentityids();
}
inline const std::string& FindPathByEntityIdRequest::_internal_avoidentityids() const {
  return avoidentityids_.Get();
}
inline void FindPathByEntityIdRequest::_internal_set_avoidentityids(const std::string& value) {
  
  avoidentityids_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void FindPathByEntityIdRequest::set_avoidentityids(std::string&& value) {
  
  avoidentityids_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:szengine.FindPathByEntityIdRequest.avoidEntityIds)
}
inline void FindPathByEntityIdRequest::set_avoidentityids(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  avoidentityids_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:szengine.FindPathByEntityIdRequest.avoidEntityIds)
}
inline void FindPathByEntityIdRequest::set_avoidentityids(const char* value,
    size_t size) {
  
  avoidentityids_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:szengine.FindPathByEntityIdRequest.avoidEntityIds)
}
inline std::string* FindPathByEntityIdRequest::_internal_mutable_avoidentityids() {
  
  return avoidentityids_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* FindPathByEntityIdRequest::release_avoidentityids() {
  // @@protoc_insertion_point(field_release:szengine.FindPathByEntityIdRequest.avoidEntityIds)
  return avoidentityids_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void FindPathByEntityIdRequest::set_allocated_avoidentityids(std::string* avoidentityids) {
  if (avoidentityids != nullptr) {
    
  } else {
    
  }
  avoidentityids_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), avoidentityids,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:szengine.FindPathByEntityIdRequest.avoidEntityIds)
}
inline std::string* FindPathByEntityIdRequest::unsafe_arena_release_avoidentityids() {
  // @@protoc_insertion_point(field_unsafe_arena_release:szengine.FindPathByEntityIdRequest.avoidEntityIds)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return avoidentityids_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void FindPathByEntityIdRequest::unsafe_arena_set_allocated_avoidentityids(
    std::string* avoidentityids) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (avoidentityids != nullptr) {
    
  } else {
    
  }
  avoidentityids_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      avoidentityids, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:szengine.FindPathByEntityIdRequest.avoidEntityIds)
}

// string requiredDataSources = 5;
inline void FindPathByEntityIdRequest::clear_requireddatasources() {
  requireddatasources_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& FindPathByEntityIdRequest::requireddatasources() const {
  // @@protoc_insertion_point(field_get:szengine.FindPathByEntityIdRequest.requiredDataSources)
  return _internal_requireddatasources();
}
inline void FindPathByEntityIdRequest::set_requireddatasources(const std::string& value) {
  _internal_set_requireddatasources(value);
  // @@protoc_insertion_point(field_set:szengine.FindPathByEntityIdRequest.requiredDataSources)
}
inline std::string* FindPathByEntityIdRequest::mutable_requireddatasources() {
  // @@protoc_insertion_point(field_mutable:szengine.FindPathByEntityIdRequest.requiredDataSources)
  return _internal_mutable_requireddatasources();
}
inline const std::string& FindPathByEntityIdRequest::_internal_requireddatasources() const {
  return requireddatasources_.Get();
}
inline void FindPathByEntityIdRequest::_internal_set_requireddatasources(const std::string& value) {
  
  requireddatasources_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void FindPathByEntityIdRequest::set_requireddatasources(std::string&& value) {
  
  requireddatasources_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:szengine.FindPathByEntityIdRequest.requiredDataSources)
}
inline void FindPathByEntityIdRequest::set_requireddatasources(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  requireddatasources_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:szengine.FindPathByEntityIdRequest.requiredDataSources)
}
inline void FindPathByEntityIdRequest::set_requireddatasources(const char* value,
    size_t size) {
  
  requireddatasources_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:szengine.FindPathByEntityIdRequest.requiredDataSources)
}
inline std::string* FindPathByEntityIdRequest::_internal_mutable_requireddatasources() {
  
  return requireddatasources_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* FindPathByEntityIdRequest::release_requireddatasources() {
  // @@protoc_insertion_point(field_release:szengine.FindPathByEntityIdRequest.requiredDataSources)
  return requireddatasources_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void FindPathByEntityIdRequest::set_allocated_requireddatasources(std::string* requireddatasources) {
  if (requireddatasources != nullptr) {
    
  } else {
    
  }
  requireddatasources_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), requireddatasources,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:szengine.FindPathByEntityIdRequest.requiredDataSources)
}
inline std::string* FindPathByEntityIdRequest::unsafe_arena_release_requireddatasources() {
  // @@protoc_insertion_point(field_unsafe_arena_release:szengine.FindPathByEntityIdRequest.requiredDataSources)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return requireddatasources_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void FindPathByEntityIdRequest::unsafe_arena_set_allocated_requireddatasources(
    std::string* requireddatasources) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (requireddatasources != nullptr) {
    
  } else {
    
  }
  requireddatasources_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      requireddatasources, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:szengine.FindPathByEntityIdRequest.requiredDataSources)
}

// int64 flags = 6;
inline void FindPathByEntityIdRequest::clear_flags() {
  flags_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 FindPathByEntityIdRequest::_internal_flags() const {
  return flags_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 FindPathByEntityIdRequest::flags() const {
  // @@protoc_insertion_point(field_get:szengine.FindPathByEntityIdRequest.flags)
  return _internal_flags();
}
inline void FindPathByEntityIdRequest::_internal_set_flags(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  flags_ = value;
}
inline void FindPathByEntityIdRequest::set_flags(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_flags(value);
  // @@protoc_insertion_point(field_set:szengine.FindPathByEntityIdRequest.flags)
}

// -------------------------------------------------------------------

// FindPathByEntityIdResponse

// string result = 1;
inline void FindPathByEntityIdResponse::clear_result() {
  result_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& FindPathByEntityIdResponse::result() const {
  // @@protoc_insertion_point(field_get:szengine.FindPathByEntityIdResponse.result)
  return _internal_result();
}
inline void FindPathByEntityIdResponse::set_result(const std::string& value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:szengine.FindPathByEntityIdResponse.result)
}
inline std::string* FindPathByEntityIdResponse::mutable_result() {
  // @@protoc_insertion_point(field_mutable:szengine.FindPathByEntityIdResponse.result)
  return _internal_mutable_result();
}
inline const std::string& FindPathByEntityIdResponse::_internal_result() const {
  return result_.Get();
}
inline void FindPathByEntityIdResponse::_internal_set_result(const std::string& value) {
  
  result_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void FindPathByEntityIdResponse::set_result(std::string&& value) {
  
  result_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:szengine.FindPathByEntityIdResponse.result)
}
inline void FindPathByEntityIdResponse::set_result(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  result_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:szengine.FindPathByEntityIdResponse.result)
}
inline void FindPathByEntityIdResponse::set_result(const char* value,
    size_t size) {
  
  result_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:szengine.FindPathByEntityIdResponse.result)
}
inline std::string* FindPathByEntityIdResponse::_internal_mutable_result() {
  
  return result_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* FindPathByEntityIdResponse::release_result() {
  // @@protoc_insertion_point(field_release:szengine.FindPathByEntityIdResponse.result)
  return result_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void FindPathByEntityIdResponse::set_allocated_result(std::string* result) {
  if (result != nullptr) {
    
  } else {
    
  }
  result_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), result,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:szengine.FindPathByEntityIdResponse.result)
}
inline std::string* FindPathByEntityIdResponse::unsafe_arena_release_result() {
  // @@protoc_insertion_point(field_unsafe_arena_release:szengine.FindPathByEntityIdResponse.result)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return result_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void FindPathByEntityIdResponse::unsafe_arena_set_allocated_result(
    std::string* result) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (result != nullptr) {
    
  } else {
    
  }
  result_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      result, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:szengine.FindPathByEntityIdResponse.result)
}

// -------------------------------------------------------------------

// FindPathByRecordIdRequest

// string startDataSourceCode = 1;
inline void FindPathByRecordIdRequest::clear_startdatasourcecode() {
  startdatasourcecode_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& FindPathByRecordIdRequest::startdatasourcecode() const {
  // @@protoc_insertion_point(field_get:szengine.FindPathByRecordIdRequest.startDataSourceCode)
  return _internal_startdatasourcecode();
}
inline void FindPathByRecordIdRequest::set_startdatasourcecode(const std::string& value) {
  _internal_set_startdatasourcecode(value);
  // @@protoc_insertion_point(field_set:szengine.FindPathByRecordIdRequest.startDataSourceCode)
}
inline std::string* FindPathByRecordIdRequest::mutable_startdatasourcecode() {
  // @@protoc_insertion_point(field_mutable:szengine.FindPathByRecordIdRequest.startDataSourceCode)
  return _internal_mutable_startdatasourcecode();
}
inline const std::string& FindPathByRecordIdRequest::_internal_startdatasourcecode() const {
  return startdatasourcecode_.Get();
}
inline void FindPathByRecordIdRequest::_internal_set_startdatasourcecode(const std::string& value) {
  
  startdatasourcecode_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void FindPathByRecordIdRequest::set_startdatasourcecode(std::string&& value) {
  
  startdatasourcecode_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:szengine.FindPathByRecordIdRequest.startDataSourceCode)
}
inline void FindPathByRecordIdRequest::set_startdatasourcecode(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  startdatasourcecode_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:szengine.FindPathByRecordIdRequest.startDataSourceCode)
}
inline void FindPathByRecordIdRequest::set_startdatasourcecode(const char* value,
    size_t size) {
  
  startdatasourcecode_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:szengine.FindPathByRecordIdRequest.startDataSourceCode)
}
inline std::string* FindPathByRecordIdRequest::_internal_mutable_startdatasourcecode() {
  
  return startdatasourcecode_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* FindPathByRecordIdRequest::release_startdatasourcecode() {
  // @@protoc_insertion_point(field_release:szengine.FindPathByRecordIdRequest.startDataSourceCode)
  return startdatasourcecode_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void FindPathByRecordIdRequest::set_allocated_startdatasourcecode(std::string* startdatasourcecode) {
  if (startdatasourcecode != nullptr) {
    
  } else {
    
  }
  startdatasourcecode_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), startdatasourcecode,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:szengine.FindPathByRecordIdRequest.startDataSourceCode)
}
inline std::string* FindPathByRecordIdRequest::unsafe_arena_release_startdatasourcecode() {
  // @@protoc_insertion_point(field_unsafe_arena_release:szengine.FindPathByRecordIdRequest.startDataSourceCode)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return startdatasourcecode_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void FindPathByRecordIdRequest::unsafe_arena_set_allocated_startdatasourcecode(
    std::string* startdatasourcecode) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (startdatasourcecode != nullptr) {
    
  } else {
    
  }
  startdatasourcecode_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      startdatasourcecode, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:szengine.FindPathByRecordIdRequest.startDataSourceCode)
}

// string startRecordId = 2;
inline void FindPathByRecordIdRequest::clear_startrecordid() {
  startrecordid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& FindPathByRecordIdRequest::startrecordid() const {
  // @@protoc_insertion_point(field_get:szengine.FindPathByRecordIdRequest.startRecordId)
  return _internal_startrecordid();
}
inline void FindPathByRecordIdRequest::set_startrecordid(const std::string& value) {
  _internal_set_startrecordid(value);
  // @@protoc_insertion_point(field_set:szengine.FindPathByRecordIdRequest.startRecordId)
}
inline std::string* FindPathByRecordIdRequest::mutable_startrecordid() {
  // @@protoc_insertion_point(field_mutable:szengine.FindPathByRecordIdRequest.startRecordId)
  return _internal_mutable_startrecordid();
}
inline const std::string& FindPathByRecordIdRequest::_internal_startrecordid() const {
  return startrecordid_.Get();
}
inline void FindPathByRecordIdRequest::_internal_set_startrecordid(const std::string& value) {
  
  startrecordid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void FindPathByRecordIdRequest::set_startrecordid(std::string&& value) {
  
  startrecordid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:szengine.FindPathByRecordIdRequest.startRecordId)
}
inline void FindPathByRecordIdRequest::set_startrecordid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  startrecordid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:szengine.FindPathByRecordIdRequest.startRecordId)
}
inline void FindPathByRecordIdRequest::set_startrecordid(const char* value,
    size_t size) {
  
  startrecordid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:szengine.FindPathByRecordIdRequest.startRecordId)
}
inline std::string* FindPathByRecordIdRequest::_internal_mutable_startrecordid() {
  
  return startrecordid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* FindPathByRecordIdRequest::release_startrecordid() {
  // @@protoc_insertion_point(field_release:szengine.FindPathByRecordIdRequest.startRecordId)
  return startrecordid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void FindPathByRecordIdRequest::set_allocated_startrecordid(std::string* startrecordid) {
  if (startrecordid != nullptr) {
    
  } else {
    
  }
  startrecordid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), startrecordid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:szengine.FindPathByRecordIdRequest.startRecordId)
}
inline std::string* FindPathByRecordIdRequest::unsafe_arena_release_startrecordid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:szengine.FindPathByRecordIdRequest.startRecordId)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return startrecordid_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void FindPathByRecordIdRequest::unsafe_arena_set_allocated_startrecordid(
    std::string* startrecordid) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (startrecordid != nullptr) {
    
  } else {
    
  }
  startrecordid_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      startrecordid, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:szengine.FindPathByRecordIdRequest.startRecordId)
}

// string endDataSourceCode = 3;
inline void FindPathByRecordIdRequest::clear_enddatasourcecode() {
  enddatasourcecode_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& FindPathByRecordIdRequest::enddatasourcecode() const {
  // @@protoc_insertion_point(field_get:szengine.FindPathByRecordIdRequest.endDataSourceCode)
  return _internal_enddatasourcecode();
}
inline void FindPathByRecordIdRequest::set_enddatasourcecode(const std::string& value) {
  _internal_set_enddatasourcecode(value);
  // @@protoc_insertion_point(field_set:szengine.FindPathByRecordIdRequest.endDataSourceCode)
}
inline std::string* FindPathByRecordIdRequest::mutable_enddatasourcecode() {
  // @@protoc_insertion_point(field_mutable:szengine.FindPathByRecordIdRequest.endDataSourceCode)
  return _internal_mutable_enddatasourcecode();
}
inline const std::string& FindPathByRecordIdRequest::_internal_enddatasourcecode() const {
  return enddatasourcecode_.Get();
}
inline void FindPathByRecordIdRequest::_internal_set_enddatasourcecode(const std::string& value) {
  
  enddatasourcecode_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void FindPathByRecordIdRequest::set_enddatasourcecode(std::string&& value) {
  
  enddatasourcecode_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:szengine.FindPathByRecordIdRequest.endDataSourceCode)
}
inline void FindPathByRecordIdRequest::set_enddatasourcecode(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  enddatasourcecode_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:szengine.FindPathByRecordIdRequest.endDataSourceCode)
}
inline void FindPathByRecordIdRequest::set_enddatasourcecode(const char* value,
    size_t size) {
  
  enddatasourcecode_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:szengine.FindPathByRecordIdRequest.endDataSourceCode)
}
inline std::string* FindPathByRecordIdRequest::_internal_mutable_enddatasourcecode() {
  
  return enddatasourcecode_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* FindPathByRecordIdRequest::release_enddatasourcecode() {
  // @@protoc_insertion_point(field_release:szengine.FindPathByRecordIdRequest.endDataSourceCode)
  return enddatasourcecode_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void FindPathByRecordIdRequest::set_allocated_enddatasourcecode(std::string* enddatasourcecode) {
  if (enddatasourcecode != nullptr) {
    
  } else {
    
  }
  enddatasourcecode_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), enddatasourcecode,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:szengine.FindPathByRecordIdRequest.endDataSourceCode)
}
inline std::string* FindPathByRecordIdRequest::unsafe_arena_release_enddatasourcecode() {
  // @@protoc_insertion_point(field_unsafe_arena_release:szengine.FindPathByRecordIdRequest.endDataSourceCode)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return enddatasourcecode_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void FindPathByRecordIdRequest::unsafe_arena_set_allocated_enddatasourcecode(
    std::string* enddatasourcecode) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (enddatasourcecode != nullptr) {
    
  } else {
    
  }
  enddatasourcecode_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      enddatasourcecode, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:szengine.FindPathByRecordIdRequest.endDataSourceCode)
}

// string endRecordId = 4;
inline void FindPathByRecordIdRequest::clear_endrecordid() {
  endrecordid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& FindPathByRecordIdRequest::endrecordid() const {
  // @@protoc_insertion_point(field_get:szengine.FindPathByRecordIdRequest.endRecordId)
  return _internal_endrecordid();
}
inline void FindPathByRecordIdRequest::set_endrecordid(const std::string& value) {
  _internal_set_endrecordid(value);
  // @@protoc_insertion_point(field_set:szengine.FindPathByRecordIdRequest.endRecordId)
}
inline std::string* FindPathByRecordIdRequest::mutable_endrecordid() {
  // @@protoc_insertion_point(field_mutable:szengine.FindPathByRecordIdRequest.endRecordId)
  return _internal_mutable_endrecordid();
}
inline const std::string& FindPathByRecordIdRequest::_internal_endrecordid() const {
  return endrecordid_.Get();
}
inline void FindPathByRecordIdRequest::_internal_set_endrecordid(const std::string& value) {
  
  endrecordid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void FindPathByRecordIdRequest::set_endrecordid(std::string&& value) {
  
  endrecordid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:szengine.FindPathByRecordIdRequest.endRecordId)
}
inline void FindPathByRecordIdRequest::set_endrecordid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  endrecordid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:szengine.FindPathByRecordIdRequest.endRecordId)
}
inline void FindPathByRecordIdRequest::set_endrecordid(const char* value,
    size_t size) {
  
  endrecordid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:szengine.FindPathByRecordIdRequest.endRecordId)
}
inline std::string* FindPathByRecordIdRequest::_internal_mutable_endrecordid() {
  
  return endrecordid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* FindPathByRecordIdRequest::release_endrecordid() {
  // @@protoc_insertion_point(field_release:szengine.FindPathByRecordIdRequest.endRecordId)
  return endrecordid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void FindPathByRecordIdRequest::set_allocated_endrecordid(std::string* endrecordid) {
  if (endrecordid != nullptr) {
    
  } else {
    
  }
  endrecordid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), endrecordid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:szengine.FindPathByRecordIdRequest.endRecordId)
}
inline std::string* FindPathByRecordIdRequest::unsafe_arena_release_endrecordid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:szengine.FindPathByRecordIdRequest.endRecordId)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return endrecordid_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void FindPathByRecordIdRequest::unsafe_arena_set_allocated_endrecordid(
    std::string* endrecordid) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (endrecordid != nullptr) {
    
  } else {
    
  }
  endrecordid_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      endrecordid, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:szengine.FindPathByRecordIdRequest.endRecordId)
}

// int64 maxDegrees = 5;
inline void FindPathByRecordIdRequest::clear_maxdegrees() {
  maxdegrees_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 FindPathByRecordIdRequest::_internal_maxdegrees() const {
  return maxdegrees_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 FindPathByRecordIdRequest::maxdegrees() const {
  // @@protoc_insertion_point(field_get:szengine.FindPathByRecordIdRequest.maxDegrees)
  return _internal_maxdegrees();
}
inline void FindPathByRecordIdRequest::_internal_set_maxdegrees(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  maxdegrees_ = value;
}
inline void FindPathByRecordIdRequest::set_maxdegrees(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_maxdegrees(value);
  // @@protoc_insertion_point(field_set:szengine.FindPathByRecordIdRequest.maxDegrees)
}

// string avoidRecordKeys = 6;
inline void FindPathByRecordIdRequest::clear_avoidrecordkeys() {
  avoidrecordkeys_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& FindPathByRecordIdRequest::avoidrecordkeys() const {
  // @@protoc_insertion_point(field_get:szengine.FindPathByRecordIdRequest.avoidRecordKeys)
  return _internal_avoidrecordkeys();
}
inline void FindPathByRecordIdRequest::set_avoidrecordkeys(const std::string& value) {
  _internal_set_avoidrecordkeys(value);
  // @@protoc_insertion_point(field_set:szengine.FindPathByRecordIdRequest.avoidRecordKeys)
}
inline std::string* FindPathByRecordIdRequest::mutable_avoidrecordkeys() {
  // @@protoc_insertion_point(field_mutable:szengine.FindPathByRecordIdRequest.avoidRecordKeys)
  return _internal_mutable_avoidrecordkeys();
}
inline const std::string& FindPathByRecordIdRequest::_internal_avoidrecordkeys() const {
  return avoidrecordkeys_.Get();
}
inline void FindPathByRecordIdRequest::_internal_set_avoidrecordkeys(const std::string& value) {
  
  avoidrecordkeys_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void FindPathByRecordIdRequest::set_avoidrecordkeys(std::string&& value) {
  
  avoidrecordkeys_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:szengine.FindPathByRecordIdRequest.avoidRecordKeys)
}
inline void FindPathByRecordIdRequest::set_avoidrecordkeys(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  avoidrecordkeys_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:szengine.FindPathByRecordIdRequest.avoidRecordKeys)
}
inline void FindPathByRecordIdRequest::set_avoidrecordkeys(const char* value,
    size_t size) {
  
  avoidrecordkeys_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:szengine.FindPathByRecordIdRequest.avoidRecordKeys)
}
inline std::string* FindPathByRecordIdRequest::_internal_mutable_avoidrecordkeys() {
  
  return avoidrecordkeys_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* FindPathByRecordIdRequest::release_avoidrecordkeys() {
  // @@protoc_insertion_point(field_release:szengine.FindPathByRecordIdRequest.avoidRecordKeys)
  return avoidrecordkeys_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void FindPathByRecordIdRequest::set_allocated_avoidrecordkeys(std::string* avoidrecordkeys) {
  if (avoidrecordkeys != nullptr) {
    
  } else {
    
  }
  avoidrecordkeys_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), avoidrecordkeys,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:szengine.FindPathByRecordIdRequest.avoidRecordKeys)
}
inline std::string* FindPathByRecordIdRequest::unsafe_arena_release_avoidrecordkeys() {
  // @@protoc_insertion_point(field_unsafe_arena_release:szengine.FindPathByRecordIdRequest.avoidRecordKeys)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return avoidrecordkeys_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void FindPathByRecordIdRequest::unsafe_arena_set_allocated_avoidrecordkeys(
    std::string* avoidrecordkeys) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (avoidrecordkeys != nullptr) {
    
  } else {
    
  }
  avoidrecordkeys_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      avoidrecordkeys, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:szengine.FindPathByRecordIdRequest.avoidRecordKeys)
}

// string requiredDataSources = 7;
inline void FindPathByRecordIdRequest::clear_requireddatasources() {
  requireddatasources_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& FindPathByRecordIdRequest::requireddatasources() const {
  // @@protoc_insertion_point(field_get:szengine.FindPathByRecordIdRequest.requiredDataSources)
  return _internal_requireddatasources();
}
inline void FindPathByRecordIdRequest::set_requireddatasources(const std::string& value) {
  _internal_set_requireddatasources(value);
  // @@protoc_insertion_point(field_set:szengine.FindPathByRecordIdRequest.requiredDataSources)
}
inline std::string* FindPathByRecordIdRequest::mutable_requireddatasources() {
  // @@protoc_insertion_point(field_mutable:szengine.FindPathByRecordIdRequest.requiredDataSources)
  return _internal_mutable_requireddatasources();
}
inline const std::string& FindPathByRecordIdRequest::_internal_requireddatasources() const {
  return requireddatasources_.Get();
}
inline void FindPathByRecordIdRequest::_internal_set_requireddatasources(const std::string& value) {
  
  requireddatasources_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void FindPathByRecordIdRequest::set_requireddatasources(std::string&& value) {
  
  requireddatasources_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:szengine.FindPathByRecordIdRequest.requiredDataSources)
}
inline void FindPathByRecordIdRequest::set_requireddatasources(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  requireddatasources_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:szengine.FindPathByRecordIdRequest.requiredDataSources)
}
inline void FindPathByRecordIdRequest::set_requireddatasources(const char* value,
    size_t size) {
  
  requireddatasources_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:szengine.FindPathByRecordIdRequest.requiredDataSources)
}
inline std::string* FindPathByRecordIdRequest::_internal_mutable_requireddatasources() {
  
  return requireddatasources_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* FindPathByRecordIdRequest::release_requireddatasources() {
  // @@protoc_insertion_point(field_release:szengine.FindPathByRecordIdRequest.requiredDataSources)
  return requireddatasources_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void FindPathByRecordIdRequest::set_allocated_requireddatasources(std::string* requireddatasources) {
  if (requireddatasources != nullptr) {
    
  } else {
    
  }
  requireddatasources_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), requireddatasources,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:szengine.FindPathByRecordIdRequest.requiredDataSources)
}
inline std::string* FindPathByRecordIdRequest::unsafe_arena_release_requireddatasources() {
  // @@protoc_insertion_point(field_unsafe_arena_release:szengine.FindPathByRecordIdRequest.requiredDataSources)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return requireddatasources_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void FindPathByRecordIdRequest::unsafe_arena_set_allocated_requireddatasources(
    std::string* requireddatasources) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (requireddatasources != nullptr) {
    
  } else {
    
  }
  requireddatasources_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      requireddatasources, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:szengine.FindPathByRecordIdRequest.requiredDataSources)
}

// int64 flags = 8;
inline void FindPathByRecordIdRequest::clear_flags() {
  flags_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 FindPathByRecordIdRequest::_internal_flags() const {
  return flags_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 FindPathByRecordIdRequest::flags() const {
  // @@protoc_insertion_point(field_get:szengine.FindPathByRecordIdRequest.flags)
  return _internal_flags();
}
inline void FindPathByRecordIdRequest::_internal_set_flags(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  flags_ = value;
}
inline void FindPathByRecordIdRequest::set_flags(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_flags(value);
  // @@protoc_insertion_point(field_set:szengine.FindPathByRecordIdRequest.flags)
}

// -------------------------------------------------------------------

// FindPathByRecordIdResponse

// string result = 1;
inline void FindPathByRecordIdResponse::clear_result() {
  result_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& FindPathByRecordIdResponse::result() const {
  // @@protoc_insertion_point(field_get:szengine.FindPathByRecordIdResponse.result)
  return _internal_result();
}
inline void FindPathByRecordIdResponse::set_result(const std::string& value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:szengine.FindPathByRecordIdResponse.result)
}
inline std::string* FindPathByRecordIdResponse::mutable_result() {
  // @@protoc_insertion_point(field_mutable:szengine.FindPathByRecordIdResponse.result)
  return _internal_mutable_result();
}
inline const std::string& FindPathByRecordIdResponse::_internal_result() const {
  return result_.Get();
}
inline void FindPathByRecordIdResponse::_internal_set_result(const std::string& value) {
  
  result_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void FindPathByRecordIdResponse::set_result(std::string&& value) {
  
  result_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:szengine.FindPathByRecordIdResponse.result)
}
inline void FindPathByRecordIdResponse::set_result(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  result_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:szengine.FindPathByRecordIdResponse.result)
}
inline void FindPathByRecordIdResponse::set_result(const char* value,
    size_t size) {
  
  result_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:szengine.FindPathByRecordIdResponse.result)
}
inline std::string* FindPathByRecordIdResponse::_internal_mutable_result() {
  
  return result_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* FindPathByRecordIdResponse::release_result() {
  // @@protoc_insertion_point(field_release:szengine.FindPathByRecordIdResponse.result)
  return result_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void FindPathByRecordIdResponse::set_allocated_result(std::string* result) {
  if (result != nullptr) {
    
  } else {
    
  }
  result_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), result,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:szengine.FindPathByRecordIdResponse.result)
}
inline std::string* FindPathByRecordIdResponse::unsafe_arena_release_result() {
  // @@protoc_insertion_point(field_unsafe_arena_release:szengine.FindPathByRecordIdResponse.result)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return result_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void FindPathByRecordIdResponse::unsafe_arena_set_allocated_result(
    std::string* result) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (result != nullptr) {
    
  } else {
    
  }
  result_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      result, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:szengine.FindPathByRecordIdResponse.result)
}

// -------------------------------------------------------------------

// GetActiveConfigIdRequest

// -------------------------------------------------------------------

// GetActiveConfigIdResponse

// int64 result = 1;
inline void GetActiveConfigIdResponse::clear_result() {
  result_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GetActiveConfigIdResponse::_internal_result() const {
  return result_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GetActiveConfigIdResponse::result() const {
  // @@protoc_insertion_point(field_get:szengine.GetActiveConfigIdResponse.result)
  return _internal_result();
}
inline void GetActiveConfigIdResponse::_internal_set_result(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  result_ = value;
}
inline void GetActiveConfigIdResponse::set_result(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:szengine.GetActiveConfigIdResponse.result)
}

// -------------------------------------------------------------------

// GetEntityByEntityIdRequest

// int64 entityId = 1;
inline void GetEntityByEntityIdRequest::clear_entityid() {
  entityid_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GetEntityByEntityIdRequest::_internal_entityid() const {
  return entityid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GetEntityByEntityIdRequest::entityid() const {
  // @@protoc_insertion_point(field_get:szengine.GetEntityByEntityIdRequest.entityId)
  return _internal_entityid();
}
inline void GetEntityByEntityIdRequest::_internal_set_entityid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  entityid_ = value;
}
inline void GetEntityByEntityIdRequest::set_entityid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_entityid(value);
  // @@protoc_insertion_point(field_set:szengine.GetEntityByEntityIdRequest.entityId)
}

// int64 flags = 2;
inline void GetEntityByEntityIdRequest::clear_flags() {
  flags_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GetEntityByEntityIdRequest::_internal_flags() const {
  return flags_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GetEntityByEntityIdRequest::flags() const {
  // @@protoc_insertion_point(field_get:szengine.GetEntityByEntityIdRequest.flags)
  return _internal_flags();
}
inline void GetEntityByEntityIdRequest::_internal_set_flags(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  flags_ = value;
}
inline void GetEntityByEntityIdRequest::set_flags(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_flags(value);
  // @@protoc_insertion_point(field_set:szengine.GetEntityByEntityIdRequest.flags)
}

// -------------------------------------------------------------------

// GetEntityByEntityIdResponse

// string result = 1;
inline void GetEntityByEntityIdResponse::clear_result() {
  result_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GetEntityByEntityIdResponse::result() const {
  // @@protoc_insertion_point(field_get:szengine.GetEntityByEntityIdResponse.result)
  return _internal_result();
}
inline void GetEntityByEntityIdResponse::set_result(const std::string& value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:szengine.GetEntityByEntityIdResponse.result)
}
inline std::string* GetEntityByEntityIdResponse::mutable_result() {
  // @@protoc_insertion_point(field_mutable:szengine.GetEntityByEntityIdResponse.result)
  return _internal_mutable_result();
}
inline const std::string& GetEntityByEntityIdResponse::_internal_result() const {
  return result_.Get();
}
inline void GetEntityByEntityIdResponse::_internal_set_result(const std::string& value) {
  
  result_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetEntityByEntityIdResponse::set_result(std::string&& value) {
  
  result_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:szengine.GetEntityByEntityIdResponse.result)
}
inline void GetEntityByEntityIdResponse::set_result(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  result_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:szengine.GetEntityByEntityIdResponse.result)
}
inline void GetEntityByEntityIdResponse::set_result(const char* value,
    size_t size) {
  
  result_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:szengine.GetEntityByEntityIdResponse.result)
}
inline std::string* GetEntityByEntityIdResponse::_internal_mutable_result() {
  
  return result_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetEntityByEntityIdResponse::release_result() {
  // @@protoc_insertion_point(field_release:szengine.GetEntityByEntityIdResponse.result)
  return result_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetEntityByEntityIdResponse::set_allocated_result(std::string* result) {
  if (result != nullptr) {
    
  } else {
    
  }
  result_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), result,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:szengine.GetEntityByEntityIdResponse.result)
}
inline std::string* GetEntityByEntityIdResponse::unsafe_arena_release_result() {
  // @@protoc_insertion_point(field_unsafe_arena_release:szengine.GetEntityByEntityIdResponse.result)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return result_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void GetEntityByEntityIdResponse::unsafe_arena_set_allocated_result(
    std::string* result) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (result != nullptr) {
    
  } else {
    
  }
  result_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      result, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:szengine.GetEntityByEntityIdResponse.result)
}

// -------------------------------------------------------------------

// GetEntityByRecordIdRequest

// string dataSourceCode = 1;
inline void GetEntityByRecordIdRequest::clear_datasourcecode() {
  datasourcecode_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GetEntityByRecordIdRequest::datasourcecode() const {
  // @@protoc_insertion_point(field_get:szengine.GetEntityByRecordIdRequest.dataSourceCode)
  return _internal_datasourcecode();
}
inline void GetEntityByRecordIdRequest::set_datasourcecode(const std::string& value) {
  _internal_set_datasourcecode(value);
  // @@protoc_insertion_point(field_set:szengine.GetEntityByRecordIdRequest.dataSourceCode)
}
inline std::string* GetEntityByRecordIdRequest::mutable_datasourcecode() {
  // @@protoc_insertion_point(field_mutable:szengine.GetEntityByRecordIdRequest.dataSourceCode)
  return _internal_mutable_datasourcecode();
}
inline const std::string& GetEntityByRecordIdRequest::_internal_datasourcecode() const {
  return datasourcecode_.Get();
}
inline void GetEntityByRecordIdRequest::_internal_set_datasourcecode(const std::string& value) {
  
  datasourcecode_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetEntityByRecordIdRequest::set_datasourcecode(std::string&& value) {
  
  datasourcecode_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:szengine.GetEntityByRecordIdRequest.dataSourceCode)
}
inline void GetEntityByRecordIdRequest::set_datasourcecode(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  datasourcecode_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:szengine.GetEntityByRecordIdRequest.dataSourceCode)
}
inline void GetEntityByRecordIdRequest::set_datasourcecode(const char* value,
    size_t size) {
  
  datasourcecode_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:szengine.GetEntityByRecordIdRequest.dataSourceCode)
}
inline std::string* GetEntityByRecordIdRequest::_internal_mutable_datasourcecode() {
  
  return datasourcecode_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetEntityByRecordIdRequest::release_datasourcecode() {
  // @@protoc_insertion_point(field_release:szengine.GetEntityByRecordIdRequest.dataSourceCode)
  return datasourcecode_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetEntityByRecordIdRequest::set_allocated_datasourcecode(std::string* datasourcecode) {
  if (datasourcecode != nullptr) {
    
  } else {
    
  }
  datasourcecode_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), datasourcecode,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:szengine.GetEntityByRecordIdRequest.dataSourceCode)
}
inline std::string* GetEntityByRecordIdRequest::unsafe_arena_release_datasourcecode() {
  // @@protoc_insertion_point(field_unsafe_arena_release:szengine.GetEntityByRecordIdRequest.dataSourceCode)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return datasourcecode_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void GetEntityByRecordIdRequest::unsafe_arena_set_allocated_datasourcecode(
    std::string* datasourcecode) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (datasourcecode != nullptr) {
    
  } else {
    
  }
  datasourcecode_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      datasourcecode, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:szengine.GetEntityByRecordIdRequest.dataSourceCode)
}

// string recordId = 2;
inline void GetEntityByRecordIdRequest::clear_recordid() {
  recordid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GetEntityByRecordIdRequest::recordid() const {
  // @@protoc_insertion_point(field_get:szengine.GetEntityByRecordIdRequest.recordId)
  return _internal_recordid();
}
inline void GetEntityByRecordIdRequest::set_recordid(const std::string& value) {
  _internal_set_recordid(value);
  // @@protoc_insertion_point(field_set:szengine.GetEntityByRecordIdRequest.recordId)
}
inline std::string* GetEntityByRecordIdRequest::mutable_recordid() {
  // @@protoc_insertion_point(field_mutable:szengine.GetEntityByRecordIdRequest.recordId)
  return _internal_mutable_recordid();
}
inline const std::string& GetEntityByRecordIdRequest::_internal_recordid() const {
  return recordid_.Get();
}
inline void GetEntityByRecordIdRequest::_internal_set_recordid(const std::string& value) {
  
  recordid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetEntityByRecordIdRequest::set_recordid(std::string&& value) {
  
  recordid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:szengine.GetEntityByRecordIdRequest.recordId)
}
inline void GetEntityByRecordIdRequest::set_recordid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  recordid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:szengine.GetEntityByRecordIdRequest.recordId)
}
inline void GetEntityByRecordIdRequest::set_recordid(const char* value,
    size_t size) {
  
  recordid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:szengine.GetEntityByRecordIdRequest.recordId)
}
inline std::string* GetEntityByRecordIdRequest::_internal_mutable_recordid() {
  
  return recordid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetEntityByRecordIdRequest::release_recordid() {
  // @@protoc_insertion_point(field_release:szengine.GetEntityByRecordIdRequest.recordId)
  return recordid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetEntityByRecordIdRequest::set_allocated_recordid(std::string* recordid) {
  if (recordid != nullptr) {
    
  } else {
    
  }
  recordid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), recordid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:szengine.GetEntityByRecordIdRequest.recordId)
}
inline std::string* GetEntityByRecordIdRequest::unsafe_arena_release_recordid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:szengine.GetEntityByRecordIdRequest.recordId)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return recordid_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void GetEntityByRecordIdRequest::unsafe_arena_set_allocated_recordid(
    std::string* recordid) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (recordid != nullptr) {
    
  } else {
    
  }
  recordid_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      recordid, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:szengine.GetEntityByRecordIdRequest.recordId)
}

// int64 flags = 3;
inline void GetEntityByRecordIdRequest::clear_flags() {
  flags_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GetEntityByRecordIdRequest::_internal_flags() const {
  return flags_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GetEntityByRecordIdRequest::flags() const {
  // @@protoc_insertion_point(field_get:szengine.GetEntityByRecordIdRequest.flags)
  return _internal_flags();
}
inline void GetEntityByRecordIdRequest::_internal_set_flags(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  flags_ = value;
}
inline void GetEntityByRecordIdRequest::set_flags(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_flags(value);
  // @@protoc_insertion_point(field_set:szengine.GetEntityByRecordIdRequest.flags)
}

// -------------------------------------------------------------------

// GetEntityByRecordIdResponse

// string result = 1;
inline void GetEntityByRecordIdResponse::clear_result() {
  result_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GetEntityByRecordIdResponse::result() const {
  // @@protoc_insertion_point(field_get:szengine.GetEntityByRecordIdResponse.result)
  return _internal_result();
}
inline void GetEntityByRecordIdResponse::set_result(const std::string& value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:szengine.GetEntityByRecordIdResponse.result)
}
inline std::string* GetEntityByRecordIdResponse::mutable_result() {
  // @@protoc_insertion_point(field_mutable:szengine.GetEntityByRecordIdResponse.result)
  return _internal_mutable_result();
}
inline const std::string& GetEntityByRecordIdResponse::_internal_result() const {
  return result_.Get();
}
inline void GetEntityByRecordIdResponse::_internal_set_result(const std::string& value) {
  
  result_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetEntityByRecordIdResponse::set_result(std::string&& value) {
  
  result_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:szengine.GetEntityByRecordIdResponse.result)
}
inline void GetEntityByRecordIdResponse::set_result(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  result_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:szengine.GetEntityByRecordIdResponse.result)
}
inline void GetEntityByRecordIdResponse::set_result(const char* value,
    size_t size) {
  
  result_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:szengine.GetEntityByRecordIdResponse.result)
}
inline std::string* GetEntityByRecordIdResponse::_internal_mutable_result() {
  
  return result_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetEntityByRecordIdResponse::release_result() {
  // @@protoc_insertion_point(field_release:szengine.GetEntityByRecordIdResponse.result)
  return result_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetEntityByRecordIdResponse::set_allocated_result(std::string* result) {
  if (result != nullptr) {
    
  } else {
    
  }
  result_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), result,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:szengine.GetEntityByRecordIdResponse.result)
}
inline std::string* GetEntityByRecordIdResponse::unsafe_arena_release_result() {
  // @@protoc_insertion_point(field_unsafe_arena_release:szengine.GetEntityByRecordIdResponse.result)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return result_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void GetEntityByRecordIdResponse::unsafe_arena_set_allocated_result(
    std::string* result) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (result != nullptr) {
    
  } else {
    
  }
  result_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      result, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:szengine.GetEntityByRecordIdResponse.result)
}

// -------------------------------------------------------------------

// GetRecordRequest

// string dataSourceCode = 1;
inline void GetRecordRequest::clear_datasourcecode() {
  datasourcecode_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GetRecordRequest::datasourcecode() const {
  // @@protoc_insertion_point(field_get:szengine.GetRecordRequest.dataSourceCode)
  return _internal_datasourcecode();
}
inline void GetRecordRequest::set_datasourcecode(const std::string& value) {
  _internal_set_datasourcecode(value);
  // @@protoc_insertion_point(field_set:szengine.GetRecordRequest.dataSourceCode)
}
inline std::string* GetRecordRequest::mutable_datasourcecode() {
  // @@protoc_insertion_point(field_mutable:szengine.GetRecordRequest.dataSourceCode)
  return _internal_mutable_datasourcecode();
}
inline const std::string& GetRecordRequest::_internal_datasourcecode() const {
  return datasourcecode_.Get();
}
inline void GetRecordRequest::_internal_set_datasourcecode(const std::string& value) {
  
  datasourcecode_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetRecordRequest::set_datasourcecode(std::string&& value) {
  
  datasourcecode_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:szengine.GetRecordRequest.dataSourceCode)
}
inline void GetRecordRequest::set_datasourcecode(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  datasourcecode_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:szengine.GetRecordRequest.dataSourceCode)
}
inline void GetRecordRequest::set_datasourcecode(const char* value,
    size_t size) {
  
  datasourcecode_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:szengine.GetRecordRequest.dataSourceCode)
}
inline std::string* GetRecordRequest::_internal_mutable_datasourcecode() {
  
  return datasourcecode_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetRecordRequest::release_datasourcecode() {
  // @@protoc_insertion_point(field_release:szengine.GetRecordRequest.dataSourceCode)
  return datasourcecode_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetRecordRequest::set_allocated_datasourcecode(std::string* datasourcecode) {
  if (datasourcecode != nullptr) {
    
  } else {
    
  }
  datasourcecode_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), datasourcecode,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:szengine.GetRecordRequest.dataSourceCode)
}
inline std::string* GetRecordRequest::unsafe_arena_release_datasourcecode() {
  // @@protoc_insertion_point(field_unsafe_arena_release:szengine.GetRecordRequest.dataSourceCode)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return datasourcecode_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void GetRecordRequest::unsafe_arena_set_allocated_datasourcecode(
    std::string* datasourcecode) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (datasourcecode != nullptr) {
    
  } else {
    
  }
  datasourcecode_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      datasourcecode, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:szengine.GetRecordRequest.dataSourceCode)
}

// string recordId = 2;
inline void GetRecordRequest::clear_recordid() {
  recordid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GetRecordRequest::recordid() const {
  // @@protoc_insertion_point(field_get:szengine.GetRecordRequest.recordId)
  return _internal_recordid();
}
inline void GetRecordRequest::set_recordid(const std::string& value) {
  _internal_set_recordid(value);
  // @@protoc_insertion_point(field_set:szengine.GetRecordRequest.recordId)
}
inline std::string* GetRecordRequest::mutable_recordid() {
  // @@protoc_insertion_point(field_mutable:szengine.GetRecordRequest.recordId)
  return _internal_mutable_recordid();
}
inline const std::string& GetRecordRequest::_internal_recordid() const {
  return recordid_.Get();
}
inline void GetRecordRequest::_internal_set_recordid(const std::string& value) {
  
  recordid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetRecordRequest::set_recordid(std::string&& value) {
  
  recordid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:szengine.GetRecordRequest.recordId)
}
inline void GetRecordRequest::set_recordid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  recordid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:szengine.GetRecordRequest.recordId)
}
inline void GetRecordRequest::set_recordid(const char* value,
    size_t size) {
  
  recordid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:szengine.GetRecordRequest.recordId)
}
inline std::string* GetRecordRequest::_internal_mutable_recordid() {
  
  return recordid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetRecordRequest::release_recordid() {
  // @@protoc_insertion_point(field_release:szengine.GetRecordRequest.recordId)
  return recordid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetRecordRequest::set_allocated_recordid(std::string* recordid) {
  if (recordid != nullptr) {
    
  } else {
    
  }
  recordid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), recordid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:szengine.GetRecordRequest.recordId)
}
inline std::string* GetRecordRequest::unsafe_arena_release_recordid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:szengine.GetRecordRequest.recordId)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return recordid_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void GetRecordRequest::unsafe_arena_set_allocated_recordid(
    std::string* recordid) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (recordid != nullptr) {
    
  } else {
    
  }
  recordid_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      recordid, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:szengine.GetRecordRequest.recordId)
}

// int64 flags = 3;
inline void GetRecordRequest::clear_flags() {
  flags_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GetRecordRequest::_internal_flags() const {
  return flags_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GetRecordRequest::flags() const {
  // @@protoc_insertion_point(field_get:szengine.GetRecordRequest.flags)
  return _internal_flags();
}
inline void GetRecordRequest::_internal_set_flags(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  flags_ = value;
}
inline void GetRecordRequest::set_flags(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_flags(value);
  // @@protoc_insertion_point(field_set:szengine.GetRecordRequest.flags)
}

// -------------------------------------------------------------------

// GetRecordResponse

// string result = 1;
inline void GetRecordResponse::clear_result() {
  result_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GetRecordResponse::result() const {
  // @@protoc_insertion_point(field_get:szengine.GetRecordResponse.result)
  return _internal_result();
}
inline void GetRecordResponse::set_result(const std::string& value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:szengine.GetRecordResponse.result)
}
inline std::string* GetRecordResponse::mutable_result() {
  // @@protoc_insertion_point(field_mutable:szengine.GetRecordResponse.result)
  return _internal_mutable_result();
}
inline const std::string& GetRecordResponse::_internal_result() const {
  return result_.Get();
}
inline void GetRecordResponse::_internal_set_result(const std::string& value) {
  
  result_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetRecordResponse::set_result(std::string&& value) {
  
  result_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:szengine.GetRecordResponse.result)
}
inline void GetRecordResponse::set_result(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  result_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:szengine.GetRecordResponse.result)
}
inline void GetRecordResponse::set_result(const char* value,
    size_t size) {
  
  result_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:szengine.GetRecordResponse.result)
}
inline std::string* GetRecordResponse::_internal_mutable_result() {
  
  return result_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetRecordResponse::release_result() {
  // @@protoc_insertion_point(field_release:szengine.GetRecordResponse.result)
  return result_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetRecordResponse::set_allocated_result(std::string* result) {
  if (result != nullptr) {
    
  } else {
    
  }
  result_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), result,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:szengine.GetRecordResponse.result)
}
inline std::string* GetRecordResponse::unsafe_arena_release_result() {
  // @@protoc_insertion_point(field_unsafe_arena_release:szengine.GetRecordResponse.result)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return result_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void GetRecordResponse::unsafe_arena_set_allocated_result(
    std::string* result) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (result != nullptr) {
    
  } else {
    
  }
  result_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      result, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:szengine.GetRecordResponse.result)
}

// -------------------------------------------------------------------

// GetRedoRecordRequest

// -------------------------------------------------------------------

// GetRedoRecordResponse

// string result = 1;
inline void GetRedoRecordResponse::clear_result() {
  result_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GetRedoRecordResponse::result() const {
  // @@protoc_insertion_point(field_get:szengine.GetRedoRecordResponse.result)
  return _internal_result();
}
inline void GetRedoRecordResponse::set_result(const std::string& value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:szengine.GetRedoRecordResponse.result)
}
inline std::string* GetRedoRecordResponse::mutable_result() {
  // @@protoc_insertion_point(field_mutable:szengine.GetRedoRecordResponse.result)
  return _internal_mutable_result();
}
inline const std::string& GetRedoRecordResponse::_internal_result() const {
  return result_.Get();
}
inline void GetRedoRecordResponse::_internal_set_result(const std::string& value) {
  
  result_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetRedoRecordResponse::set_result(std::string&& value) {
  
  result_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:szengine.GetRedoRecordResponse.result)
}
inline void GetRedoRecordResponse::set_result(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  result_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:szengine.GetRedoRecordResponse.result)
}
inline void GetRedoRecordResponse::set_result(const char* value,
    size_t size) {
  
  result_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:szengine.GetRedoRecordResponse.result)
}
inline std::string* GetRedoRecordResponse::_internal_mutable_result() {
  
  return result_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetRedoRecordResponse::release_result() {
  // @@protoc_insertion_point(field_release:szengine.GetRedoRecordResponse.result)
  return result_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetRedoRecordResponse::set_allocated_result(std::string* result) {
  if (result != nullptr) {
    
  } else {
    
  }
  result_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), result,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:szengine.GetRedoRecordResponse.result)
}
inline std::string* GetRedoRecordResponse::unsafe_arena_release_result() {
  // @@protoc_insertion_point(field_unsafe_arena_release:szengine.GetRedoRecordResponse.result)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return result_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void GetRedoRecordResponse::unsafe_arena_set_allocated_result(
    std::string* result) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (result != nullptr) {
    
  } else {
    
  }
  result_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      result, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:szengine.GetRedoRecordResponse.result)
}

// -------------------------------------------------------------------

// GetStatsRequest

// -------------------------------------------------------------------

// GetStatsResponse

// string result = 1;
inline void GetStatsResponse::clear_result() {
  result_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GetStatsResponse::result() const {
  // @@protoc_insertion_point(field_get:szengine.GetStatsResponse.result)
  return _internal_result();
}
inline void GetStatsResponse::set_result(const std::string& value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:szengine.GetStatsResponse.result)
}
inline std::string* GetStatsResponse::mutable_result() {
  // @@protoc_insertion_point(field_mutable:szengine.GetStatsResponse.result)
  return _internal_mutable_result();
}
inline const std::string& GetStatsResponse::_internal_result() const {
  return result_.Get();
}
inline void GetStatsResponse::_internal_set_result(const std::string& value) {
  
  result_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetStatsResponse::set_result(std::string&& value) {
  
  result_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:szengine.GetStatsResponse.result)
}
inline void GetStatsResponse::set_result(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  result_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:szengine.GetStatsResponse.result)
}
inline void GetStatsResponse::set_result(const char* value,
    size_t size) {
  
  result_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:szengine.GetStatsResponse.result)
}
inline std::string* GetStatsResponse::_internal_mutable_result() {
  
  return result_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetStatsResponse::release_result() {
  // @@protoc_insertion_point(field_release:szengine.GetStatsResponse.result)
  return result_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetStatsResponse::set_allocated_result(std::string* result) {
  if (result != nullptr) {
    
  } else {
    
  }
  result_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), result,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:szengine.GetStatsResponse.result)
}
inline std::string* GetStatsResponse::unsafe_arena_release_result() {
  // @@protoc_insertion_point(field_unsafe_arena_release:szengine.GetStatsResponse.result)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return result_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void GetStatsResponse::unsafe_arena_set_allocated_result(
    std::string* result) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (result != nullptr) {
    
  } else {
    
  }
  result_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      result, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:szengine.GetStatsResponse.result)
}

// -------------------------------------------------------------------

// GetVirtualEntityByRecordIdRequest

// string recordKeys = 1;
inline void GetVirtualEntityByRecordIdRequest::clear_recordkeys() {
  recordkeys_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GetVirtualEntityByRecordIdRequest::recordkeys() const {
  // @@protoc_insertion_point(field_get:szengine.GetVirtualEntityByRecordIdRequest.recordKeys)
  return _internal_recordkeys();
}
inline void GetVirtualEntityByRecordIdRequest::set_recordkeys(const std::string& value) {
  _internal_set_recordkeys(value);
  // @@protoc_insertion_point(field_set:szengine.GetVirtualEntityByRecordIdRequest.recordKeys)
}
inline std::string* GetVirtualEntityByRecordIdRequest::mutable_recordkeys() {
  // @@protoc_insertion_point(field_mutable:szengine.GetVirtualEntityByRecordIdRequest.recordKeys)
  return _internal_mutable_recordkeys();
}
inline const std::string& GetVirtualEntityByRecordIdRequest::_internal_recordkeys() const {
  return recordkeys_.Get();
}
inline void GetVirtualEntityByRecordIdRequest::_internal_set_recordkeys(const std::string& value) {
  
  recordkeys_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetVirtualEntityByRecordIdRequest::set_recordkeys(std::string&& value) {
  
  recordkeys_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:szengine.GetVirtualEntityByRecordIdRequest.recordKeys)
}
inline void GetVirtualEntityByRecordIdRequest::set_recordkeys(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  recordkeys_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:szengine.GetVirtualEntityByRecordIdRequest.recordKeys)
}
inline void GetVirtualEntityByRecordIdRequest::set_recordkeys(const char* value,
    size_t size) {
  
  recordkeys_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:szengine.GetVirtualEntityByRecordIdRequest.recordKeys)
}
inline std::string* GetVirtualEntityByRecordIdRequest::_internal_mutable_recordkeys() {
  
  return recordkeys_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetVirtualEntityByRecordIdRequest::release_recordkeys() {
  // @@protoc_insertion_point(field_release:szengine.GetVirtualEntityByRecordIdRequest.recordKeys)
  return recordkeys_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetVirtualEntityByRecordIdRequest::set_allocated_recordkeys(std::string* recordkeys) {
  if (recordkeys != nullptr) {
    
  } else {
    
  }
  recordkeys_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), recordkeys,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:szengine.GetVirtualEntityByRecordIdRequest.recordKeys)
}
inline std::string* GetVirtualEntityByRecordIdRequest::unsafe_arena_release_recordkeys() {
  // @@protoc_insertion_point(field_unsafe_arena_release:szengine.GetVirtualEntityByRecordIdRequest.recordKeys)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return recordkeys_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void GetVirtualEntityByRecordIdRequest::unsafe_arena_set_allocated_recordkeys(
    std::string* recordkeys) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (recordkeys != nullptr) {
    
  } else {
    
  }
  recordkeys_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      recordkeys, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:szengine.GetVirtualEntityByRecordIdRequest.recordKeys)
}

// int64 flags = 2;
inline void GetVirtualEntityByRecordIdRequest::clear_flags() {
  flags_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GetVirtualEntityByRecordIdRequest::_internal_flags() const {
  return flags_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GetVirtualEntityByRecordIdRequest::flags() const {
  // @@protoc_insertion_point(field_get:szengine.GetVirtualEntityByRecordIdRequest.flags)
  return _internal_flags();
}
inline void GetVirtualEntityByRecordIdRequest::_internal_set_flags(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  flags_ = value;
}
inline void GetVirtualEntityByRecordIdRequest::set_flags(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_flags(value);
  // @@protoc_insertion_point(field_set:szengine.GetVirtualEntityByRecordIdRequest.flags)
}

// -------------------------------------------------------------------

// GetVirtualEntityByRecordIdResponse

// string result = 1;
inline void GetVirtualEntityByRecordIdResponse::clear_result() {
  result_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GetVirtualEntityByRecordIdResponse::result() const {
  // @@protoc_insertion_point(field_get:szengine.GetVirtualEntityByRecordIdResponse.result)
  return _internal_result();
}
inline void GetVirtualEntityByRecordIdResponse::set_result(const std::string& value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:szengine.GetVirtualEntityByRecordIdResponse.result)
}
inline std::string* GetVirtualEntityByRecordIdResponse::mutable_result() {
  // @@protoc_insertion_point(field_mutable:szengine.GetVirtualEntityByRecordIdResponse.result)
  return _internal_mutable_result();
}
inline const std::string& GetVirtualEntityByRecordIdResponse::_internal_result() const {
  return result_.Get();
}
inline void GetVirtualEntityByRecordIdResponse::_internal_set_result(const std::string& value) {
  
  result_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetVirtualEntityByRecordIdResponse::set_result(std::string&& value) {
  
  result_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:szengine.GetVirtualEntityByRecordIdResponse.result)
}
inline void GetVirtualEntityByRecordIdResponse::set_result(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  result_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:szengine.GetVirtualEntityByRecordIdResponse.result)
}
inline void GetVirtualEntityByRecordIdResponse::set_result(const char* value,
    size_t size) {
  
  result_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:szengine.GetVirtualEntityByRecordIdResponse.result)
}
inline std::string* GetVirtualEntityByRecordIdResponse::_internal_mutable_result() {
  
  return result_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetVirtualEntityByRecordIdResponse::release_result() {
  // @@protoc_insertion_point(field_release:szengine.GetVirtualEntityByRecordIdResponse.result)
  return result_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetVirtualEntityByRecordIdResponse::set_allocated_result(std::string* result) {
  if (result != nullptr) {
    
  } else {
    
  }
  result_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), result,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:szengine.GetVirtualEntityByRecordIdResponse.result)
}
inline std::string* GetVirtualEntityByRecordIdResponse::unsafe_arena_release_result() {
  // @@protoc_insertion_point(field_unsafe_arena_release:szengine.GetVirtualEntityByRecordIdResponse.result)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return result_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void GetVirtualEntityByRecordIdResponse::unsafe_arena_set_allocated_result(
    std::string* result) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (result != nullptr) {
    
  } else {
    
  }
  result_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      result, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:szengine.GetVirtualEntityByRecordIdResponse.result)
}

// -------------------------------------------------------------------

// HowEntityByEntityIdRequest

// int64 entityId = 1;
inline void HowEntityByEntityIdRequest::clear_entityid() {
  entityid_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 HowEntityByEntityIdRequest::_internal_entityid() const {
  return entityid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 HowEntityByEntityIdRequest::entityid() const {
  // @@protoc_insertion_point(field_get:szengine.HowEntityByEntityIdRequest.entityId)
  return _internal_entityid();
}
inline void HowEntityByEntityIdRequest::_internal_set_entityid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  entityid_ = value;
}
inline void HowEntityByEntityIdRequest::set_entityid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_entityid(value);
  // @@protoc_insertion_point(field_set:szengine.HowEntityByEntityIdRequest.entityId)
}

// int64 flags = 2;
inline void HowEntityByEntityIdRequest::clear_flags() {
  flags_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 HowEntityByEntityIdRequest::_internal_flags() const {
  return flags_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 HowEntityByEntityIdRequest::flags() const {
  // @@protoc_insertion_point(field_get:szengine.HowEntityByEntityIdRequest.flags)
  return _internal_flags();
}
inline void HowEntityByEntityIdRequest::_internal_set_flags(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  flags_ = value;
}
inline void HowEntityByEntityIdRequest::set_flags(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_flags(value);
  // @@protoc_insertion_point(field_set:szengine.HowEntityByEntityIdRequest.flags)
}

// -------------------------------------------------------------------

// HowEntityByEntityIdResponse

// string result = 1;
inline void HowEntityByEntityIdResponse::clear_result() {
  result_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& HowEntityByEntityIdResponse::result() const {
  // @@protoc_insertion_point(field_get:szengine.HowEntityByEntityIdResponse.result)
  return _internal_result();
}
inline void HowEntityByEntityIdResponse::set_result(const std::string& value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:szengine.HowEntityByEntityIdResponse.result)
}
inline std::string* HowEntityByEntityIdResponse::mutable_result() {
  // @@protoc_insertion_point(field_mutable:szengine.HowEntityByEntityIdResponse.result)
  return _internal_mutable_result();
}
inline const std::string& HowEntityByEntityIdResponse::_internal_result() const {
  return result_.Get();
}
inline void HowEntityByEntityIdResponse::_internal_set_result(const std::string& value) {
  
  result_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void HowEntityByEntityIdResponse::set_result(std::string&& value) {
  
  result_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:szengine.HowEntityByEntityIdResponse.result)
}
inline void HowEntityByEntityIdResponse::set_result(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  result_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:szengine.HowEntityByEntityIdResponse.result)
}
inline void HowEntityByEntityIdResponse::set_result(const char* value,
    size_t size) {
  
  result_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:szengine.HowEntityByEntityIdResponse.result)
}
inline std::string* HowEntityByEntityIdResponse::_internal_mutable_result() {
  
  return result_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* HowEntityByEntityIdResponse::release_result() {
  // @@protoc_insertion_point(field_release:szengine.HowEntityByEntityIdResponse.result)
  return result_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void HowEntityByEntityIdResponse::set_allocated_result(std::string* result) {
  if (result != nullptr) {
    
  } else {
    
  }
  result_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), result,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:szengine.HowEntityByEntityIdResponse.result)
}
inline std::string* HowEntityByEntityIdResponse::unsafe_arena_release_result() {
  // @@protoc_insertion_point(field_unsafe_arena_release:szengine.HowEntityByEntityIdResponse.result)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return result_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void HowEntityByEntityIdResponse::unsafe_arena_set_allocated_result(
    std::string* result) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (result != nullptr) {
    
  } else {
    
  }
  result_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      result, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:szengine.HowEntityByEntityIdResponse.result)
}

// -------------------------------------------------------------------

// PreprocessRecordRequest

// string recordDefinition = 1;
inline void PreprocessRecordRequest::clear_recorddefinition() {
  recorddefinition_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& PreprocessRecordRequest::recorddefinition() const {
  // @@protoc_insertion_point(field_get:szengine.PreprocessRecordRequest.recordDefinition)
  return _internal_recorddefinition();
}
inline void PreprocessRecordRequest::set_recorddefinition(const std::string& value) {
  _internal_set_recorddefinition(value);
  // @@protoc_insertion_point(field_set:szengine.PreprocessRecordRequest.recordDefinition)
}
inline std::string* PreprocessRecordRequest::mutable_recorddefinition() {
  // @@protoc_insertion_point(field_mutable:szengine.PreprocessRecordRequest.recordDefinition)
  return _internal_mutable_recorddefinition();
}
inline const std::string& PreprocessRecordRequest::_internal_recorddefinition() const {
  return recorddefinition_.Get();
}
inline void PreprocessRecordRequest::_internal_set_recorddefinition(const std::string& value) {
  
  recorddefinition_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PreprocessRecordRequest::set_recorddefinition(std::string&& value) {
  
  recorddefinition_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:szengine.PreprocessRecordRequest.recordDefinition)
}
inline void PreprocessRecordRequest::set_recorddefinition(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  recorddefinition_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:szengine.PreprocessRecordRequest.recordDefinition)
}
inline void PreprocessRecordRequest::set_recorddefinition(const char* value,
    size_t size) {
  
  recorddefinition_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:szengine.PreprocessRecordRequest.recordDefinition)
}
inline std::string* PreprocessRecordRequest::_internal_mutable_recorddefinition() {
  
  return recorddefinition_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PreprocessRecordRequest::release_recorddefinition() {
  // @@protoc_insertion_point(field_release:szengine.PreprocessRecordRequest.recordDefinition)
  return recorddefinition_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PreprocessRecordRequest::set_allocated_recorddefinition(std::string* recorddefinition) {
  if (recorddefinition != nullptr) {
    
  } else {
    
  }
  recorddefinition_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), recorddefinition,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:szengine.PreprocessRecordRequest.recordDefinition)
}
inline std::string* PreprocessRecordRequest::unsafe_arena_release_recorddefinition() {
  // @@protoc_insertion_point(field_unsafe_arena_release:szengine.PreprocessRecordRequest.recordDefinition)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return recorddefinition_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void PreprocessRecordRequest::unsafe_arena_set_allocated_recorddefinition(
    std::string* recorddefinition) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (recorddefinition != nullptr) {
    
  } else {
    
  }
  recorddefinition_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      recorddefinition, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:szengine.PreprocessRecordRequest.recordDefinition)
}

// int64 flags = 2;
inline void PreprocessRecordRequest::clear_flags() {
  flags_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PreprocessRecordRequest::_internal_flags() const {
  return flags_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PreprocessRecordRequest::flags() const {
  // @@protoc_insertion_point(field_get:szengine.PreprocessRecordRequest.flags)
  return _internal_flags();
}
inline void PreprocessRecordRequest::_internal_set_flags(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  flags_ = value;
}
inline void PreprocessRecordRequest::set_flags(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_flags(value);
  // @@protoc_insertion_point(field_set:szengine.PreprocessRecordRequest.flags)
}

// -------------------------------------------------------------------

// PreprocessRecordResponse

// string result = 1;
inline void PreprocessRecordResponse::clear_result() {
  result_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& PreprocessRecordResponse::result() const {
  // @@protoc_insertion_point(field_get:szengine.PreprocessRecordResponse.result)
  return _internal_result();
}
inline void PreprocessRecordResponse::set_result(const std::string& value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:szengine.PreprocessRecordResponse.result)
}
inline std::string* PreprocessRecordResponse::mutable_result() {
  // @@protoc_insertion_point(field_mutable:szengine.PreprocessRecordResponse.result)
  return _internal_mutable_result();
}
inline const std::string& PreprocessRecordResponse::_internal_result() const {
  return result_.Get();
}
inline void PreprocessRecordResponse::_internal_set_result(const std::string& value) {
  
  result_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PreprocessRecordResponse::set_result(std::string&& value) {
  
  result_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:szengine.PreprocessRecordResponse.result)
}
inline void PreprocessRecordResponse::set_result(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  result_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:szengine.PreprocessRecordResponse.result)
}
inline void PreprocessRecordResponse::set_result(const char* value,
    size_t size) {
  
  result_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:szengine.PreprocessRecordResponse.result)
}
inline std::string* PreprocessRecordResponse::_internal_mutable_result() {
  
  return result_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PreprocessRecordResponse::release_result() {
  // @@protoc_insertion_point(field_release:szengine.PreprocessRecordResponse.result)
  return result_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PreprocessRecordResponse::set_allocated_result(std::string* result) {
  if (result != nullptr) {
    
  } else {
    
  }
  result_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), result,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:szengine.PreprocessRecordResponse.result)
}
inline std::string* PreprocessRecordResponse::unsafe_arena_release_result() {
  // @@protoc_insertion_point(field_unsafe_arena_release:szengine.PreprocessRecordResponse.result)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return result_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void PreprocessRecordResponse::unsafe_arena_set_allocated_result(
    std::string* result) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (result != nullptr) {
    
  } else {
    
  }
  result_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      result, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:szengine.PreprocessRecordResponse.result)
}

// -------------------------------------------------------------------

// PrimeEngineRequest

// -------------------------------------------------------------------

// PrimeEngineResponse

// -------------------------------------------------------------------

// ProcessRedoRecordRequest

// string redoRecord = 1;
inline void ProcessRedoRecordRequest::clear_redorecord() {
  redorecord_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ProcessRedoRecordRequest::redorecord() const {
  // @@protoc_insertion_point(field_get:szengine.ProcessRedoRecordRequest.redoRecord)
  return _internal_redorecord();
}
inline void ProcessRedoRecordRequest::set_redorecord(const std::string& value) {
  _internal_set_redorecord(value);
  // @@protoc_insertion_point(field_set:szengine.ProcessRedoRecordRequest.redoRecord)
}
inline std::string* ProcessRedoRecordRequest::mutable_redorecord() {
  // @@protoc_insertion_point(field_mutable:szengine.ProcessRedoRecordRequest.redoRecord)
  return _internal_mutable_redorecord();
}
inline const std::string& ProcessRedoRecordRequest::_internal_redorecord() const {
  return redorecord_.Get();
}
inline void ProcessRedoRecordRequest::_internal_set_redorecord(const std::string& value) {
  
  redorecord_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ProcessRedoRecordRequest::set_redorecord(std::string&& value) {
  
  redorecord_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:szengine.ProcessRedoRecordRequest.redoRecord)
}
inline void ProcessRedoRecordRequest::set_redorecord(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  redorecord_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:szengine.ProcessRedoRecordRequest.redoRecord)
}
inline void ProcessRedoRecordRequest::set_redorecord(const char* value,
    size_t size) {
  
  redorecord_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:szengine.ProcessRedoRecordRequest.redoRecord)
}
inline std::string* ProcessRedoRecordRequest::_internal_mutable_redorecord() {
  
  return redorecord_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ProcessRedoRecordRequest::release_redorecord() {
  // @@protoc_insertion_point(field_release:szengine.ProcessRedoRecordRequest.redoRecord)
  return redorecord_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ProcessRedoRecordRequest::set_allocated_redorecord(std::string* redorecord) {
  if (redorecord != nullptr) {
    
  } else {
    
  }
  redorecord_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), redorecord,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:szengine.ProcessRedoRecordRequest.redoRecord)
}
inline std::string* ProcessRedoRecordRequest::unsafe_arena_release_redorecord() {
  // @@protoc_insertion_point(field_unsafe_arena_release:szengine.ProcessRedoRecordRequest.redoRecord)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return redorecord_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ProcessRedoRecordRequest::unsafe_arena_set_allocated_redorecord(
    std::string* redorecord) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (redorecord != nullptr) {
    
  } else {
    
  }
  redorecord_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      redorecord, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:szengine.ProcessRedoRecordRequest.redoRecord)
}

// int64 flags = 2;
inline void ProcessRedoRecordRequest::clear_flags() {
  flags_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ProcessRedoRecordRequest::_internal_flags() const {
  return flags_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ProcessRedoRecordRequest::flags() const {
  // @@protoc_insertion_point(field_get:szengine.ProcessRedoRecordRequest.flags)
  return _internal_flags();
}
inline void ProcessRedoRecordRequest::_internal_set_flags(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  flags_ = value;
}
inline void ProcessRedoRecordRequest::set_flags(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_flags(value);
  // @@protoc_insertion_point(field_set:szengine.ProcessRedoRecordRequest.flags)
}

// -------------------------------------------------------------------

// ProcessRedoRecordResponse

// string result = 1;
inline void ProcessRedoRecordResponse::clear_result() {
  result_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ProcessRedoRecordResponse::result() const {
  // @@protoc_insertion_point(field_get:szengine.ProcessRedoRecordResponse.result)
  return _internal_result();
}
inline void ProcessRedoRecordResponse::set_result(const std::string& value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:szengine.ProcessRedoRecordResponse.result)
}
inline std::string* ProcessRedoRecordResponse::mutable_result() {
  // @@protoc_insertion_point(field_mutable:szengine.ProcessRedoRecordResponse.result)
  return _internal_mutable_result();
}
inline const std::string& ProcessRedoRecordResponse::_internal_result() const {
  return result_.Get();
}
inline void ProcessRedoRecordResponse::_internal_set_result(const std::string& value) {
  
  result_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ProcessRedoRecordResponse::set_result(std::string&& value) {
  
  result_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:szengine.ProcessRedoRecordResponse.result)
}
inline void ProcessRedoRecordResponse::set_result(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  result_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:szengine.ProcessRedoRecordResponse.result)
}
inline void ProcessRedoRecordResponse::set_result(const char* value,
    size_t size) {
  
  result_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:szengine.ProcessRedoRecordResponse.result)
}
inline std::string* ProcessRedoRecordResponse::_internal_mutable_result() {
  
  return result_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ProcessRedoRecordResponse::release_result() {
  // @@protoc_insertion_point(field_release:szengine.ProcessRedoRecordResponse.result)
  return result_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ProcessRedoRecordResponse::set_allocated_result(std::string* result) {
  if (result != nullptr) {
    
  } else {
    
  }
  result_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), result,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:szengine.ProcessRedoRecordResponse.result)
}
inline std::string* ProcessRedoRecordResponse::unsafe_arena_release_result() {
  // @@protoc_insertion_point(field_unsafe_arena_release:szengine.ProcessRedoRecordResponse.result)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return result_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ProcessRedoRecordResponse::unsafe_arena_set_allocated_result(
    std::string* result) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (result != nullptr) {
    
  } else {
    
  }
  result_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      result, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:szengine.ProcessRedoRecordResponse.result)
}

// -------------------------------------------------------------------

// ReevaluateEntityRequest

// int64 entityId = 1;
inline void ReevaluateEntityRequest::clear_entityid() {
  entityid_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ReevaluateEntityRequest::_internal_entityid() const {
  return entityid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ReevaluateEntityRequest::entityid() const {
  // @@protoc_insertion_point(field_get:szengine.ReevaluateEntityRequest.entityId)
  return _internal_entityid();
}
inline void ReevaluateEntityRequest::_internal_set_entityid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  entityid_ = value;
}
inline void ReevaluateEntityRequest::set_entityid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_entityid(value);
  // @@protoc_insertion_point(field_set:szengine.ReevaluateEntityRequest.entityId)
}

// int64 flags = 2;
inline void ReevaluateEntityRequest::clear_flags() {
  flags_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ReevaluateEntityRequest::_internal_flags() const {
  return flags_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ReevaluateEntityRequest::flags() const {
  // @@protoc_insertion_point(field_get:szengine.ReevaluateEntityRequest.flags)
  return _internal_flags();
}
inline void ReevaluateEntityRequest::_internal_set_flags(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  flags_ = value;
}
inline void ReevaluateEntityRequest::set_flags(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_flags(value);
  // @@protoc_insertion_point(field_set:szengine.ReevaluateEntityRequest.flags)
}

// -------------------------------------------------------------------

// ReevaluateEntityResponse

// string result = 1;
inline void ReevaluateEntityResponse::clear_result() {
  result_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ReevaluateEntityResponse::result() const {
  // @@protoc_insertion_point(field_get:szengine.ReevaluateEntityResponse.result)
  return _internal_result();
}
inline void ReevaluateEntityResponse::set_result(const std::string& value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:szengine.ReevaluateEntityResponse.result)
}
inline std::string* ReevaluateEntityResponse::mutable_result() {
  // @@protoc_insertion_point(field_mutable:szengine.ReevaluateEntityResponse.result)
  return _internal_mutable_result();
}
inline const std::string& ReevaluateEntityResponse::_internal_result() const {
  return result_.Get();
}
inline void ReevaluateEntityResponse::_internal_set_result(const std::string& value) {
  
  result_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ReevaluateEntityResponse::set_result(std::string&& value) {
  
  result_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:szengine.ReevaluateEntityResponse.result)
}
inline void ReevaluateEntityResponse::set_result(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  result_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:szengine.ReevaluateEntityResponse.result)
}
inline void ReevaluateEntityResponse::set_result(const char* value,
    size_t size) {
  
  result_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:szengine.ReevaluateEntityResponse.result)
}
inline std::string* ReevaluateEntityResponse::_internal_mutable_result() {
  
  return result_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ReevaluateEntityResponse::release_result() {
  // @@protoc_insertion_point(field_release:szengine.ReevaluateEntityResponse.result)
  return result_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ReevaluateEntityResponse::set_allocated_result(std::string* result) {
  if (result != nullptr) {
    
  } else {
    
  }
  result_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), result,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:szengine.ReevaluateEntityResponse.result)
}
inline std::string* ReevaluateEntityResponse::unsafe_arena_release_result() {
  // @@protoc_insertion_point(field_unsafe_arena_release:szengine.ReevaluateEntityResponse.result)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return result_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ReevaluateEntityResponse::unsafe_arena_set_allocated_result(
    std::string* result) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (result != nullptr) {
    
  } else {
    
  }
  result_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      result, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:szengine.ReevaluateEntityResponse.result)
}

// -------------------------------------------------------------------

// ReevaluateRecordRequest

// string dataSourceCode = 1;
inline void ReevaluateRecordRequest::clear_datasourcecode() {
  datasourcecode_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ReevaluateRecordRequest::datasourcecode() const {
  // @@protoc_insertion_point(field_get:szengine.ReevaluateRecordRequest.dataSourceCode)
  return _internal_datasourcecode();
}
inline void ReevaluateRecordRequest::set_datasourcecode(const std::string& value) {
  _internal_set_datasourcecode(value);
  // @@protoc_insertion_point(field_set:szengine.ReevaluateRecordRequest.dataSourceCode)
}
inline std::string* ReevaluateRecordRequest::mutable_datasourcecode() {
  // @@protoc_insertion_point(field_mutable:szengine.ReevaluateRecordRequest.dataSourceCode)
  return _internal_mutable_datasourcecode();
}
inline const std::string& ReevaluateRecordRequest::_internal_datasourcecode() const {
  return datasourcecode_.Get();
}
inline void ReevaluateRecordRequest::_internal_set_datasourcecode(const std::string& value) {
  
  datasourcecode_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ReevaluateRecordRequest::set_datasourcecode(std::string&& value) {
  
  datasourcecode_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:szengine.ReevaluateRecordRequest.dataSourceCode)
}
inline void ReevaluateRecordRequest::set_datasourcecode(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  datasourcecode_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:szengine.ReevaluateRecordRequest.dataSourceCode)
}
inline void ReevaluateRecordRequest::set_datasourcecode(const char* value,
    size_t size) {
  
  datasourcecode_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:szengine.ReevaluateRecordRequest.dataSourceCode)
}
inline std::string* ReevaluateRecordRequest::_internal_mutable_datasourcecode() {
  
  return datasourcecode_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ReevaluateRecordRequest::release_datasourcecode() {
  // @@protoc_insertion_point(field_release:szengine.ReevaluateRecordRequest.dataSourceCode)
  return datasourcecode_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ReevaluateRecordRequest::set_allocated_datasourcecode(std::string* datasourcecode) {
  if (datasourcecode != nullptr) {
    
  } else {
    
  }
  datasourcecode_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), datasourcecode,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:szengine.ReevaluateRecordRequest.dataSourceCode)
}
inline std::string* ReevaluateRecordRequest::unsafe_arena_release_datasourcecode() {
  // @@protoc_insertion_point(field_unsafe_arena_release:szengine.ReevaluateRecordRequest.dataSourceCode)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return datasourcecode_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ReevaluateRecordRequest::unsafe_arena_set_allocated_datasourcecode(
    std::string* datasourcecode) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (datasourcecode != nullptr) {
    
  } else {
    
  }
  datasourcecode_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      datasourcecode, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:szengine.ReevaluateRecordRequest.dataSourceCode)
}

// string recordId = 2;
inline void ReevaluateRecordRequest::clear_recordid() {
  recordid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ReevaluateRecordRequest::recordid() const {
  // @@protoc_insertion_point(field_get:szengine.ReevaluateRecordRequest.recordId)
  return _internal_recordid();
}
inline void ReevaluateRecordRequest::set_recordid(const std::string& value) {
  _internal_set_recordid(value);
  // @@protoc_insertion_point(field_set:szengine.ReevaluateRecordRequest.recordId)
}
inline std::string* ReevaluateRecordRequest::mutable_recordid() {
  // @@protoc_insertion_point(field_mutable:szengine.ReevaluateRecordRequest.recordId)
  return _internal_mutable_recordid();
}
inline const std::string& ReevaluateRecordRequest::_internal_recordid() const {
  return recordid_.Get();
}
inline void ReevaluateRecordRequest::_internal_set_recordid(const std::string& value) {
  
  recordid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ReevaluateRecordRequest::set_recordid(std::string&& value) {
  
  recordid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:szengine.ReevaluateRecordRequest.recordId)
}
inline void ReevaluateRecordRequest::set_recordid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  recordid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:szengine.ReevaluateRecordRequest.recordId)
}
inline void ReevaluateRecordRequest::set_recordid(const char* value,
    size_t size) {
  
  recordid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:szengine.ReevaluateRecordRequest.recordId)
}
inline std::string* ReevaluateRecordRequest::_internal_mutable_recordid() {
  
  return recordid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ReevaluateRecordRequest::release_recordid() {
  // @@protoc_insertion_point(field_release:szengine.ReevaluateRecordRequest.recordId)
  return recordid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ReevaluateRecordRequest::set_allocated_recordid(std::string* recordid) {
  if (recordid != nullptr) {
    
  } else {
    
  }
  recordid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), recordid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:szengine.ReevaluateRecordRequest.recordId)
}
inline std::string* ReevaluateRecordRequest::unsafe_arena_release_recordid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:szengine.ReevaluateRecordRequest.recordId)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return recordid_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ReevaluateRecordRequest::unsafe_arena_set_allocated_recordid(
    std::string* recordid) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (recordid != nullptr) {
    
  } else {
    
  }
  recordid_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      recordid, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:szengine.ReevaluateRecordRequest.recordId)
}

// int64 flags = 3;
inline void ReevaluateRecordRequest::clear_flags() {
  flags_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ReevaluateRecordRequest::_internal_flags() const {
  return flags_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ReevaluateRecordRequest::flags() const {
  // @@protoc_insertion_point(field_get:szengine.ReevaluateRecordRequest.flags)
  return _internal_flags();
}
inline void ReevaluateRecordRequest::_internal_set_flags(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  flags_ = value;
}
inline void ReevaluateRecordRequest::set_flags(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_flags(value);
  // @@protoc_insertion_point(field_set:szengine.ReevaluateRecordRequest.flags)
}

// -------------------------------------------------------------------

// ReevaluateRecordResponse

// string result = 1;
inline void ReevaluateRecordResponse::clear_result() {
  result_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ReevaluateRecordResponse::result() const {
  // @@protoc_insertion_point(field_get:szengine.ReevaluateRecordResponse.result)
  return _internal_result();
}
inline void ReevaluateRecordResponse::set_result(const std::string& value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:szengine.ReevaluateRecordResponse.result)
}
inline std::string* ReevaluateRecordResponse::mutable_result() {
  // @@protoc_insertion_point(field_mutable:szengine.ReevaluateRecordResponse.result)
  return _internal_mutable_result();
}
inline const std::string& ReevaluateRecordResponse::_internal_result() const {
  return result_.Get();
}
inline void ReevaluateRecordResponse::_internal_set_result(const std::string& value) {
  
  result_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ReevaluateRecordResponse::set_result(std::string&& value) {
  
  result_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:szengine.ReevaluateRecordResponse.result)
}
inline void ReevaluateRecordResponse::set_result(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  result_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:szengine.ReevaluateRecordResponse.result)
}
inline void ReevaluateRecordResponse::set_result(const char* value,
    size_t size) {
  
  result_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:szengine.ReevaluateRecordResponse.result)
}
inline std::string* ReevaluateRecordResponse::_internal_mutable_result() {
  
  return result_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ReevaluateRecordResponse::release_result() {
  // @@protoc_insertion_point(field_release:szengine.ReevaluateRecordResponse.result)
  return result_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ReevaluateRecordResponse::set_allocated_result(std::string* result) {
  if (result != nullptr) {
    
  } else {
    
  }
  result_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), result,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:szengine.ReevaluateRecordResponse.result)
}
inline std::string* ReevaluateRecordResponse::unsafe_arena_release_result() {
  // @@protoc_insertion_point(field_unsafe_arena_release:szengine.ReevaluateRecordResponse.result)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return result_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ReevaluateRecordResponse::unsafe_arena_set_allocated_result(
    std::string* result) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (result != nullptr) {
    
  } else {
    
  }
  result_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      result, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:szengine.ReevaluateRecordResponse.result)
}

// -------------------------------------------------------------------

// ReinitializeRequest

// int64 configId = 1;
inline void ReinitializeRequest::clear_configid() {
  configid_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ReinitializeRequest::_internal_configid() const {
  return configid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ReinitializeRequest::configid() const {
  // @@protoc_insertion_point(field_get:szengine.ReinitializeRequest.configId)
  return _internal_configid();
}
inline void ReinitializeRequest::_internal_set_configid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  configid_ = value;
}
inline void ReinitializeRequest::set_configid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_configid(value);
  // @@protoc_insertion_point(field_set:szengine.ReinitializeRequest.configId)
}

// -------------------------------------------------------------------

// ReinitializeResponse

// -------------------------------------------------------------------

// SearchByAttributesRequest

// string attributes = 1;
inline void SearchByAttributesRequest::clear_attributes() {
  attributes_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SearchByAttributesRequest::attributes() const {
  // @@protoc_insertion_point(field_get:szengine.SearchByAttributesRequest.attributes)
  return _internal_attributes();
}
inline void SearchByAttributesRequest::set_attributes(const std::string& value) {
  _internal_set_attributes(value);
  // @@protoc_insertion_point(field_set:szengine.SearchByAttributesRequest.attributes)
}
inline std::string* SearchByAttributesRequest::mutable_attributes() {
  // @@protoc_insertion_point(field_mutable:szengine.SearchByAttributesRequest.attributes)
  return _internal_mutable_attributes();
}
inline const std::string& SearchByAttributesRequest::_internal_attributes() const {
  return attributes_.Get();
}
inline void SearchByAttributesRequest::_internal_set_attributes(const std::string& value) {
  
  attributes_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SearchByAttributesRequest::set_attributes(std::string&& value) {
  
  attributes_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:szengine.SearchByAttributesRequest.attributes)
}
inline void SearchByAttributesRequest::set_attributes(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  attributes_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:szengine.SearchByAttributesRequest.attributes)
}
inline void SearchByAttributesRequest::set_attributes(const char* value,
    size_t size) {
  
  attributes_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:szengine.SearchByAttributesRequest.attributes)
}
inline std::string* SearchByAttributesRequest::_internal_mutable_attributes() {
  
  return attributes_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SearchByAttributesRequest::release_attributes() {
  // @@protoc_insertion_point(field_release:szengine.SearchByAttributesRequest.attributes)
  return attributes_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SearchByAttributesRequest::set_allocated_attributes(std::string* attributes) {
  if (attributes != nullptr) {
    
  } else {
    
  }
  attributes_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), attributes,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:szengine.SearchByAttributesRequest.attributes)
}
inline std::string* SearchByAttributesRequest::unsafe_arena_release_attributes() {
  // @@protoc_insertion_point(field_unsafe_arena_release:szengine.SearchByAttributesRequest.attributes)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return attributes_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void SearchByAttributesRequest::unsafe_arena_set_allocated_attributes(
    std::string* attributes) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (attributes != nullptr) {
    
  } else {
    
  }
  attributes_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      attributes, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:szengine.SearchByAttributesRequest.attributes)
}

// string searchProfile = 2;
inline void SearchByAttributesRequest::clear_searchprofile() {
  searchprofile_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SearchByAttributesRequest::searchprofile() const {
  // @@protoc_insertion_point(field_get:szengine.SearchByAttributesRequest.searchProfile)
  return _internal_searchprofile();
}
inline void SearchByAttributesRequest::set_searchprofile(const std::string& value) {
  _internal_set_searchprofile(value);
  // @@protoc_insertion_point(field_set:szengine.SearchByAttributesRequest.searchProfile)
}
inline std::string* SearchByAttributesRequest::mutable_searchprofile() {
  // @@protoc_insertion_point(field_mutable:szengine.SearchByAttributesRequest.searchProfile)
  return _internal_mutable_searchprofile();
}
inline const std::string& SearchByAttributesRequest::_internal_searchprofile() const {
  return searchprofile_.Get();
}
inline void SearchByAttributesRequest::_internal_set_searchprofile(const std::string& value) {
  
  searchprofile_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SearchByAttributesRequest::set_searchprofile(std::string&& value) {
  
  searchprofile_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:szengine.SearchByAttributesRequest.searchProfile)
}
inline void SearchByAttributesRequest::set_searchprofile(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  searchprofile_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:szengine.SearchByAttributesRequest.searchProfile)
}
inline void SearchByAttributesRequest::set_searchprofile(const char* value,
    size_t size) {
  
  searchprofile_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:szengine.SearchByAttributesRequest.searchProfile)
}
inline std::string* SearchByAttributesRequest::_internal_mutable_searchprofile() {
  
  return searchprofile_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SearchByAttributesRequest::release_searchprofile() {
  // @@protoc_insertion_point(field_release:szengine.SearchByAttributesRequest.searchProfile)
  return searchprofile_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SearchByAttributesRequest::set_allocated_searchprofile(std::string* searchprofile) {
  if (searchprofile != nullptr) {
    
  } else {
    
  }
  searchprofile_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), searchprofile,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:szengine.SearchByAttributesRequest.searchProfile)
}
inline std::string* SearchByAttributesRequest::unsafe_arena_release_searchprofile() {
  // @@protoc_insertion_point(field_unsafe_arena_release:szengine.SearchByAttributesRequest.searchProfile)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return searchprofile_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void SearchByAttributesRequest::unsafe_arena_set_allocated_searchprofile(
    std::string* searchprofile) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (searchprofile != nullptr) {
    
  } else {
    
  }
  searchprofile_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      searchprofile, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:szengine.SearchByAttributesRequest.searchProfile)
}

// int64 flags = 3;
inline void SearchByAttributesRequest::clear_flags() {
  flags_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SearchByAttributesRequest::_internal_flags() const {
  return flags_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SearchByAttributesRequest::flags() const {
  // @@protoc_insertion_point(field_get:szengine.SearchByAttributesRequest.flags)
  return _internal_flags();
}
inline void SearchByAttributesRequest::_internal_set_flags(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  flags_ = value;
}
inline void SearchByAttributesRequest::set_flags(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_flags(value);
  // @@protoc_insertion_point(field_set:szengine.SearchByAttributesRequest.flags)
}

// -------------------------------------------------------------------

// SearchByAttributesResponse

// string result = 1;
inline void SearchByAttributesResponse::clear_result() {
  result_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SearchByAttributesResponse::result() const {
  // @@protoc_insertion_point(field_get:szengine.SearchByAttributesResponse.result)
  return _internal_result();
}
inline void SearchByAttributesResponse::set_result(const std::string& value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:szengine.SearchByAttributesResponse.result)
}
inline std::string* SearchByAttributesResponse::mutable_result() {
  // @@protoc_insertion_point(field_mutable:szengine.SearchByAttributesResponse.result)
  return _internal_mutable_result();
}
inline const std::string& SearchByAttributesResponse::_internal_result() const {
  return result_.Get();
}
inline void SearchByAttributesResponse::_internal_set_result(const std::string& value) {
  
  result_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SearchByAttributesResponse::set_result(std::string&& value) {
  
  result_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:szengine.SearchByAttributesResponse.result)
}
inline void SearchByAttributesResponse::set_result(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  result_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:szengine.SearchByAttributesResponse.result)
}
inline void SearchByAttributesResponse::set_result(const char* value,
    size_t size) {
  
  result_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:szengine.SearchByAttributesResponse.result)
}
inline std::string* SearchByAttributesResponse::_internal_mutable_result() {
  
  return result_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SearchByAttributesResponse::release_result() {
  // @@protoc_insertion_point(field_release:szengine.SearchByAttributesResponse.result)
  return result_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SearchByAttributesResponse::set_allocated_result(std::string* result) {
  if (result != nullptr) {
    
  } else {
    
  }
  result_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), result,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:szengine.SearchByAttributesResponse.result)
}
inline std::string* SearchByAttributesResponse::unsafe_arena_release_result() {
  // @@protoc_insertion_point(field_unsafe_arena_release:szengine.SearchByAttributesResponse.result)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return result_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void SearchByAttributesResponse::unsafe_arena_set_allocated_result(
    std::string* result) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (result != nullptr) {
    
  } else {
    
  }
  result_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      result, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:szengine.SearchByAttributesResponse.result)
}

// -------------------------------------------------------------------

// StreamExportCsvEntityReportRequest

// string csvColumnList = 1;
inline void StreamExportCsvEntityReportRequest::clear_csvcolumnlist() {
  csvcolumnlist_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& StreamExportCsvEntityReportRequest::csvcolumnlist() const {
  // @@protoc_insertion_point(field_get:szengine.StreamExportCsvEntityReportRequest.csvColumnList)
  return _internal_csvcolumnlist();
}
inline void StreamExportCsvEntityReportRequest::set_csvcolumnlist(const std::string& value) {
  _internal_set_csvcolumnlist(value);
  // @@protoc_insertion_point(field_set:szengine.StreamExportCsvEntityReportRequest.csvColumnList)
}
inline std::string* StreamExportCsvEntityReportRequest::mutable_csvcolumnlist() {
  // @@protoc_insertion_point(field_mutable:szengine.StreamExportCsvEntityReportRequest.csvColumnList)
  return _internal_mutable_csvcolumnlist();
}
inline const std::string& StreamExportCsvEntityReportRequest::_internal_csvcolumnlist() const {
  return csvcolumnlist_.Get();
}
inline void StreamExportCsvEntityReportRequest::_internal_set_csvcolumnlist(const std::string& value) {
  
  csvcolumnlist_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void StreamExportCsvEntityReportRequest::set_csvcolumnlist(std::string&& value) {
  
  csvcolumnlist_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:szengine.StreamExportCsvEntityReportRequest.csvColumnList)
}
inline void StreamExportCsvEntityReportRequest::set_csvcolumnlist(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  csvcolumnlist_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:szengine.StreamExportCsvEntityReportRequest.csvColumnList)
}
inline void StreamExportCsvEntityReportRequest::set_csvcolumnlist(const char* value,
    size_t size) {
  
  csvcolumnlist_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:szengine.StreamExportCsvEntityReportRequest.csvColumnList)
}
inline std::string* StreamExportCsvEntityReportRequest::_internal_mutable_csvcolumnlist() {
  
  return csvcolumnlist_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* StreamExportCsvEntityReportRequest::release_csvcolumnlist() {
  // @@protoc_insertion_point(field_release:szengine.StreamExportCsvEntityReportRequest.csvColumnList)
  return csvcolumnlist_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void StreamExportCsvEntityReportRequest::set_allocated_csvcolumnlist(std::string* csvcolumnlist) {
  if (csvcolumnlist != nullptr) {
    
  } else {
    
  }
  csvcolumnlist_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), csvcolumnlist,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:szengine.StreamExportCsvEntityReportRequest.csvColumnList)
}
inline std::string* StreamExportCsvEntityReportRequest::unsafe_arena_release_csvcolumnlist() {
  // @@protoc_insertion_point(field_unsafe_arena_release:szengine.StreamExportCsvEntityReportRequest.csvColumnList)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return csvcolumnlist_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void StreamExportCsvEntityReportRequest::unsafe_arena_set_allocated_csvcolumnlist(
    std::string* csvcolumnlist) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (csvcolumnlist != nullptr) {
    
  } else {
    
  }
  csvcolumnlist_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      csvcolumnlist, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:szengine.StreamExportCsvEntityReportRequest.csvColumnList)
}

// int64 flags = 2;
inline void StreamExportCsvEntityReportRequest::clear_flags() {
  flags_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 StreamExportCsvEntityReportRequest::_internal_flags() const {
  return flags_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 StreamExportCsvEntityReportRequest::flags() const {
  // @@protoc_insertion_point(field_get:szengine.StreamExportCsvEntityReportRequest.flags)
  return _internal_flags();
}
inline void StreamExportCsvEntityReportRequest::_internal_set_flags(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  flags_ = value;
}
inline void StreamExportCsvEntityReportRequest::set_flags(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_flags(value);
  // @@protoc_insertion_point(field_set:szengine.StreamExportCsvEntityReportRequest.flags)
}

// -------------------------------------------------------------------

// StreamExportCsvEntityReportResponse

// string result = 1;
inline void StreamExportCsvEntityReportResponse::clear_result() {
  result_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& StreamExportCsvEntityReportResponse::result() const {
  // @@protoc_insertion_point(field_get:szengine.StreamExportCsvEntityReportResponse.result)
  return _internal_result();
}
inline void StreamExportCsvEntityReportResponse::set_result(const std::string& value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:szengine.StreamExportCsvEntityReportResponse.result)
}
inline std::string* StreamExportCsvEntityReportResponse::mutable_result() {
  // @@protoc_insertion_point(field_mutable:szengine.StreamExportCsvEntityReportResponse.result)
  return _internal_mutable_result();
}
inline const std::string& StreamExportCsvEntityReportResponse::_internal_result() const {
  return result_.Get();
}
inline void StreamExportCsvEntityReportResponse::_internal_set_result(const std::string& value) {
  
  result_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void StreamExportCsvEntityReportResponse::set_result(std::string&& value) {
  
  result_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:szengine.StreamExportCsvEntityReportResponse.result)
}
inline void StreamExportCsvEntityReportResponse::set_result(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  result_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:szengine.StreamExportCsvEntityReportResponse.result)
}
inline void StreamExportCsvEntityReportResponse::set_result(const char* value,
    size_t size) {
  
  result_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:szengine.StreamExportCsvEntityReportResponse.result)
}
inline std::string* StreamExportCsvEntityReportResponse::_internal_mutable_result() {
  
  return result_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* StreamExportCsvEntityReportResponse::release_result() {
  // @@protoc_insertion_point(field_release:szengine.StreamExportCsvEntityReportResponse.result)
  return result_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void StreamExportCsvEntityReportResponse::set_allocated_result(std::string* result) {
  if (result != nullptr) {
    
  } else {
    
  }
  result_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), result,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:szengine.StreamExportCsvEntityReportResponse.result)
}
inline std::string* StreamExportCsvEntityReportResponse::unsafe_arena_release_result() {
  // @@protoc_insertion_point(field_unsafe_arena_release:szengine.StreamExportCsvEntityReportResponse.result)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return result_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void StreamExportCsvEntityReportResponse::unsafe_arena_set_allocated_result(
    std::string* result) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (result != nullptr) {
    
  } else {
    
  }
  result_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      result, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:szengine.StreamExportCsvEntityReportResponse.result)
}

// -------------------------------------------------------------------

// StreamExportJsonEntityReportRequest

// int64 flags = 1;
inline void StreamExportJsonEntityReportRequest::clear_flags() {
  flags_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 StreamExportJsonEntityReportRequest::_internal_flags() const {
  return flags_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 StreamExportJsonEntityReportRequest::flags() const {
  // @@protoc_insertion_point(field_get:szengine.StreamExportJsonEntityReportRequest.flags)
  return _internal_flags();
}
inline void StreamExportJsonEntityReportRequest::_internal_set_flags(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  flags_ = value;
}
inline void StreamExportJsonEntityReportRequest::set_flags(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_flags(value);
  // @@protoc_insertion_point(field_set:szengine.StreamExportJsonEntityReportRequest.flags)
}

// -------------------------------------------------------------------

// StreamExportJsonEntityReportResponse

// string result = 1;
inline void StreamExportJsonEntityReportResponse::clear_result() {
  result_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& StreamExportJsonEntityReportResponse::result() const {
  // @@protoc_insertion_point(field_get:szengine.StreamExportJsonEntityReportResponse.result)
  return _internal_result();
}
inline void StreamExportJsonEntityReportResponse::set_result(const std::string& value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:szengine.StreamExportJsonEntityReportResponse.result)
}
inline std::string* StreamExportJsonEntityReportResponse::mutable_result() {
  // @@protoc_insertion_point(field_mutable:szengine.StreamExportJsonEntityReportResponse.result)
  return _internal_mutable_result();
}
inline const std::string& StreamExportJsonEntityReportResponse::_internal_result() const {
  return result_.Get();
}
inline void StreamExportJsonEntityReportResponse::_internal_set_result(const std::string& value) {
  
  result_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void StreamExportJsonEntityReportResponse::set_result(std::string&& value) {
  
  result_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:szengine.StreamExportJsonEntityReportResponse.result)
}
inline void StreamExportJsonEntityReportResponse::set_result(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  result_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:szengine.StreamExportJsonEntityReportResponse.result)
}
inline void StreamExportJsonEntityReportResponse::set_result(const char* value,
    size_t size) {
  
  result_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:szengine.StreamExportJsonEntityReportResponse.result)
}
inline std::string* StreamExportJsonEntityReportResponse::_internal_mutable_result() {
  
  return result_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* StreamExportJsonEntityReportResponse::release_result() {
  // @@protoc_insertion_point(field_release:szengine.StreamExportJsonEntityReportResponse.result)
  return result_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void StreamExportJsonEntityReportResponse::set_allocated_result(std::string* result) {
  if (result != nullptr) {
    
  } else {
    
  }
  result_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), result,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:szengine.StreamExportJsonEntityReportResponse.result)
}
inline std::string* StreamExportJsonEntityReportResponse::unsafe_arena_release_result() {
  // @@protoc_insertion_point(field_unsafe_arena_release:szengine.StreamExportJsonEntityReportResponse.result)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return result_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void StreamExportJsonEntityReportResponse::unsafe_arena_set_allocated_result(
    std::string* result) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (result != nullptr) {
    
  } else {
    
  }
  result_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      result, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:szengine.StreamExportJsonEntityReportResponse.result)
}

// -------------------------------------------------------------------

// WhyEntitiesRequest

// int64 entityId1 = 1;
inline void WhyEntitiesRequest::clear_entityid1() {
  entityid1_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 WhyEntitiesRequest::_internal_entityid1() const {
  return entityid1_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 WhyEntitiesRequest::entityid1() const {
  // @@protoc_insertion_point(field_get:szengine.WhyEntitiesRequest.entityId1)
  return _internal_entityid1();
}
inline void WhyEntitiesRequest::_internal_set_entityid1(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  entityid1_ = value;
}
inline void WhyEntitiesRequest::set_entityid1(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_entityid1(value);
  // @@protoc_insertion_point(field_set:szengine.WhyEntitiesRequest.entityId1)
}

// int64 entityId2 = 2;
inline void WhyEntitiesRequest::clear_entityid2() {
  entityid2_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 WhyEntitiesRequest::_internal_entityid2() const {
  return entityid2_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 WhyEntitiesRequest::entityid2() const {
  // @@protoc_insertion_point(field_get:szengine.WhyEntitiesRequest.entityId2)
  return _internal_entityid2();
}
inline void WhyEntitiesRequest::_internal_set_entityid2(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  entityid2_ = value;
}
inline void WhyEntitiesRequest::set_entityid2(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_entityid2(value);
  // @@protoc_insertion_point(field_set:szengine.WhyEntitiesRequest.entityId2)
}

// int64 flags = 3;
inline void WhyEntitiesRequest::clear_flags() {
  flags_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 WhyEntitiesRequest::_internal_flags() const {
  return flags_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 WhyEntitiesRequest::flags() const {
  // @@protoc_insertion_point(field_get:szengine.WhyEntitiesRequest.flags)
  return _internal_flags();
}
inline void WhyEntitiesRequest::_internal_set_flags(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  flags_ = value;
}
inline void WhyEntitiesRequest::set_flags(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_flags(value);
  // @@protoc_insertion_point(field_set:szengine.WhyEntitiesRequest.flags)
}

// -------------------------------------------------------------------

// WhyEntitiesResponse

// string result = 1;
inline void WhyEntitiesResponse::clear_result() {
  result_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& WhyEntitiesResponse::result() const {
  // @@protoc_insertion_point(field_get:szengine.WhyEntitiesResponse.result)
  return _internal_result();
}
inline void WhyEntitiesResponse::set_result(const std::string& value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:szengine.WhyEntitiesResponse.result)
}
inline std::string* WhyEntitiesResponse::mutable_result() {
  // @@protoc_insertion_point(field_mutable:szengine.WhyEntitiesResponse.result)
  return _internal_mutable_result();
}
inline const std::string& WhyEntitiesResponse::_internal_result() const {
  return result_.Get();
}
inline void WhyEntitiesResponse::_internal_set_result(const std::string& value) {
  
  result_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void WhyEntitiesResponse::set_result(std::string&& value) {
  
  result_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:szengine.WhyEntitiesResponse.result)
}
inline void WhyEntitiesResponse::set_result(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  result_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:szengine.WhyEntitiesResponse.result)
}
inline void WhyEntitiesResponse::set_result(const char* value,
    size_t size) {
  
  result_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:szengine.WhyEntitiesResponse.result)
}
inline std::string* WhyEntitiesResponse::_internal_mutable_result() {
  
  return result_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* WhyEntitiesResponse::release_result() {
  // @@protoc_insertion_point(field_release:szengine.WhyEntitiesResponse.result)
  return result_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void WhyEntitiesResponse::set_allocated_result(std::string* result) {
  if (result != nullptr) {
    
  } else {
    
  }
  result_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), result,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:szengine.WhyEntitiesResponse.result)
}
inline std::string* WhyEntitiesResponse::unsafe_arena_release_result() {
  // @@protoc_insertion_point(field_unsafe_arena_release:szengine.WhyEntitiesResponse.result)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return result_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void WhyEntitiesResponse::unsafe_arena_set_allocated_result(
    std::string* result) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (result != nullptr) {
    
  } else {
    
  }
  result_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      result, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:szengine.WhyEntitiesResponse.result)
}

// -------------------------------------------------------------------

// WhyRecordInEntityRequest

// string dataSourceCode = 1;
inline void WhyRecordInEntityRequest::clear_datasourcecode() {
  datasourcecode_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& WhyRecordInEntityRequest::datasourcecode() const {
  // @@protoc_insertion_point(field_get:szengine.WhyRecordInEntityRequest.dataSourceCode)
  return _internal_datasourcecode();
}
inline void WhyRecordInEntityRequest::set_datasourcecode(const std::string& value) {
  _internal_set_datasourcecode(value);
  // @@protoc_insertion_point(field_set:szengine.WhyRecordInEntityRequest.dataSourceCode)
}
inline std::string* WhyRecordInEntityRequest::mutable_datasourcecode() {
  // @@protoc_insertion_point(field_mutable:szengine.WhyRecordInEntityRequest.dataSourceCode)
  return _internal_mutable_datasourcecode();
}
inline const std::string& WhyRecordInEntityRequest::_internal_datasourcecode() const {
  return datasourcecode_.Get();
}
inline void WhyRecordInEntityRequest::_internal_set_datasourcecode(const std::string& value) {
  
  datasourcecode_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void WhyRecordInEntityRequest::set_datasourcecode(std::string&& value) {
  
  datasourcecode_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:szengine.WhyRecordInEntityRequest.dataSourceCode)
}
inline void WhyRecordInEntityRequest::set_datasourcecode(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  datasourcecode_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:szengine.WhyRecordInEntityRequest.dataSourceCode)
}
inline void WhyRecordInEntityRequest::set_datasourcecode(const char* value,
    size_t size) {
  
  datasourcecode_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:szengine.WhyRecordInEntityRequest.dataSourceCode)
}
inline std::string* WhyRecordInEntityRequest::_internal_mutable_datasourcecode() {
  
  return datasourcecode_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* WhyRecordInEntityRequest::release_datasourcecode() {
  // @@protoc_insertion_point(field_release:szengine.WhyRecordInEntityRequest.dataSourceCode)
  return datasourcecode_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void WhyRecordInEntityRequest::set_allocated_datasourcecode(std::string* datasourcecode) {
  if (datasourcecode != nullptr) {
    
  } else {
    
  }
  datasourcecode_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), datasourcecode,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:szengine.WhyRecordInEntityRequest.dataSourceCode)
}
inline std::string* WhyRecordInEntityRequest::unsafe_arena_release_datasourcecode() {
  // @@protoc_insertion_point(field_unsafe_arena_release:szengine.WhyRecordInEntityRequest.dataSourceCode)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return datasourcecode_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void WhyRecordInEntityRequest::unsafe_arena_set_allocated_datasourcecode(
    std::string* datasourcecode) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (datasourcecode != nullptr) {
    
  } else {
    
  }
  datasourcecode_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      datasourcecode, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:szengine.WhyRecordInEntityRequest.dataSourceCode)
}

// string recordId = 2;
inline void WhyRecordInEntityRequest::clear_recordid() {
  recordid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& WhyRecordInEntityRequest::recordid() const {
  // @@protoc_insertion_point(field_get:szengine.WhyRecordInEntityRequest.recordId)
  return _internal_recordid();
}
inline void WhyRecordInEntityRequest::set_recordid(const std::string& value) {
  _internal_set_recordid(value);
  // @@protoc_insertion_point(field_set:szengine.WhyRecordInEntityRequest.recordId)
}
inline std::string* WhyRecordInEntityRequest::mutable_recordid() {
  // @@protoc_insertion_point(field_mutable:szengine.WhyRecordInEntityRequest.recordId)
  return _internal_mutable_recordid();
}
inline const std::string& WhyRecordInEntityRequest::_internal_recordid() const {
  return recordid_.Get();
}
inline void WhyRecordInEntityRequest::_internal_set_recordid(const std::string& value) {
  
  recordid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void WhyRecordInEntityRequest::set_recordid(std::string&& value) {
  
  recordid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:szengine.WhyRecordInEntityRequest.recordId)
}
inline void WhyRecordInEntityRequest::set_recordid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  recordid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:szengine.WhyRecordInEntityRequest.recordId)
}
inline void WhyRecordInEntityRequest::set_recordid(const char* value,
    size_t size) {
  
  recordid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:szengine.WhyRecordInEntityRequest.recordId)
}
inline std::string* WhyRecordInEntityRequest::_internal_mutable_recordid() {
  
  return recordid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* WhyRecordInEntityRequest::release_recordid() {
  // @@protoc_insertion_point(field_release:szengine.WhyRecordInEntityRequest.recordId)
  return recordid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void WhyRecordInEntityRequest::set_allocated_recordid(std::string* recordid) {
  if (recordid != nullptr) {
    
  } else {
    
  }
  recordid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), recordid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:szengine.WhyRecordInEntityRequest.recordId)
}
inline std::string* WhyRecordInEntityRequest::unsafe_arena_release_recordid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:szengine.WhyRecordInEntityRequest.recordId)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return recordid_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void WhyRecordInEntityRequest::unsafe_arena_set_allocated_recordid(
    std::string* recordid) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (recordid != nullptr) {
    
  } else {
    
  }
  recordid_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      recordid, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:szengine.WhyRecordInEntityRequest.recordId)
}

// int64 flags = 3;
inline void WhyRecordInEntityRequest::clear_flags() {
  flags_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 WhyRecordInEntityRequest::_internal_flags() const {
  return flags_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 WhyRecordInEntityRequest::flags() const {
  // @@protoc_insertion_point(field_get:szengine.WhyRecordInEntityRequest.flags)
  return _internal_flags();
}
inline void WhyRecordInEntityRequest::_internal_set_flags(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  flags_ = value;
}
inline void WhyRecordInEntityRequest::set_flags(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_flags(value);
  // @@protoc_insertion_point(field_set:szengine.WhyRecordInEntityRequest.flags)
}

// -------------------------------------------------------------------

// WhyRecordInEntityResponse

// string result = 1;
inline void WhyRecordInEntityResponse::clear_result() {
  result_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& WhyRecordInEntityResponse::result() const {
  // @@protoc_insertion_point(field_get:szengine.WhyRecordInEntityResponse.result)
  return _internal_result();
}
inline void WhyRecordInEntityResponse::set_result(const std::string& value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:szengine.WhyRecordInEntityResponse.result)
}
inline std::string* WhyRecordInEntityResponse::mutable_result() {
  // @@protoc_insertion_point(field_mutable:szengine.WhyRecordInEntityResponse.result)
  return _internal_mutable_result();
}
inline const std::string& WhyRecordInEntityResponse::_internal_result() const {
  return result_.Get();
}
inline void WhyRecordInEntityResponse::_internal_set_result(const std::string& value) {
  
  result_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void WhyRecordInEntityResponse::set_result(std::string&& value) {
  
  result_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:szengine.WhyRecordInEntityResponse.result)
}
inline void WhyRecordInEntityResponse::set_result(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  result_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:szengine.WhyRecordInEntityResponse.result)
}
inline void WhyRecordInEntityResponse::set_result(const char* value,
    size_t size) {
  
  result_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:szengine.WhyRecordInEntityResponse.result)
}
inline std::string* WhyRecordInEntityResponse::_internal_mutable_result() {
  
  return result_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* WhyRecordInEntityResponse::release_result() {
  // @@protoc_insertion_point(field_release:szengine.WhyRecordInEntityResponse.result)
  return result_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void WhyRecordInEntityResponse::set_allocated_result(std::string* result) {
  if (result != nullptr) {
    
  } else {
    
  }
  result_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), result,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:szengine.WhyRecordInEntityResponse.result)
}
inline std::string* WhyRecordInEntityResponse::unsafe_arena_release_result() {
  // @@protoc_insertion_point(field_unsafe_arena_release:szengine.WhyRecordInEntityResponse.result)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return result_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void WhyRecordInEntityResponse::unsafe_arena_set_allocated_result(
    std::string* result) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (result != nullptr) {
    
  } else {
    
  }
  result_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      result, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:szengine.WhyRecordInEntityResponse.result)
}

// -------------------------------------------------------------------

// WhyRecordsRequest

// string dataSourceCode1 = 1;
inline void WhyRecordsRequest::clear_datasourcecode1() {
  datasourcecode1_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& WhyRecordsRequest::datasourcecode1() const {
  // @@protoc_insertion_point(field_get:szengine.WhyRecordsRequest.dataSourceCode1)
  return _internal_datasourcecode1();
}
inline void WhyRecordsRequest::set_datasourcecode1(const std::string& value) {
  _internal_set_datasourcecode1(value);
  // @@protoc_insertion_point(field_set:szengine.WhyRecordsRequest.dataSourceCode1)
}
inline std::string* WhyRecordsRequest::mutable_datasourcecode1() {
  // @@protoc_insertion_point(field_mutable:szengine.WhyRecordsRequest.dataSourceCode1)
  return _internal_mutable_datasourcecode1();
}
inline const std::string& WhyRecordsRequest::_internal_datasourcecode1() const {
  return datasourcecode1_.Get();
}
inline void WhyRecordsRequest::_internal_set_datasourcecode1(const std::string& value) {
  
  datasourcecode1_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void WhyRecordsRequest::set_datasourcecode1(std::string&& value) {
  
  datasourcecode1_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:szengine.WhyRecordsRequest.dataSourceCode1)
}
inline void WhyRecordsRequest::set_datasourcecode1(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  datasourcecode1_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:szengine.WhyRecordsRequest.dataSourceCode1)
}
inline void WhyRecordsRequest::set_datasourcecode1(const char* value,
    size_t size) {
  
  datasourcecode1_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:szengine.WhyRecordsRequest.dataSourceCode1)
}
inline std::string* WhyRecordsRequest::_internal_mutable_datasourcecode1() {
  
  return datasourcecode1_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* WhyRecordsRequest::release_datasourcecode1() {
  // @@protoc_insertion_point(field_release:szengine.WhyRecordsRequest.dataSourceCode1)
  return datasourcecode1_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void WhyRecordsRequest::set_allocated_datasourcecode1(std::string* datasourcecode1) {
  if (datasourcecode1 != nullptr) {
    
  } else {
    
  }
  datasourcecode1_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), datasourcecode1,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:szengine.WhyRecordsRequest.dataSourceCode1)
}
inline std::string* WhyRecordsRequest::unsafe_arena_release_datasourcecode1() {
  // @@protoc_insertion_point(field_unsafe_arena_release:szengine.WhyRecordsRequest.dataSourceCode1)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return datasourcecode1_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void WhyRecordsRequest::unsafe_arena_set_allocated_datasourcecode1(
    std::string* datasourcecode1) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (datasourcecode1 != nullptr) {
    
  } else {
    
  }
  datasourcecode1_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      datasourcecode1, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:szengine.WhyRecordsRequest.dataSourceCode1)
}

// string recordId1 = 2;
inline void WhyRecordsRequest::clear_recordid1() {
  recordid1_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& WhyRecordsRequest::recordid1() const {
  // @@protoc_insertion_point(field_get:szengine.WhyRecordsRequest.recordId1)
  return _internal_recordid1();
}
inline void WhyRecordsRequest::set_recordid1(const std::string& value) {
  _internal_set_recordid1(value);
  // @@protoc_insertion_point(field_set:szengine.WhyRecordsRequest.recordId1)
}
inline std::string* WhyRecordsRequest::mutable_recordid1() {
  // @@protoc_insertion_point(field_mutable:szengine.WhyRecordsRequest.recordId1)
  return _internal_mutable_recordid1();
}
inline const std::string& WhyRecordsRequest::_internal_recordid1() const {
  return recordid1_.Get();
}
inline void WhyRecordsRequest::_internal_set_recordid1(const std::string& value) {
  
  recordid1_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void WhyRecordsRequest::set_recordid1(std::string&& value) {
  
  recordid1_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:szengine.WhyRecordsRequest.recordId1)
}
inline void WhyRecordsRequest::set_recordid1(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  recordid1_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:szengine.WhyRecordsRequest.recordId1)
}
inline void WhyRecordsRequest::set_recordid1(const char* value,
    size_t size) {
  
  recordid1_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:szengine.WhyRecordsRequest.recordId1)
}
inline std::string* WhyRecordsRequest::_internal_mutable_recordid1() {
  
  return recordid1_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* WhyRecordsRequest::release_recordid1() {
  // @@protoc_insertion_point(field_release:szengine.WhyRecordsRequest.recordId1)
  return recordid1_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void WhyRecordsRequest::set_allocated_recordid1(std::string* recordid1) {
  if (recordid1 != nullptr) {
    
  } else {
    
  }
  recordid1_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), recordid1,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:szengine.WhyRecordsRequest.recordId1)
}
inline std::string* WhyRecordsRequest::unsafe_arena_release_recordid1() {
  // @@protoc_insertion_point(field_unsafe_arena_release:szengine.WhyRecordsRequest.recordId1)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return recordid1_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void WhyRecordsRequest::unsafe_arena_set_allocated_recordid1(
    std::string* recordid1) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (recordid1 != nullptr) {
    
  } else {
    
  }
  recordid1_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      recordid1, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:szengine.WhyRecordsRequest.recordId1)
}

// string dataSourceCode2 = 3;
inline void WhyRecordsRequest::clear_datasourcecode2() {
  datasourcecode2_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& WhyRecordsRequest::datasourcecode2() const {
  // @@protoc_insertion_point(field_get:szengine.WhyRecordsRequest.dataSourceCode2)
  return _internal_datasourcecode2();
}
inline void WhyRecordsRequest::set_datasourcecode2(const std::string& value) {
  _internal_set_datasourcecode2(value);
  // @@protoc_insertion_point(field_set:szengine.WhyRecordsRequest.dataSourceCode2)
}
inline std::string* WhyRecordsRequest::mutable_datasourcecode2() {
  // @@protoc_insertion_point(field_mutable:szengine.WhyRecordsRequest.dataSourceCode2)
  return _internal_mutable_datasourcecode2();
}
inline const std::string& WhyRecordsRequest::_internal_datasourcecode2() const {
  return datasourcecode2_.Get();
}
inline void WhyRecordsRequest::_internal_set_datasourcecode2(const std::string& value) {
  
  datasourcecode2_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void WhyRecordsRequest::set_datasourcecode2(std::string&& value) {
  
  datasourcecode2_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:szengine.WhyRecordsRequest.dataSourceCode2)
}
inline void WhyRecordsRequest::set_datasourcecode2(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  datasourcecode2_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:szengine.WhyRecordsRequest.dataSourceCode2)
}
inline void WhyRecordsRequest::set_datasourcecode2(const char* value,
    size_t size) {
  
  datasourcecode2_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:szengine.WhyRecordsRequest.dataSourceCode2)
}
inline std::string* WhyRecordsRequest::_internal_mutable_datasourcecode2() {
  
  return datasourcecode2_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* WhyRecordsRequest::release_datasourcecode2() {
  // @@protoc_insertion_point(field_release:szengine.WhyRecordsRequest.dataSourceCode2)
  return datasourcecode2_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void WhyRecordsRequest::set_allocated_datasourcecode2(std::string* datasourcecode2) {
  if (datasourcecode2 != nullptr) {
    
  } else {
    
  }
  datasourcecode2_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), datasourcecode2,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:szengine.WhyRecordsRequest.dataSourceCode2)
}
inline std::string* WhyRecordsRequest::unsafe_arena_release_datasourcecode2() {
  // @@protoc_insertion_point(field_unsafe_arena_release:szengine.WhyRecordsRequest.dataSourceCode2)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return datasourcecode2_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void WhyRecordsRequest::unsafe_arena_set_allocated_datasourcecode2(
    std::string* datasourcecode2) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (datasourcecode2 != nullptr) {
    
  } else {
    
  }
  datasourcecode2_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      datasourcecode2, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:szengine.WhyRecordsRequest.dataSourceCode2)
}

// string recordId2 = 4;
inline void WhyRecordsRequest::clear_recordid2() {
  recordid2_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& WhyRecordsRequest::recordid2() const {
  // @@protoc_insertion_point(field_get:szengine.WhyRecordsRequest.recordId2)
  return _internal_recordid2();
}
inline void WhyRecordsRequest::set_recordid2(const std::string& value) {
  _internal_set_recordid2(value);
  // @@protoc_insertion_point(field_set:szengine.WhyRecordsRequest.recordId2)
}
inline std::string* WhyRecordsRequest::mutable_recordid2() {
  // @@protoc_insertion_point(field_mutable:szengine.WhyRecordsRequest.recordId2)
  return _internal_mutable_recordid2();
}
inline const std::string& WhyRecordsRequest::_internal_recordid2() const {
  return recordid2_.Get();
}
inline void WhyRecordsRequest::_internal_set_recordid2(const std::string& value) {
  
  recordid2_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void WhyRecordsRequest::set_recordid2(std::string&& value) {
  
  recordid2_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:szengine.WhyRecordsRequest.recordId2)
}
inline void WhyRecordsRequest::set_recordid2(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  recordid2_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:szengine.WhyRecordsRequest.recordId2)
}
inline void WhyRecordsRequest::set_recordid2(const char* value,
    size_t size) {
  
  recordid2_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:szengine.WhyRecordsRequest.recordId2)
}
inline std::string* WhyRecordsRequest::_internal_mutable_recordid2() {
  
  return recordid2_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* WhyRecordsRequest::release_recordid2() {
  // @@protoc_insertion_point(field_release:szengine.WhyRecordsRequest.recordId2)
  return recordid2_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void WhyRecordsRequest::set_allocated_recordid2(std::string* recordid2) {
  if (recordid2 != nullptr) {
    
  } else {
    
  }
  recordid2_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), recordid2,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:szengine.WhyRecordsRequest.recordId2)
}
inline std::string* WhyRecordsRequest::unsafe_arena_release_recordid2() {
  // @@protoc_insertion_point(field_unsafe_arena_release:szengine.WhyRecordsRequest.recordId2)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return recordid2_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void WhyRecordsRequest::unsafe_arena_set_allocated_recordid2(
    std::string* recordid2) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (recordid2 != nullptr) {
    
  } else {
    
  }
  recordid2_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      recordid2, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:szengine.WhyRecordsRequest.recordId2)
}

// int64 flags = 5;
inline void WhyRecordsRequest::clear_flags() {
  flags_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 WhyRecordsRequest::_internal_flags() const {
  return flags_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 WhyRecordsRequest::flags() const {
  // @@protoc_insertion_point(field_get:szengine.WhyRecordsRequest.flags)
  return _internal_flags();
}
inline void WhyRecordsRequest::_internal_set_flags(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  flags_ = value;
}
inline void WhyRecordsRequest::set_flags(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_flags(value);
  // @@protoc_insertion_point(field_set:szengine.WhyRecordsRequest.flags)
}

// -------------------------------------------------------------------

// WhyRecordsResponse

// string result = 1;
inline void WhyRecordsResponse::clear_result() {
  result_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& WhyRecordsResponse::result() const {
  // @@protoc_insertion_point(field_get:szengine.WhyRecordsResponse.result)
  return _internal_result();
}
inline void WhyRecordsResponse::set_result(const std::string& value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:szengine.WhyRecordsResponse.result)
}
inline std::string* WhyRecordsResponse::mutable_result() {
  // @@protoc_insertion_point(field_mutable:szengine.WhyRecordsResponse.result)
  return _internal_mutable_result();
}
inline const std::string& WhyRecordsResponse::_internal_result() const {
  return result_.Get();
}
inline void WhyRecordsResponse::_internal_set_result(const std::string& value) {
  
  result_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void WhyRecordsResponse::set_result(std::string&& value) {
  
  result_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:szengine.WhyRecordsResponse.result)
}
inline void WhyRecordsResponse::set_result(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  result_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:szengine.WhyRecordsResponse.result)
}
inline void WhyRecordsResponse::set_result(const char* value,
    size_t size) {
  
  result_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:szengine.WhyRecordsResponse.result)
}
inline std::string* WhyRecordsResponse::_internal_mutable_result() {
  
  return result_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* WhyRecordsResponse::release_result() {
  // @@protoc_insertion_point(field_release:szengine.WhyRecordsResponse.result)
  return result_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void WhyRecordsResponse::set_allocated_result(std::string* result) {
  if (result != nullptr) {
    
  } else {
    
  }
  result_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), result,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:szengine.WhyRecordsResponse.result)
}
inline std::string* WhyRecordsResponse::unsafe_arena_release_result() {
  // @@protoc_insertion_point(field_unsafe_arena_release:szengine.WhyRecordsResponse.result)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return result_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void WhyRecordsResponse::unsafe_arena_set_allocated_result(
    std::string* result) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (result != nullptr) {
    
  } else {
    
  }
  result_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      result, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:szengine.WhyRecordsResponse.result)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace szengine

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_szengine_2eproto
