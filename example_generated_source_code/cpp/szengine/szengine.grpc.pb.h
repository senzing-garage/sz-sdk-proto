// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: szengine.proto
#ifndef GRPC_szengine_2eproto__INCLUDED
#define GRPC_szengine_2eproto__INCLUDED

#include "szengine.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace szengine {

class SzEngine final {
 public:
  static constexpr char const* service_full_name() {
    return "szengine.SzEngine";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status AddRecord(::grpc::ClientContext* context, const ::szengine::AddRecordRequest& request, ::szengine::AddRecordResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::szengine::AddRecordResponse>> AsyncAddRecord(::grpc::ClientContext* context, const ::szengine::AddRecordRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::szengine::AddRecordResponse>>(AsyncAddRecordRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::szengine::AddRecordResponse>> PrepareAsyncAddRecord(::grpc::ClientContext* context, const ::szengine::AddRecordRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::szengine::AddRecordResponse>>(PrepareAsyncAddRecordRaw(context, request, cq));
    }
    virtual ::grpc::Status CloseExportReport(::grpc::ClientContext* context, const ::szengine::CloseExportReportRequest& request, ::szengine::CloseExportReportResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::szengine::CloseExportReportResponse>> AsyncCloseExportReport(::grpc::ClientContext* context, const ::szengine::CloseExportReportRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::szengine::CloseExportReportResponse>>(AsyncCloseExportReportRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::szengine::CloseExportReportResponse>> PrepareAsyncCloseExportReport(::grpc::ClientContext* context, const ::szengine::CloseExportReportRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::szengine::CloseExportReportResponse>>(PrepareAsyncCloseExportReportRaw(context, request, cq));
    }
    virtual ::grpc::Status CountRedoRecords(::grpc::ClientContext* context, const ::szengine::CountRedoRecordsRequest& request, ::szengine::CountRedoRecordsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::szengine::CountRedoRecordsResponse>> AsyncCountRedoRecords(::grpc::ClientContext* context, const ::szengine::CountRedoRecordsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::szengine::CountRedoRecordsResponse>>(AsyncCountRedoRecordsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::szengine::CountRedoRecordsResponse>> PrepareAsyncCountRedoRecords(::grpc::ClientContext* context, const ::szengine::CountRedoRecordsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::szengine::CountRedoRecordsResponse>>(PrepareAsyncCountRedoRecordsRaw(context, request, cq));
    }
    virtual ::grpc::Status DeleteRecord(::grpc::ClientContext* context, const ::szengine::DeleteRecordRequest& request, ::szengine::DeleteRecordResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::szengine::DeleteRecordResponse>> AsyncDeleteRecord(::grpc::ClientContext* context, const ::szengine::DeleteRecordRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::szengine::DeleteRecordResponse>>(AsyncDeleteRecordRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::szengine::DeleteRecordResponse>> PrepareAsyncDeleteRecord(::grpc::ClientContext* context, const ::szengine::DeleteRecordRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::szengine::DeleteRecordResponse>>(PrepareAsyncDeleteRecordRaw(context, request, cq));
    }
    virtual ::grpc::Status ExportCsvEntityReport(::grpc::ClientContext* context, const ::szengine::ExportCsvEntityReportRequest& request, ::szengine::ExportCsvEntityReportResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::szengine::ExportCsvEntityReportResponse>> AsyncExportCsvEntityReport(::grpc::ClientContext* context, const ::szengine::ExportCsvEntityReportRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::szengine::ExportCsvEntityReportResponse>>(AsyncExportCsvEntityReportRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::szengine::ExportCsvEntityReportResponse>> PrepareAsyncExportCsvEntityReport(::grpc::ClientContext* context, const ::szengine::ExportCsvEntityReportRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::szengine::ExportCsvEntityReportResponse>>(PrepareAsyncExportCsvEntityReportRaw(context, request, cq));
    }
    virtual ::grpc::Status ExportJsonEntityReport(::grpc::ClientContext* context, const ::szengine::ExportJsonEntityReportRequest& request, ::szengine::ExportJsonEntityReportResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::szengine::ExportJsonEntityReportResponse>> AsyncExportJsonEntityReport(::grpc::ClientContext* context, const ::szengine::ExportJsonEntityReportRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::szengine::ExportJsonEntityReportResponse>>(AsyncExportJsonEntityReportRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::szengine::ExportJsonEntityReportResponse>> PrepareAsyncExportJsonEntityReport(::grpc::ClientContext* context, const ::szengine::ExportJsonEntityReportRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::szengine::ExportJsonEntityReportResponse>>(PrepareAsyncExportJsonEntityReportRaw(context, request, cq));
    }
    virtual ::grpc::Status FetchNext(::grpc::ClientContext* context, const ::szengine::FetchNextRequest& request, ::szengine::FetchNextResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::szengine::FetchNextResponse>> AsyncFetchNext(::grpc::ClientContext* context, const ::szengine::FetchNextRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::szengine::FetchNextResponse>>(AsyncFetchNextRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::szengine::FetchNextResponse>> PrepareAsyncFetchNext(::grpc::ClientContext* context, const ::szengine::FetchNextRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::szengine::FetchNextResponse>>(PrepareAsyncFetchNextRaw(context, request, cq));
    }
    virtual ::grpc::Status FindInterestingEntitiesByEntityId(::grpc::ClientContext* context, const ::szengine::FindInterestingEntitiesByEntityIdRequest& request, ::szengine::FindInterestingEntitiesByEntityIdResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::szengine::FindInterestingEntitiesByEntityIdResponse>> AsyncFindInterestingEntitiesByEntityId(::grpc::ClientContext* context, const ::szengine::FindInterestingEntitiesByEntityIdRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::szengine::FindInterestingEntitiesByEntityIdResponse>>(AsyncFindInterestingEntitiesByEntityIdRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::szengine::FindInterestingEntitiesByEntityIdResponse>> PrepareAsyncFindInterestingEntitiesByEntityId(::grpc::ClientContext* context, const ::szengine::FindInterestingEntitiesByEntityIdRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::szengine::FindInterestingEntitiesByEntityIdResponse>>(PrepareAsyncFindInterestingEntitiesByEntityIdRaw(context, request, cq));
    }
    virtual ::grpc::Status FindInterestingEntitiesByRecordId(::grpc::ClientContext* context, const ::szengine::FindInterestingEntitiesByRecordIdRequest& request, ::szengine::FindInterestingEntitiesByRecordIdResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::szengine::FindInterestingEntitiesByRecordIdResponse>> AsyncFindInterestingEntitiesByRecordId(::grpc::ClientContext* context, const ::szengine::FindInterestingEntitiesByRecordIdRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::szengine::FindInterestingEntitiesByRecordIdResponse>>(AsyncFindInterestingEntitiesByRecordIdRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::szengine::FindInterestingEntitiesByRecordIdResponse>> PrepareAsyncFindInterestingEntitiesByRecordId(::grpc::ClientContext* context, const ::szengine::FindInterestingEntitiesByRecordIdRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::szengine::FindInterestingEntitiesByRecordIdResponse>>(PrepareAsyncFindInterestingEntitiesByRecordIdRaw(context, request, cq));
    }
    virtual ::grpc::Status FindNetworkByEntityId(::grpc::ClientContext* context, const ::szengine::FindNetworkByEntityIdRequest& request, ::szengine::FindNetworkByEntityIdResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::szengine::FindNetworkByEntityIdResponse>> AsyncFindNetworkByEntityId(::grpc::ClientContext* context, const ::szengine::FindNetworkByEntityIdRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::szengine::FindNetworkByEntityIdResponse>>(AsyncFindNetworkByEntityIdRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::szengine::FindNetworkByEntityIdResponse>> PrepareAsyncFindNetworkByEntityId(::grpc::ClientContext* context, const ::szengine::FindNetworkByEntityIdRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::szengine::FindNetworkByEntityIdResponse>>(PrepareAsyncFindNetworkByEntityIdRaw(context, request, cq));
    }
    virtual ::grpc::Status FindNetworkByRecordId(::grpc::ClientContext* context, const ::szengine::FindNetworkByRecordIdRequest& request, ::szengine::FindNetworkByRecordIdResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::szengine::FindNetworkByRecordIdResponse>> AsyncFindNetworkByRecordId(::grpc::ClientContext* context, const ::szengine::FindNetworkByRecordIdRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::szengine::FindNetworkByRecordIdResponse>>(AsyncFindNetworkByRecordIdRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::szengine::FindNetworkByRecordIdResponse>> PrepareAsyncFindNetworkByRecordId(::grpc::ClientContext* context, const ::szengine::FindNetworkByRecordIdRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::szengine::FindNetworkByRecordIdResponse>>(PrepareAsyncFindNetworkByRecordIdRaw(context, request, cq));
    }
    virtual ::grpc::Status FindPathByEntityId(::grpc::ClientContext* context, const ::szengine::FindPathByEntityIdRequest& request, ::szengine::FindPathByEntityIdResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::szengine::FindPathByEntityIdResponse>> AsyncFindPathByEntityId(::grpc::ClientContext* context, const ::szengine::FindPathByEntityIdRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::szengine::FindPathByEntityIdResponse>>(AsyncFindPathByEntityIdRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::szengine::FindPathByEntityIdResponse>> PrepareAsyncFindPathByEntityId(::grpc::ClientContext* context, const ::szengine::FindPathByEntityIdRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::szengine::FindPathByEntityIdResponse>>(PrepareAsyncFindPathByEntityIdRaw(context, request, cq));
    }
    virtual ::grpc::Status FindPathByRecordId(::grpc::ClientContext* context, const ::szengine::FindPathByRecordIdRequest& request, ::szengine::FindPathByRecordIdResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::szengine::FindPathByRecordIdResponse>> AsyncFindPathByRecordId(::grpc::ClientContext* context, const ::szengine::FindPathByRecordIdRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::szengine::FindPathByRecordIdResponse>>(AsyncFindPathByRecordIdRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::szengine::FindPathByRecordIdResponse>> PrepareAsyncFindPathByRecordId(::grpc::ClientContext* context, const ::szengine::FindPathByRecordIdRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::szengine::FindPathByRecordIdResponse>>(PrepareAsyncFindPathByRecordIdRaw(context, request, cq));
    }
    virtual ::grpc::Status GetActiveConfigId(::grpc::ClientContext* context, const ::szengine::GetActiveConfigIdRequest& request, ::szengine::GetActiveConfigIdResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::szengine::GetActiveConfigIdResponse>> AsyncGetActiveConfigId(::grpc::ClientContext* context, const ::szengine::GetActiveConfigIdRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::szengine::GetActiveConfigIdResponse>>(AsyncGetActiveConfigIdRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::szengine::GetActiveConfigIdResponse>> PrepareAsyncGetActiveConfigId(::grpc::ClientContext* context, const ::szengine::GetActiveConfigIdRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::szengine::GetActiveConfigIdResponse>>(PrepareAsyncGetActiveConfigIdRaw(context, request, cq));
    }
    virtual ::grpc::Status GetEntityByEntityId(::grpc::ClientContext* context, const ::szengine::GetEntityByEntityIdRequest& request, ::szengine::GetEntityByEntityIdResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::szengine::GetEntityByEntityIdResponse>> AsyncGetEntityByEntityId(::grpc::ClientContext* context, const ::szengine::GetEntityByEntityIdRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::szengine::GetEntityByEntityIdResponse>>(AsyncGetEntityByEntityIdRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::szengine::GetEntityByEntityIdResponse>> PrepareAsyncGetEntityByEntityId(::grpc::ClientContext* context, const ::szengine::GetEntityByEntityIdRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::szengine::GetEntityByEntityIdResponse>>(PrepareAsyncGetEntityByEntityIdRaw(context, request, cq));
    }
    virtual ::grpc::Status GetEntityByRecordId(::grpc::ClientContext* context, const ::szengine::GetEntityByRecordIdRequest& request, ::szengine::GetEntityByRecordIdResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::szengine::GetEntityByRecordIdResponse>> AsyncGetEntityByRecordId(::grpc::ClientContext* context, const ::szengine::GetEntityByRecordIdRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::szengine::GetEntityByRecordIdResponse>>(AsyncGetEntityByRecordIdRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::szengine::GetEntityByRecordIdResponse>> PrepareAsyncGetEntityByRecordId(::grpc::ClientContext* context, const ::szengine::GetEntityByRecordIdRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::szengine::GetEntityByRecordIdResponse>>(PrepareAsyncGetEntityByRecordIdRaw(context, request, cq));
    }
    virtual ::grpc::Status GetRecord(::grpc::ClientContext* context, const ::szengine::GetRecordRequest& request, ::szengine::GetRecordResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::szengine::GetRecordResponse>> AsyncGetRecord(::grpc::ClientContext* context, const ::szengine::GetRecordRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::szengine::GetRecordResponse>>(AsyncGetRecordRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::szengine::GetRecordResponse>> PrepareAsyncGetRecord(::grpc::ClientContext* context, const ::szengine::GetRecordRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::szengine::GetRecordResponse>>(PrepareAsyncGetRecordRaw(context, request, cq));
    }
    virtual ::grpc::Status GetRedoRecord(::grpc::ClientContext* context, const ::szengine::GetRedoRecordRequest& request, ::szengine::GetRedoRecordResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::szengine::GetRedoRecordResponse>> AsyncGetRedoRecord(::grpc::ClientContext* context, const ::szengine::GetRedoRecordRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::szengine::GetRedoRecordResponse>>(AsyncGetRedoRecordRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::szengine::GetRedoRecordResponse>> PrepareAsyncGetRedoRecord(::grpc::ClientContext* context, const ::szengine::GetRedoRecordRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::szengine::GetRedoRecordResponse>>(PrepareAsyncGetRedoRecordRaw(context, request, cq));
    }
    virtual ::grpc::Status GetStats(::grpc::ClientContext* context, const ::szengine::GetStatsRequest& request, ::szengine::GetStatsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::szengine::GetStatsResponse>> AsyncGetStats(::grpc::ClientContext* context, const ::szengine::GetStatsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::szengine::GetStatsResponse>>(AsyncGetStatsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::szengine::GetStatsResponse>> PrepareAsyncGetStats(::grpc::ClientContext* context, const ::szengine::GetStatsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::szengine::GetStatsResponse>>(PrepareAsyncGetStatsRaw(context, request, cq));
    }
    virtual ::grpc::Status GetVirtualEntityByRecordId(::grpc::ClientContext* context, const ::szengine::GetVirtualEntityByRecordIdRequest& request, ::szengine::GetVirtualEntityByRecordIdResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::szengine::GetVirtualEntityByRecordIdResponse>> AsyncGetVirtualEntityByRecordId(::grpc::ClientContext* context, const ::szengine::GetVirtualEntityByRecordIdRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::szengine::GetVirtualEntityByRecordIdResponse>>(AsyncGetVirtualEntityByRecordIdRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::szengine::GetVirtualEntityByRecordIdResponse>> PrepareAsyncGetVirtualEntityByRecordId(::grpc::ClientContext* context, const ::szengine::GetVirtualEntityByRecordIdRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::szengine::GetVirtualEntityByRecordIdResponse>>(PrepareAsyncGetVirtualEntityByRecordIdRaw(context, request, cq));
    }
    virtual ::grpc::Status HowEntityByEntityId(::grpc::ClientContext* context, const ::szengine::HowEntityByEntityIdRequest& request, ::szengine::HowEntityByEntityIdResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::szengine::HowEntityByEntityIdResponse>> AsyncHowEntityByEntityId(::grpc::ClientContext* context, const ::szengine::HowEntityByEntityIdRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::szengine::HowEntityByEntityIdResponse>>(AsyncHowEntityByEntityIdRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::szengine::HowEntityByEntityIdResponse>> PrepareAsyncHowEntityByEntityId(::grpc::ClientContext* context, const ::szengine::HowEntityByEntityIdRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::szengine::HowEntityByEntityIdResponse>>(PrepareAsyncHowEntityByEntityIdRaw(context, request, cq));
    }
    virtual ::grpc::Status PreprocessRecord(::grpc::ClientContext* context, const ::szengine::PreprocessRecordRequest& request, ::szengine::PreprocessRecordResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::szengine::PreprocessRecordResponse>> AsyncPreprocessRecord(::grpc::ClientContext* context, const ::szengine::PreprocessRecordRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::szengine::PreprocessRecordResponse>>(AsyncPreprocessRecordRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::szengine::PreprocessRecordResponse>> PrepareAsyncPreprocessRecord(::grpc::ClientContext* context, const ::szengine::PreprocessRecordRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::szengine::PreprocessRecordResponse>>(PrepareAsyncPreprocessRecordRaw(context, request, cq));
    }
    virtual ::grpc::Status PrimeEngine(::grpc::ClientContext* context, const ::szengine::PrimeEngineRequest& request, ::szengine::PrimeEngineResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::szengine::PrimeEngineResponse>> AsyncPrimeEngine(::grpc::ClientContext* context, const ::szengine::PrimeEngineRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::szengine::PrimeEngineResponse>>(AsyncPrimeEngineRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::szengine::PrimeEngineResponse>> PrepareAsyncPrimeEngine(::grpc::ClientContext* context, const ::szengine::PrimeEngineRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::szengine::PrimeEngineResponse>>(PrepareAsyncPrimeEngineRaw(context, request, cq));
    }
    virtual ::grpc::Status ProcessRedoRecord(::grpc::ClientContext* context, const ::szengine::ProcessRedoRecordRequest& request, ::szengine::ProcessRedoRecordResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::szengine::ProcessRedoRecordResponse>> AsyncProcessRedoRecord(::grpc::ClientContext* context, const ::szengine::ProcessRedoRecordRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::szengine::ProcessRedoRecordResponse>>(AsyncProcessRedoRecordRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::szengine::ProcessRedoRecordResponse>> PrepareAsyncProcessRedoRecord(::grpc::ClientContext* context, const ::szengine::ProcessRedoRecordRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::szengine::ProcessRedoRecordResponse>>(PrepareAsyncProcessRedoRecordRaw(context, request, cq));
    }
    virtual ::grpc::Status ReevaluateEntity(::grpc::ClientContext* context, const ::szengine::ReevaluateEntityRequest& request, ::szengine::ReevaluateEntityResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::szengine::ReevaluateEntityResponse>> AsyncReevaluateEntity(::grpc::ClientContext* context, const ::szengine::ReevaluateEntityRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::szengine::ReevaluateEntityResponse>>(AsyncReevaluateEntityRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::szengine::ReevaluateEntityResponse>> PrepareAsyncReevaluateEntity(::grpc::ClientContext* context, const ::szengine::ReevaluateEntityRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::szengine::ReevaluateEntityResponse>>(PrepareAsyncReevaluateEntityRaw(context, request, cq));
    }
    virtual ::grpc::Status ReevaluateRecord(::grpc::ClientContext* context, const ::szengine::ReevaluateRecordRequest& request, ::szengine::ReevaluateRecordResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::szengine::ReevaluateRecordResponse>> AsyncReevaluateRecord(::grpc::ClientContext* context, const ::szengine::ReevaluateRecordRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::szengine::ReevaluateRecordResponse>>(AsyncReevaluateRecordRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::szengine::ReevaluateRecordResponse>> PrepareAsyncReevaluateRecord(::grpc::ClientContext* context, const ::szengine::ReevaluateRecordRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::szengine::ReevaluateRecordResponse>>(PrepareAsyncReevaluateRecordRaw(context, request, cq));
    }
    virtual ::grpc::Status Reinitialize(::grpc::ClientContext* context, const ::szengine::ReinitializeRequest& request, ::szengine::ReinitializeResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::szengine::ReinitializeResponse>> AsyncReinitialize(::grpc::ClientContext* context, const ::szengine::ReinitializeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::szengine::ReinitializeResponse>>(AsyncReinitializeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::szengine::ReinitializeResponse>> PrepareAsyncReinitialize(::grpc::ClientContext* context, const ::szengine::ReinitializeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::szengine::ReinitializeResponse>>(PrepareAsyncReinitializeRaw(context, request, cq));
    }
    virtual ::grpc::Status SearchByAttributes(::grpc::ClientContext* context, const ::szengine::SearchByAttributesRequest& request, ::szengine::SearchByAttributesResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::szengine::SearchByAttributesResponse>> AsyncSearchByAttributes(::grpc::ClientContext* context, const ::szengine::SearchByAttributesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::szengine::SearchByAttributesResponse>>(AsyncSearchByAttributesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::szengine::SearchByAttributesResponse>> PrepareAsyncSearchByAttributes(::grpc::ClientContext* context, const ::szengine::SearchByAttributesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::szengine::SearchByAttributesResponse>>(PrepareAsyncSearchByAttributesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderInterface< ::szengine::StreamExportCsvEntityReportResponse>> StreamExportCsvEntityReport(::grpc::ClientContext* context, const ::szengine::StreamExportCsvEntityReportRequest& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::szengine::StreamExportCsvEntityReportResponse>>(StreamExportCsvEntityReportRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::szengine::StreamExportCsvEntityReportResponse>> AsyncStreamExportCsvEntityReport(::grpc::ClientContext* context, const ::szengine::StreamExportCsvEntityReportRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::szengine::StreamExportCsvEntityReportResponse>>(AsyncStreamExportCsvEntityReportRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::szengine::StreamExportCsvEntityReportResponse>> PrepareAsyncStreamExportCsvEntityReport(::grpc::ClientContext* context, const ::szengine::StreamExportCsvEntityReportRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::szengine::StreamExportCsvEntityReportResponse>>(PrepareAsyncStreamExportCsvEntityReportRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderInterface< ::szengine::StreamExportJsonEntityReportResponse>> StreamExportJsonEntityReport(::grpc::ClientContext* context, const ::szengine::StreamExportJsonEntityReportRequest& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::szengine::StreamExportJsonEntityReportResponse>>(StreamExportJsonEntityReportRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::szengine::StreamExportJsonEntityReportResponse>> AsyncStreamExportJsonEntityReport(::grpc::ClientContext* context, const ::szengine::StreamExportJsonEntityReportRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::szengine::StreamExportJsonEntityReportResponse>>(AsyncStreamExportJsonEntityReportRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::szengine::StreamExportJsonEntityReportResponse>> PrepareAsyncStreamExportJsonEntityReport(::grpc::ClientContext* context, const ::szengine::StreamExportJsonEntityReportRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::szengine::StreamExportJsonEntityReportResponse>>(PrepareAsyncStreamExportJsonEntityReportRaw(context, request, cq));
    }
    virtual ::grpc::Status WhyEntities(::grpc::ClientContext* context, const ::szengine::WhyEntitiesRequest& request, ::szengine::WhyEntitiesResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::szengine::WhyEntitiesResponse>> AsyncWhyEntities(::grpc::ClientContext* context, const ::szengine::WhyEntitiesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::szengine::WhyEntitiesResponse>>(AsyncWhyEntitiesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::szengine::WhyEntitiesResponse>> PrepareAsyncWhyEntities(::grpc::ClientContext* context, const ::szengine::WhyEntitiesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::szengine::WhyEntitiesResponse>>(PrepareAsyncWhyEntitiesRaw(context, request, cq));
    }
    virtual ::grpc::Status WhyRecordInEntity(::grpc::ClientContext* context, const ::szengine::WhyRecordInEntityRequest& request, ::szengine::WhyRecordInEntityResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::szengine::WhyRecordInEntityResponse>> AsyncWhyRecordInEntity(::grpc::ClientContext* context, const ::szengine::WhyRecordInEntityRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::szengine::WhyRecordInEntityResponse>>(AsyncWhyRecordInEntityRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::szengine::WhyRecordInEntityResponse>> PrepareAsyncWhyRecordInEntity(::grpc::ClientContext* context, const ::szengine::WhyRecordInEntityRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::szengine::WhyRecordInEntityResponse>>(PrepareAsyncWhyRecordInEntityRaw(context, request, cq));
    }
    virtual ::grpc::Status WhyRecords(::grpc::ClientContext* context, const ::szengine::WhyRecordsRequest& request, ::szengine::WhyRecordsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::szengine::WhyRecordsResponse>> AsyncWhyRecords(::grpc::ClientContext* context, const ::szengine::WhyRecordsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::szengine::WhyRecordsResponse>>(AsyncWhyRecordsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::szengine::WhyRecordsResponse>> PrepareAsyncWhyRecords(::grpc::ClientContext* context, const ::szengine::WhyRecordsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::szengine::WhyRecordsResponse>>(PrepareAsyncWhyRecordsRaw(context, request, cq));
    }
    virtual ::grpc::Status WhySearch(::grpc::ClientContext* context, const ::szengine::WhySearchRequest& request, ::szengine::WhySearchResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::szengine::WhySearchResponse>> AsyncWhySearch(::grpc::ClientContext* context, const ::szengine::WhySearchRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::szengine::WhySearchResponse>>(AsyncWhySearchRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::szengine::WhySearchResponse>> PrepareAsyncWhySearch(::grpc::ClientContext* context, const ::szengine::WhySearchRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::szengine::WhySearchResponse>>(PrepareAsyncWhySearchRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void AddRecord(::grpc::ClientContext* context, const ::szengine::AddRecordRequest* request, ::szengine::AddRecordResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void AddRecord(::grpc::ClientContext* context, const ::szengine::AddRecordRequest* request, ::szengine::AddRecordResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void CloseExportReport(::grpc::ClientContext* context, const ::szengine::CloseExportReportRequest* request, ::szengine::CloseExportReportResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CloseExportReport(::grpc::ClientContext* context, const ::szengine::CloseExportReportRequest* request, ::szengine::CloseExportReportResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void CountRedoRecords(::grpc::ClientContext* context, const ::szengine::CountRedoRecordsRequest* request, ::szengine::CountRedoRecordsResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CountRedoRecords(::grpc::ClientContext* context, const ::szengine::CountRedoRecordsRequest* request, ::szengine::CountRedoRecordsResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void DeleteRecord(::grpc::ClientContext* context, const ::szengine::DeleteRecordRequest* request, ::szengine::DeleteRecordResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DeleteRecord(::grpc::ClientContext* context, const ::szengine::DeleteRecordRequest* request, ::szengine::DeleteRecordResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void ExportCsvEntityReport(::grpc::ClientContext* context, const ::szengine::ExportCsvEntityReportRequest* request, ::szengine::ExportCsvEntityReportResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ExportCsvEntityReport(::grpc::ClientContext* context, const ::szengine::ExportCsvEntityReportRequest* request, ::szengine::ExportCsvEntityReportResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void ExportJsonEntityReport(::grpc::ClientContext* context, const ::szengine::ExportJsonEntityReportRequest* request, ::szengine::ExportJsonEntityReportResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ExportJsonEntityReport(::grpc::ClientContext* context, const ::szengine::ExportJsonEntityReportRequest* request, ::szengine::ExportJsonEntityReportResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void FetchNext(::grpc::ClientContext* context, const ::szengine::FetchNextRequest* request, ::szengine::FetchNextResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void FetchNext(::grpc::ClientContext* context, const ::szengine::FetchNextRequest* request, ::szengine::FetchNextResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void FindInterestingEntitiesByEntityId(::grpc::ClientContext* context, const ::szengine::FindInterestingEntitiesByEntityIdRequest* request, ::szengine::FindInterestingEntitiesByEntityIdResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void FindInterestingEntitiesByEntityId(::grpc::ClientContext* context, const ::szengine::FindInterestingEntitiesByEntityIdRequest* request, ::szengine::FindInterestingEntitiesByEntityIdResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void FindInterestingEntitiesByRecordId(::grpc::ClientContext* context, const ::szengine::FindInterestingEntitiesByRecordIdRequest* request, ::szengine::FindInterestingEntitiesByRecordIdResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void FindInterestingEntitiesByRecordId(::grpc::ClientContext* context, const ::szengine::FindInterestingEntitiesByRecordIdRequest* request, ::szengine::FindInterestingEntitiesByRecordIdResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void FindNetworkByEntityId(::grpc::ClientContext* context, const ::szengine::FindNetworkByEntityIdRequest* request, ::szengine::FindNetworkByEntityIdResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void FindNetworkByEntityId(::grpc::ClientContext* context, const ::szengine::FindNetworkByEntityIdRequest* request, ::szengine::FindNetworkByEntityIdResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void FindNetworkByRecordId(::grpc::ClientContext* context, const ::szengine::FindNetworkByRecordIdRequest* request, ::szengine::FindNetworkByRecordIdResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void FindNetworkByRecordId(::grpc::ClientContext* context, const ::szengine::FindNetworkByRecordIdRequest* request, ::szengine::FindNetworkByRecordIdResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void FindPathByEntityId(::grpc::ClientContext* context, const ::szengine::FindPathByEntityIdRequest* request, ::szengine::FindPathByEntityIdResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void FindPathByEntityId(::grpc::ClientContext* context, const ::szengine::FindPathByEntityIdRequest* request, ::szengine::FindPathByEntityIdResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void FindPathByRecordId(::grpc::ClientContext* context, const ::szengine::FindPathByRecordIdRequest* request, ::szengine::FindPathByRecordIdResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void FindPathByRecordId(::grpc::ClientContext* context, const ::szengine::FindPathByRecordIdRequest* request, ::szengine::FindPathByRecordIdResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetActiveConfigId(::grpc::ClientContext* context, const ::szengine::GetActiveConfigIdRequest* request, ::szengine::GetActiveConfigIdResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetActiveConfigId(::grpc::ClientContext* context, const ::szengine::GetActiveConfigIdRequest* request, ::szengine::GetActiveConfigIdResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetEntityByEntityId(::grpc::ClientContext* context, const ::szengine::GetEntityByEntityIdRequest* request, ::szengine::GetEntityByEntityIdResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetEntityByEntityId(::grpc::ClientContext* context, const ::szengine::GetEntityByEntityIdRequest* request, ::szengine::GetEntityByEntityIdResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetEntityByRecordId(::grpc::ClientContext* context, const ::szengine::GetEntityByRecordIdRequest* request, ::szengine::GetEntityByRecordIdResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetEntityByRecordId(::grpc::ClientContext* context, const ::szengine::GetEntityByRecordIdRequest* request, ::szengine::GetEntityByRecordIdResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetRecord(::grpc::ClientContext* context, const ::szengine::GetRecordRequest* request, ::szengine::GetRecordResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetRecord(::grpc::ClientContext* context, const ::szengine::GetRecordRequest* request, ::szengine::GetRecordResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetRedoRecord(::grpc::ClientContext* context, const ::szengine::GetRedoRecordRequest* request, ::szengine::GetRedoRecordResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetRedoRecord(::grpc::ClientContext* context, const ::szengine::GetRedoRecordRequest* request, ::szengine::GetRedoRecordResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetStats(::grpc::ClientContext* context, const ::szengine::GetStatsRequest* request, ::szengine::GetStatsResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetStats(::grpc::ClientContext* context, const ::szengine::GetStatsRequest* request, ::szengine::GetStatsResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetVirtualEntityByRecordId(::grpc::ClientContext* context, const ::szengine::GetVirtualEntityByRecordIdRequest* request, ::szengine::GetVirtualEntityByRecordIdResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetVirtualEntityByRecordId(::grpc::ClientContext* context, const ::szengine::GetVirtualEntityByRecordIdRequest* request, ::szengine::GetVirtualEntityByRecordIdResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void HowEntityByEntityId(::grpc::ClientContext* context, const ::szengine::HowEntityByEntityIdRequest* request, ::szengine::HowEntityByEntityIdResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void HowEntityByEntityId(::grpc::ClientContext* context, const ::szengine::HowEntityByEntityIdRequest* request, ::szengine::HowEntityByEntityIdResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void PreprocessRecord(::grpc::ClientContext* context, const ::szengine::PreprocessRecordRequest* request, ::szengine::PreprocessRecordResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void PreprocessRecord(::grpc::ClientContext* context, const ::szengine::PreprocessRecordRequest* request, ::szengine::PreprocessRecordResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void PrimeEngine(::grpc::ClientContext* context, const ::szengine::PrimeEngineRequest* request, ::szengine::PrimeEngineResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void PrimeEngine(::grpc::ClientContext* context, const ::szengine::PrimeEngineRequest* request, ::szengine::PrimeEngineResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void ProcessRedoRecord(::grpc::ClientContext* context, const ::szengine::ProcessRedoRecordRequest* request, ::szengine::ProcessRedoRecordResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ProcessRedoRecord(::grpc::ClientContext* context, const ::szengine::ProcessRedoRecordRequest* request, ::szengine::ProcessRedoRecordResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void ReevaluateEntity(::grpc::ClientContext* context, const ::szengine::ReevaluateEntityRequest* request, ::szengine::ReevaluateEntityResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ReevaluateEntity(::grpc::ClientContext* context, const ::szengine::ReevaluateEntityRequest* request, ::szengine::ReevaluateEntityResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void ReevaluateRecord(::grpc::ClientContext* context, const ::szengine::ReevaluateRecordRequest* request, ::szengine::ReevaluateRecordResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ReevaluateRecord(::grpc::ClientContext* context, const ::szengine::ReevaluateRecordRequest* request, ::szengine::ReevaluateRecordResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void Reinitialize(::grpc::ClientContext* context, const ::szengine::ReinitializeRequest* request, ::szengine::ReinitializeResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Reinitialize(::grpc::ClientContext* context, const ::szengine::ReinitializeRequest* request, ::szengine::ReinitializeResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void SearchByAttributes(::grpc::ClientContext* context, const ::szengine::SearchByAttributesRequest* request, ::szengine::SearchByAttributesResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SearchByAttributes(::grpc::ClientContext* context, const ::szengine::SearchByAttributesRequest* request, ::szengine::SearchByAttributesResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void StreamExportCsvEntityReport(::grpc::ClientContext* context, const ::szengine::StreamExportCsvEntityReportRequest* request, ::grpc::ClientReadReactor< ::szengine::StreamExportCsvEntityReportResponse>* reactor) = 0;
      virtual void StreamExportJsonEntityReport(::grpc::ClientContext* context, const ::szengine::StreamExportJsonEntityReportRequest* request, ::grpc::ClientReadReactor< ::szengine::StreamExportJsonEntityReportResponse>* reactor) = 0;
      virtual void WhyEntities(::grpc::ClientContext* context, const ::szengine::WhyEntitiesRequest* request, ::szengine::WhyEntitiesResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void WhyEntities(::grpc::ClientContext* context, const ::szengine::WhyEntitiesRequest* request, ::szengine::WhyEntitiesResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void WhyRecordInEntity(::grpc::ClientContext* context, const ::szengine::WhyRecordInEntityRequest* request, ::szengine::WhyRecordInEntityResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void WhyRecordInEntity(::grpc::ClientContext* context, const ::szengine::WhyRecordInEntityRequest* request, ::szengine::WhyRecordInEntityResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void WhyRecords(::grpc::ClientContext* context, const ::szengine::WhyRecordsRequest* request, ::szengine::WhyRecordsResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void WhyRecords(::grpc::ClientContext* context, const ::szengine::WhyRecordsRequest* request, ::szengine::WhyRecordsResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void WhySearch(::grpc::ClientContext* context, const ::szengine::WhySearchRequest* request, ::szengine::WhySearchResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void WhySearch(::grpc::ClientContext* context, const ::szengine::WhySearchRequest* request, ::szengine::WhySearchResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::szengine::AddRecordResponse>* AsyncAddRecordRaw(::grpc::ClientContext* context, const ::szengine::AddRecordRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::szengine::AddRecordResponse>* PrepareAsyncAddRecordRaw(::grpc::ClientContext* context, const ::szengine::AddRecordRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::szengine::CloseExportReportResponse>* AsyncCloseExportReportRaw(::grpc::ClientContext* context, const ::szengine::CloseExportReportRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::szengine::CloseExportReportResponse>* PrepareAsyncCloseExportReportRaw(::grpc::ClientContext* context, const ::szengine::CloseExportReportRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::szengine::CountRedoRecordsResponse>* AsyncCountRedoRecordsRaw(::grpc::ClientContext* context, const ::szengine::CountRedoRecordsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::szengine::CountRedoRecordsResponse>* PrepareAsyncCountRedoRecordsRaw(::grpc::ClientContext* context, const ::szengine::CountRedoRecordsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::szengine::DeleteRecordResponse>* AsyncDeleteRecordRaw(::grpc::ClientContext* context, const ::szengine::DeleteRecordRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::szengine::DeleteRecordResponse>* PrepareAsyncDeleteRecordRaw(::grpc::ClientContext* context, const ::szengine::DeleteRecordRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::szengine::ExportCsvEntityReportResponse>* AsyncExportCsvEntityReportRaw(::grpc::ClientContext* context, const ::szengine::ExportCsvEntityReportRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::szengine::ExportCsvEntityReportResponse>* PrepareAsyncExportCsvEntityReportRaw(::grpc::ClientContext* context, const ::szengine::ExportCsvEntityReportRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::szengine::ExportJsonEntityReportResponse>* AsyncExportJsonEntityReportRaw(::grpc::ClientContext* context, const ::szengine::ExportJsonEntityReportRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::szengine::ExportJsonEntityReportResponse>* PrepareAsyncExportJsonEntityReportRaw(::grpc::ClientContext* context, const ::szengine::ExportJsonEntityReportRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::szengine::FetchNextResponse>* AsyncFetchNextRaw(::grpc::ClientContext* context, const ::szengine::FetchNextRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::szengine::FetchNextResponse>* PrepareAsyncFetchNextRaw(::grpc::ClientContext* context, const ::szengine::FetchNextRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::szengine::FindInterestingEntitiesByEntityIdResponse>* AsyncFindInterestingEntitiesByEntityIdRaw(::grpc::ClientContext* context, const ::szengine::FindInterestingEntitiesByEntityIdRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::szengine::FindInterestingEntitiesByEntityIdResponse>* PrepareAsyncFindInterestingEntitiesByEntityIdRaw(::grpc::ClientContext* context, const ::szengine::FindInterestingEntitiesByEntityIdRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::szengine::FindInterestingEntitiesByRecordIdResponse>* AsyncFindInterestingEntitiesByRecordIdRaw(::grpc::ClientContext* context, const ::szengine::FindInterestingEntitiesByRecordIdRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::szengine::FindInterestingEntitiesByRecordIdResponse>* PrepareAsyncFindInterestingEntitiesByRecordIdRaw(::grpc::ClientContext* context, const ::szengine::FindInterestingEntitiesByRecordIdRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::szengine::FindNetworkByEntityIdResponse>* AsyncFindNetworkByEntityIdRaw(::grpc::ClientContext* context, const ::szengine::FindNetworkByEntityIdRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::szengine::FindNetworkByEntityIdResponse>* PrepareAsyncFindNetworkByEntityIdRaw(::grpc::ClientContext* context, const ::szengine::FindNetworkByEntityIdRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::szengine::FindNetworkByRecordIdResponse>* AsyncFindNetworkByRecordIdRaw(::grpc::ClientContext* context, const ::szengine::FindNetworkByRecordIdRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::szengine::FindNetworkByRecordIdResponse>* PrepareAsyncFindNetworkByRecordIdRaw(::grpc::ClientContext* context, const ::szengine::FindNetworkByRecordIdRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::szengine::FindPathByEntityIdResponse>* AsyncFindPathByEntityIdRaw(::grpc::ClientContext* context, const ::szengine::FindPathByEntityIdRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::szengine::FindPathByEntityIdResponse>* PrepareAsyncFindPathByEntityIdRaw(::grpc::ClientContext* context, const ::szengine::FindPathByEntityIdRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::szengine::FindPathByRecordIdResponse>* AsyncFindPathByRecordIdRaw(::grpc::ClientContext* context, const ::szengine::FindPathByRecordIdRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::szengine::FindPathByRecordIdResponse>* PrepareAsyncFindPathByRecordIdRaw(::grpc::ClientContext* context, const ::szengine::FindPathByRecordIdRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::szengine::GetActiveConfigIdResponse>* AsyncGetActiveConfigIdRaw(::grpc::ClientContext* context, const ::szengine::GetActiveConfigIdRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::szengine::GetActiveConfigIdResponse>* PrepareAsyncGetActiveConfigIdRaw(::grpc::ClientContext* context, const ::szengine::GetActiveConfigIdRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::szengine::GetEntityByEntityIdResponse>* AsyncGetEntityByEntityIdRaw(::grpc::ClientContext* context, const ::szengine::GetEntityByEntityIdRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::szengine::GetEntityByEntityIdResponse>* PrepareAsyncGetEntityByEntityIdRaw(::grpc::ClientContext* context, const ::szengine::GetEntityByEntityIdRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::szengine::GetEntityByRecordIdResponse>* AsyncGetEntityByRecordIdRaw(::grpc::ClientContext* context, const ::szengine::GetEntityByRecordIdRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::szengine::GetEntityByRecordIdResponse>* PrepareAsyncGetEntityByRecordIdRaw(::grpc::ClientContext* context, const ::szengine::GetEntityByRecordIdRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::szengine::GetRecordResponse>* AsyncGetRecordRaw(::grpc::ClientContext* context, const ::szengine::GetRecordRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::szengine::GetRecordResponse>* PrepareAsyncGetRecordRaw(::grpc::ClientContext* context, const ::szengine::GetRecordRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::szengine::GetRedoRecordResponse>* AsyncGetRedoRecordRaw(::grpc::ClientContext* context, const ::szengine::GetRedoRecordRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::szengine::GetRedoRecordResponse>* PrepareAsyncGetRedoRecordRaw(::grpc::ClientContext* context, const ::szengine::GetRedoRecordRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::szengine::GetStatsResponse>* AsyncGetStatsRaw(::grpc::ClientContext* context, const ::szengine::GetStatsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::szengine::GetStatsResponse>* PrepareAsyncGetStatsRaw(::grpc::ClientContext* context, const ::szengine::GetStatsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::szengine::GetVirtualEntityByRecordIdResponse>* AsyncGetVirtualEntityByRecordIdRaw(::grpc::ClientContext* context, const ::szengine::GetVirtualEntityByRecordIdRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::szengine::GetVirtualEntityByRecordIdResponse>* PrepareAsyncGetVirtualEntityByRecordIdRaw(::grpc::ClientContext* context, const ::szengine::GetVirtualEntityByRecordIdRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::szengine::HowEntityByEntityIdResponse>* AsyncHowEntityByEntityIdRaw(::grpc::ClientContext* context, const ::szengine::HowEntityByEntityIdRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::szengine::HowEntityByEntityIdResponse>* PrepareAsyncHowEntityByEntityIdRaw(::grpc::ClientContext* context, const ::szengine::HowEntityByEntityIdRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::szengine::PreprocessRecordResponse>* AsyncPreprocessRecordRaw(::grpc::ClientContext* context, const ::szengine::PreprocessRecordRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::szengine::PreprocessRecordResponse>* PrepareAsyncPreprocessRecordRaw(::grpc::ClientContext* context, const ::szengine::PreprocessRecordRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::szengine::PrimeEngineResponse>* AsyncPrimeEngineRaw(::grpc::ClientContext* context, const ::szengine::PrimeEngineRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::szengine::PrimeEngineResponse>* PrepareAsyncPrimeEngineRaw(::grpc::ClientContext* context, const ::szengine::PrimeEngineRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::szengine::ProcessRedoRecordResponse>* AsyncProcessRedoRecordRaw(::grpc::ClientContext* context, const ::szengine::ProcessRedoRecordRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::szengine::ProcessRedoRecordResponse>* PrepareAsyncProcessRedoRecordRaw(::grpc::ClientContext* context, const ::szengine::ProcessRedoRecordRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::szengine::ReevaluateEntityResponse>* AsyncReevaluateEntityRaw(::grpc::ClientContext* context, const ::szengine::ReevaluateEntityRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::szengine::ReevaluateEntityResponse>* PrepareAsyncReevaluateEntityRaw(::grpc::ClientContext* context, const ::szengine::ReevaluateEntityRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::szengine::ReevaluateRecordResponse>* AsyncReevaluateRecordRaw(::grpc::ClientContext* context, const ::szengine::ReevaluateRecordRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::szengine::ReevaluateRecordResponse>* PrepareAsyncReevaluateRecordRaw(::grpc::ClientContext* context, const ::szengine::ReevaluateRecordRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::szengine::ReinitializeResponse>* AsyncReinitializeRaw(::grpc::ClientContext* context, const ::szengine::ReinitializeRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::szengine::ReinitializeResponse>* PrepareAsyncReinitializeRaw(::grpc::ClientContext* context, const ::szengine::ReinitializeRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::szengine::SearchByAttributesResponse>* AsyncSearchByAttributesRaw(::grpc::ClientContext* context, const ::szengine::SearchByAttributesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::szengine::SearchByAttributesResponse>* PrepareAsyncSearchByAttributesRaw(::grpc::ClientContext* context, const ::szengine::SearchByAttributesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::szengine::StreamExportCsvEntityReportResponse>* StreamExportCsvEntityReportRaw(::grpc::ClientContext* context, const ::szengine::StreamExportCsvEntityReportRequest& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::szengine::StreamExportCsvEntityReportResponse>* AsyncStreamExportCsvEntityReportRaw(::grpc::ClientContext* context, const ::szengine::StreamExportCsvEntityReportRequest& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::szengine::StreamExportCsvEntityReportResponse>* PrepareAsyncStreamExportCsvEntityReportRaw(::grpc::ClientContext* context, const ::szengine::StreamExportCsvEntityReportRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::szengine::StreamExportJsonEntityReportResponse>* StreamExportJsonEntityReportRaw(::grpc::ClientContext* context, const ::szengine::StreamExportJsonEntityReportRequest& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::szengine::StreamExportJsonEntityReportResponse>* AsyncStreamExportJsonEntityReportRaw(::grpc::ClientContext* context, const ::szengine::StreamExportJsonEntityReportRequest& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::szengine::StreamExportJsonEntityReportResponse>* PrepareAsyncStreamExportJsonEntityReportRaw(::grpc::ClientContext* context, const ::szengine::StreamExportJsonEntityReportRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::szengine::WhyEntitiesResponse>* AsyncWhyEntitiesRaw(::grpc::ClientContext* context, const ::szengine::WhyEntitiesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::szengine::WhyEntitiesResponse>* PrepareAsyncWhyEntitiesRaw(::grpc::ClientContext* context, const ::szengine::WhyEntitiesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::szengine::WhyRecordInEntityResponse>* AsyncWhyRecordInEntityRaw(::grpc::ClientContext* context, const ::szengine::WhyRecordInEntityRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::szengine::WhyRecordInEntityResponse>* PrepareAsyncWhyRecordInEntityRaw(::grpc::ClientContext* context, const ::szengine::WhyRecordInEntityRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::szengine::WhyRecordsResponse>* AsyncWhyRecordsRaw(::grpc::ClientContext* context, const ::szengine::WhyRecordsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::szengine::WhyRecordsResponse>* PrepareAsyncWhyRecordsRaw(::grpc::ClientContext* context, const ::szengine::WhyRecordsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::szengine::WhySearchResponse>* AsyncWhySearchRaw(::grpc::ClientContext* context, const ::szengine::WhySearchRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::szengine::WhySearchResponse>* PrepareAsyncWhySearchRaw(::grpc::ClientContext* context, const ::szengine::WhySearchRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status AddRecord(::grpc::ClientContext* context, const ::szengine::AddRecordRequest& request, ::szengine::AddRecordResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::szengine::AddRecordResponse>> AsyncAddRecord(::grpc::ClientContext* context, const ::szengine::AddRecordRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::szengine::AddRecordResponse>>(AsyncAddRecordRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::szengine::AddRecordResponse>> PrepareAsyncAddRecord(::grpc::ClientContext* context, const ::szengine::AddRecordRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::szengine::AddRecordResponse>>(PrepareAsyncAddRecordRaw(context, request, cq));
    }
    ::grpc::Status CloseExportReport(::grpc::ClientContext* context, const ::szengine::CloseExportReportRequest& request, ::szengine::CloseExportReportResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::szengine::CloseExportReportResponse>> AsyncCloseExportReport(::grpc::ClientContext* context, const ::szengine::CloseExportReportRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::szengine::CloseExportReportResponse>>(AsyncCloseExportReportRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::szengine::CloseExportReportResponse>> PrepareAsyncCloseExportReport(::grpc::ClientContext* context, const ::szengine::CloseExportReportRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::szengine::CloseExportReportResponse>>(PrepareAsyncCloseExportReportRaw(context, request, cq));
    }
    ::grpc::Status CountRedoRecords(::grpc::ClientContext* context, const ::szengine::CountRedoRecordsRequest& request, ::szengine::CountRedoRecordsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::szengine::CountRedoRecordsResponse>> AsyncCountRedoRecords(::grpc::ClientContext* context, const ::szengine::CountRedoRecordsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::szengine::CountRedoRecordsResponse>>(AsyncCountRedoRecordsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::szengine::CountRedoRecordsResponse>> PrepareAsyncCountRedoRecords(::grpc::ClientContext* context, const ::szengine::CountRedoRecordsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::szengine::CountRedoRecordsResponse>>(PrepareAsyncCountRedoRecordsRaw(context, request, cq));
    }
    ::grpc::Status DeleteRecord(::grpc::ClientContext* context, const ::szengine::DeleteRecordRequest& request, ::szengine::DeleteRecordResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::szengine::DeleteRecordResponse>> AsyncDeleteRecord(::grpc::ClientContext* context, const ::szengine::DeleteRecordRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::szengine::DeleteRecordResponse>>(AsyncDeleteRecordRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::szengine::DeleteRecordResponse>> PrepareAsyncDeleteRecord(::grpc::ClientContext* context, const ::szengine::DeleteRecordRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::szengine::DeleteRecordResponse>>(PrepareAsyncDeleteRecordRaw(context, request, cq));
    }
    ::grpc::Status ExportCsvEntityReport(::grpc::ClientContext* context, const ::szengine::ExportCsvEntityReportRequest& request, ::szengine::ExportCsvEntityReportResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::szengine::ExportCsvEntityReportResponse>> AsyncExportCsvEntityReport(::grpc::ClientContext* context, const ::szengine::ExportCsvEntityReportRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::szengine::ExportCsvEntityReportResponse>>(AsyncExportCsvEntityReportRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::szengine::ExportCsvEntityReportResponse>> PrepareAsyncExportCsvEntityReport(::grpc::ClientContext* context, const ::szengine::ExportCsvEntityReportRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::szengine::ExportCsvEntityReportResponse>>(PrepareAsyncExportCsvEntityReportRaw(context, request, cq));
    }
    ::grpc::Status ExportJsonEntityReport(::grpc::ClientContext* context, const ::szengine::ExportJsonEntityReportRequest& request, ::szengine::ExportJsonEntityReportResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::szengine::ExportJsonEntityReportResponse>> AsyncExportJsonEntityReport(::grpc::ClientContext* context, const ::szengine::ExportJsonEntityReportRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::szengine::ExportJsonEntityReportResponse>>(AsyncExportJsonEntityReportRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::szengine::ExportJsonEntityReportResponse>> PrepareAsyncExportJsonEntityReport(::grpc::ClientContext* context, const ::szengine::ExportJsonEntityReportRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::szengine::ExportJsonEntityReportResponse>>(PrepareAsyncExportJsonEntityReportRaw(context, request, cq));
    }
    ::grpc::Status FetchNext(::grpc::ClientContext* context, const ::szengine::FetchNextRequest& request, ::szengine::FetchNextResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::szengine::FetchNextResponse>> AsyncFetchNext(::grpc::ClientContext* context, const ::szengine::FetchNextRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::szengine::FetchNextResponse>>(AsyncFetchNextRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::szengine::FetchNextResponse>> PrepareAsyncFetchNext(::grpc::ClientContext* context, const ::szengine::FetchNextRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::szengine::FetchNextResponse>>(PrepareAsyncFetchNextRaw(context, request, cq));
    }
    ::grpc::Status FindInterestingEntitiesByEntityId(::grpc::ClientContext* context, const ::szengine::FindInterestingEntitiesByEntityIdRequest& request, ::szengine::FindInterestingEntitiesByEntityIdResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::szengine::FindInterestingEntitiesByEntityIdResponse>> AsyncFindInterestingEntitiesByEntityId(::grpc::ClientContext* context, const ::szengine::FindInterestingEntitiesByEntityIdRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::szengine::FindInterestingEntitiesByEntityIdResponse>>(AsyncFindInterestingEntitiesByEntityIdRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::szengine::FindInterestingEntitiesByEntityIdResponse>> PrepareAsyncFindInterestingEntitiesByEntityId(::grpc::ClientContext* context, const ::szengine::FindInterestingEntitiesByEntityIdRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::szengine::FindInterestingEntitiesByEntityIdResponse>>(PrepareAsyncFindInterestingEntitiesByEntityIdRaw(context, request, cq));
    }
    ::grpc::Status FindInterestingEntitiesByRecordId(::grpc::ClientContext* context, const ::szengine::FindInterestingEntitiesByRecordIdRequest& request, ::szengine::FindInterestingEntitiesByRecordIdResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::szengine::FindInterestingEntitiesByRecordIdResponse>> AsyncFindInterestingEntitiesByRecordId(::grpc::ClientContext* context, const ::szengine::FindInterestingEntitiesByRecordIdRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::szengine::FindInterestingEntitiesByRecordIdResponse>>(AsyncFindInterestingEntitiesByRecordIdRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::szengine::FindInterestingEntitiesByRecordIdResponse>> PrepareAsyncFindInterestingEntitiesByRecordId(::grpc::ClientContext* context, const ::szengine::FindInterestingEntitiesByRecordIdRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::szengine::FindInterestingEntitiesByRecordIdResponse>>(PrepareAsyncFindInterestingEntitiesByRecordIdRaw(context, request, cq));
    }
    ::grpc::Status FindNetworkByEntityId(::grpc::ClientContext* context, const ::szengine::FindNetworkByEntityIdRequest& request, ::szengine::FindNetworkByEntityIdResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::szengine::FindNetworkByEntityIdResponse>> AsyncFindNetworkByEntityId(::grpc::ClientContext* context, const ::szengine::FindNetworkByEntityIdRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::szengine::FindNetworkByEntityIdResponse>>(AsyncFindNetworkByEntityIdRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::szengine::FindNetworkByEntityIdResponse>> PrepareAsyncFindNetworkByEntityId(::grpc::ClientContext* context, const ::szengine::FindNetworkByEntityIdRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::szengine::FindNetworkByEntityIdResponse>>(PrepareAsyncFindNetworkByEntityIdRaw(context, request, cq));
    }
    ::grpc::Status FindNetworkByRecordId(::grpc::ClientContext* context, const ::szengine::FindNetworkByRecordIdRequest& request, ::szengine::FindNetworkByRecordIdResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::szengine::FindNetworkByRecordIdResponse>> AsyncFindNetworkByRecordId(::grpc::ClientContext* context, const ::szengine::FindNetworkByRecordIdRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::szengine::FindNetworkByRecordIdResponse>>(AsyncFindNetworkByRecordIdRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::szengine::FindNetworkByRecordIdResponse>> PrepareAsyncFindNetworkByRecordId(::grpc::ClientContext* context, const ::szengine::FindNetworkByRecordIdRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::szengine::FindNetworkByRecordIdResponse>>(PrepareAsyncFindNetworkByRecordIdRaw(context, request, cq));
    }
    ::grpc::Status FindPathByEntityId(::grpc::ClientContext* context, const ::szengine::FindPathByEntityIdRequest& request, ::szengine::FindPathByEntityIdResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::szengine::FindPathByEntityIdResponse>> AsyncFindPathByEntityId(::grpc::ClientContext* context, const ::szengine::FindPathByEntityIdRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::szengine::FindPathByEntityIdResponse>>(AsyncFindPathByEntityIdRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::szengine::FindPathByEntityIdResponse>> PrepareAsyncFindPathByEntityId(::grpc::ClientContext* context, const ::szengine::FindPathByEntityIdRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::szengine::FindPathByEntityIdResponse>>(PrepareAsyncFindPathByEntityIdRaw(context, request, cq));
    }
    ::grpc::Status FindPathByRecordId(::grpc::ClientContext* context, const ::szengine::FindPathByRecordIdRequest& request, ::szengine::FindPathByRecordIdResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::szengine::FindPathByRecordIdResponse>> AsyncFindPathByRecordId(::grpc::ClientContext* context, const ::szengine::FindPathByRecordIdRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::szengine::FindPathByRecordIdResponse>>(AsyncFindPathByRecordIdRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::szengine::FindPathByRecordIdResponse>> PrepareAsyncFindPathByRecordId(::grpc::ClientContext* context, const ::szengine::FindPathByRecordIdRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::szengine::FindPathByRecordIdResponse>>(PrepareAsyncFindPathByRecordIdRaw(context, request, cq));
    }
    ::grpc::Status GetActiveConfigId(::grpc::ClientContext* context, const ::szengine::GetActiveConfigIdRequest& request, ::szengine::GetActiveConfigIdResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::szengine::GetActiveConfigIdResponse>> AsyncGetActiveConfigId(::grpc::ClientContext* context, const ::szengine::GetActiveConfigIdRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::szengine::GetActiveConfigIdResponse>>(AsyncGetActiveConfigIdRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::szengine::GetActiveConfigIdResponse>> PrepareAsyncGetActiveConfigId(::grpc::ClientContext* context, const ::szengine::GetActiveConfigIdRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::szengine::GetActiveConfigIdResponse>>(PrepareAsyncGetActiveConfigIdRaw(context, request, cq));
    }
    ::grpc::Status GetEntityByEntityId(::grpc::ClientContext* context, const ::szengine::GetEntityByEntityIdRequest& request, ::szengine::GetEntityByEntityIdResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::szengine::GetEntityByEntityIdResponse>> AsyncGetEntityByEntityId(::grpc::ClientContext* context, const ::szengine::GetEntityByEntityIdRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::szengine::GetEntityByEntityIdResponse>>(AsyncGetEntityByEntityIdRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::szengine::GetEntityByEntityIdResponse>> PrepareAsyncGetEntityByEntityId(::grpc::ClientContext* context, const ::szengine::GetEntityByEntityIdRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::szengine::GetEntityByEntityIdResponse>>(PrepareAsyncGetEntityByEntityIdRaw(context, request, cq));
    }
    ::grpc::Status GetEntityByRecordId(::grpc::ClientContext* context, const ::szengine::GetEntityByRecordIdRequest& request, ::szengine::GetEntityByRecordIdResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::szengine::GetEntityByRecordIdResponse>> AsyncGetEntityByRecordId(::grpc::ClientContext* context, const ::szengine::GetEntityByRecordIdRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::szengine::GetEntityByRecordIdResponse>>(AsyncGetEntityByRecordIdRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::szengine::GetEntityByRecordIdResponse>> PrepareAsyncGetEntityByRecordId(::grpc::ClientContext* context, const ::szengine::GetEntityByRecordIdRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::szengine::GetEntityByRecordIdResponse>>(PrepareAsyncGetEntityByRecordIdRaw(context, request, cq));
    }
    ::grpc::Status GetRecord(::grpc::ClientContext* context, const ::szengine::GetRecordRequest& request, ::szengine::GetRecordResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::szengine::GetRecordResponse>> AsyncGetRecord(::grpc::ClientContext* context, const ::szengine::GetRecordRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::szengine::GetRecordResponse>>(AsyncGetRecordRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::szengine::GetRecordResponse>> PrepareAsyncGetRecord(::grpc::ClientContext* context, const ::szengine::GetRecordRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::szengine::GetRecordResponse>>(PrepareAsyncGetRecordRaw(context, request, cq));
    }
    ::grpc::Status GetRedoRecord(::grpc::ClientContext* context, const ::szengine::GetRedoRecordRequest& request, ::szengine::GetRedoRecordResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::szengine::GetRedoRecordResponse>> AsyncGetRedoRecord(::grpc::ClientContext* context, const ::szengine::GetRedoRecordRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::szengine::GetRedoRecordResponse>>(AsyncGetRedoRecordRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::szengine::GetRedoRecordResponse>> PrepareAsyncGetRedoRecord(::grpc::ClientContext* context, const ::szengine::GetRedoRecordRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::szengine::GetRedoRecordResponse>>(PrepareAsyncGetRedoRecordRaw(context, request, cq));
    }
    ::grpc::Status GetStats(::grpc::ClientContext* context, const ::szengine::GetStatsRequest& request, ::szengine::GetStatsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::szengine::GetStatsResponse>> AsyncGetStats(::grpc::ClientContext* context, const ::szengine::GetStatsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::szengine::GetStatsResponse>>(AsyncGetStatsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::szengine::GetStatsResponse>> PrepareAsyncGetStats(::grpc::ClientContext* context, const ::szengine::GetStatsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::szengine::GetStatsResponse>>(PrepareAsyncGetStatsRaw(context, request, cq));
    }
    ::grpc::Status GetVirtualEntityByRecordId(::grpc::ClientContext* context, const ::szengine::GetVirtualEntityByRecordIdRequest& request, ::szengine::GetVirtualEntityByRecordIdResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::szengine::GetVirtualEntityByRecordIdResponse>> AsyncGetVirtualEntityByRecordId(::grpc::ClientContext* context, const ::szengine::GetVirtualEntityByRecordIdRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::szengine::GetVirtualEntityByRecordIdResponse>>(AsyncGetVirtualEntityByRecordIdRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::szengine::GetVirtualEntityByRecordIdResponse>> PrepareAsyncGetVirtualEntityByRecordId(::grpc::ClientContext* context, const ::szengine::GetVirtualEntityByRecordIdRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::szengine::GetVirtualEntityByRecordIdResponse>>(PrepareAsyncGetVirtualEntityByRecordIdRaw(context, request, cq));
    }
    ::grpc::Status HowEntityByEntityId(::grpc::ClientContext* context, const ::szengine::HowEntityByEntityIdRequest& request, ::szengine::HowEntityByEntityIdResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::szengine::HowEntityByEntityIdResponse>> AsyncHowEntityByEntityId(::grpc::ClientContext* context, const ::szengine::HowEntityByEntityIdRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::szengine::HowEntityByEntityIdResponse>>(AsyncHowEntityByEntityIdRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::szengine::HowEntityByEntityIdResponse>> PrepareAsyncHowEntityByEntityId(::grpc::ClientContext* context, const ::szengine::HowEntityByEntityIdRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::szengine::HowEntityByEntityIdResponse>>(PrepareAsyncHowEntityByEntityIdRaw(context, request, cq));
    }
    ::grpc::Status PreprocessRecord(::grpc::ClientContext* context, const ::szengine::PreprocessRecordRequest& request, ::szengine::PreprocessRecordResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::szengine::PreprocessRecordResponse>> AsyncPreprocessRecord(::grpc::ClientContext* context, const ::szengine::PreprocessRecordRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::szengine::PreprocessRecordResponse>>(AsyncPreprocessRecordRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::szengine::PreprocessRecordResponse>> PrepareAsyncPreprocessRecord(::grpc::ClientContext* context, const ::szengine::PreprocessRecordRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::szengine::PreprocessRecordResponse>>(PrepareAsyncPreprocessRecordRaw(context, request, cq));
    }
    ::grpc::Status PrimeEngine(::grpc::ClientContext* context, const ::szengine::PrimeEngineRequest& request, ::szengine::PrimeEngineResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::szengine::PrimeEngineResponse>> AsyncPrimeEngine(::grpc::ClientContext* context, const ::szengine::PrimeEngineRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::szengine::PrimeEngineResponse>>(AsyncPrimeEngineRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::szengine::PrimeEngineResponse>> PrepareAsyncPrimeEngine(::grpc::ClientContext* context, const ::szengine::PrimeEngineRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::szengine::PrimeEngineResponse>>(PrepareAsyncPrimeEngineRaw(context, request, cq));
    }
    ::grpc::Status ProcessRedoRecord(::grpc::ClientContext* context, const ::szengine::ProcessRedoRecordRequest& request, ::szengine::ProcessRedoRecordResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::szengine::ProcessRedoRecordResponse>> AsyncProcessRedoRecord(::grpc::ClientContext* context, const ::szengine::ProcessRedoRecordRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::szengine::ProcessRedoRecordResponse>>(AsyncProcessRedoRecordRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::szengine::ProcessRedoRecordResponse>> PrepareAsyncProcessRedoRecord(::grpc::ClientContext* context, const ::szengine::ProcessRedoRecordRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::szengine::ProcessRedoRecordResponse>>(PrepareAsyncProcessRedoRecordRaw(context, request, cq));
    }
    ::grpc::Status ReevaluateEntity(::grpc::ClientContext* context, const ::szengine::ReevaluateEntityRequest& request, ::szengine::ReevaluateEntityResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::szengine::ReevaluateEntityResponse>> AsyncReevaluateEntity(::grpc::ClientContext* context, const ::szengine::ReevaluateEntityRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::szengine::ReevaluateEntityResponse>>(AsyncReevaluateEntityRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::szengine::ReevaluateEntityResponse>> PrepareAsyncReevaluateEntity(::grpc::ClientContext* context, const ::szengine::ReevaluateEntityRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::szengine::ReevaluateEntityResponse>>(PrepareAsyncReevaluateEntityRaw(context, request, cq));
    }
    ::grpc::Status ReevaluateRecord(::grpc::ClientContext* context, const ::szengine::ReevaluateRecordRequest& request, ::szengine::ReevaluateRecordResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::szengine::ReevaluateRecordResponse>> AsyncReevaluateRecord(::grpc::ClientContext* context, const ::szengine::ReevaluateRecordRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::szengine::ReevaluateRecordResponse>>(AsyncReevaluateRecordRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::szengine::ReevaluateRecordResponse>> PrepareAsyncReevaluateRecord(::grpc::ClientContext* context, const ::szengine::ReevaluateRecordRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::szengine::ReevaluateRecordResponse>>(PrepareAsyncReevaluateRecordRaw(context, request, cq));
    }
    ::grpc::Status Reinitialize(::grpc::ClientContext* context, const ::szengine::ReinitializeRequest& request, ::szengine::ReinitializeResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::szengine::ReinitializeResponse>> AsyncReinitialize(::grpc::ClientContext* context, const ::szengine::ReinitializeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::szengine::ReinitializeResponse>>(AsyncReinitializeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::szengine::ReinitializeResponse>> PrepareAsyncReinitialize(::grpc::ClientContext* context, const ::szengine::ReinitializeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::szengine::ReinitializeResponse>>(PrepareAsyncReinitializeRaw(context, request, cq));
    }
    ::grpc::Status SearchByAttributes(::grpc::ClientContext* context, const ::szengine::SearchByAttributesRequest& request, ::szengine::SearchByAttributesResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::szengine::SearchByAttributesResponse>> AsyncSearchByAttributes(::grpc::ClientContext* context, const ::szengine::SearchByAttributesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::szengine::SearchByAttributesResponse>>(AsyncSearchByAttributesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::szengine::SearchByAttributesResponse>> PrepareAsyncSearchByAttributes(::grpc::ClientContext* context, const ::szengine::SearchByAttributesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::szengine::SearchByAttributesResponse>>(PrepareAsyncSearchByAttributesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::szengine::StreamExportCsvEntityReportResponse>> StreamExportCsvEntityReport(::grpc::ClientContext* context, const ::szengine::StreamExportCsvEntityReportRequest& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::szengine::StreamExportCsvEntityReportResponse>>(StreamExportCsvEntityReportRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::szengine::StreamExportCsvEntityReportResponse>> AsyncStreamExportCsvEntityReport(::grpc::ClientContext* context, const ::szengine::StreamExportCsvEntityReportRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::szengine::StreamExportCsvEntityReportResponse>>(AsyncStreamExportCsvEntityReportRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::szengine::StreamExportCsvEntityReportResponse>> PrepareAsyncStreamExportCsvEntityReport(::grpc::ClientContext* context, const ::szengine::StreamExportCsvEntityReportRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::szengine::StreamExportCsvEntityReportResponse>>(PrepareAsyncStreamExportCsvEntityReportRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::szengine::StreamExportJsonEntityReportResponse>> StreamExportJsonEntityReport(::grpc::ClientContext* context, const ::szengine::StreamExportJsonEntityReportRequest& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::szengine::StreamExportJsonEntityReportResponse>>(StreamExportJsonEntityReportRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::szengine::StreamExportJsonEntityReportResponse>> AsyncStreamExportJsonEntityReport(::grpc::ClientContext* context, const ::szengine::StreamExportJsonEntityReportRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::szengine::StreamExportJsonEntityReportResponse>>(AsyncStreamExportJsonEntityReportRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::szengine::StreamExportJsonEntityReportResponse>> PrepareAsyncStreamExportJsonEntityReport(::grpc::ClientContext* context, const ::szengine::StreamExportJsonEntityReportRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::szengine::StreamExportJsonEntityReportResponse>>(PrepareAsyncStreamExportJsonEntityReportRaw(context, request, cq));
    }
    ::grpc::Status WhyEntities(::grpc::ClientContext* context, const ::szengine::WhyEntitiesRequest& request, ::szengine::WhyEntitiesResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::szengine::WhyEntitiesResponse>> AsyncWhyEntities(::grpc::ClientContext* context, const ::szengine::WhyEntitiesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::szengine::WhyEntitiesResponse>>(AsyncWhyEntitiesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::szengine::WhyEntitiesResponse>> PrepareAsyncWhyEntities(::grpc::ClientContext* context, const ::szengine::WhyEntitiesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::szengine::WhyEntitiesResponse>>(PrepareAsyncWhyEntitiesRaw(context, request, cq));
    }
    ::grpc::Status WhyRecordInEntity(::grpc::ClientContext* context, const ::szengine::WhyRecordInEntityRequest& request, ::szengine::WhyRecordInEntityResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::szengine::WhyRecordInEntityResponse>> AsyncWhyRecordInEntity(::grpc::ClientContext* context, const ::szengine::WhyRecordInEntityRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::szengine::WhyRecordInEntityResponse>>(AsyncWhyRecordInEntityRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::szengine::WhyRecordInEntityResponse>> PrepareAsyncWhyRecordInEntity(::grpc::ClientContext* context, const ::szengine::WhyRecordInEntityRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::szengine::WhyRecordInEntityResponse>>(PrepareAsyncWhyRecordInEntityRaw(context, request, cq));
    }
    ::grpc::Status WhyRecords(::grpc::ClientContext* context, const ::szengine::WhyRecordsRequest& request, ::szengine::WhyRecordsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::szengine::WhyRecordsResponse>> AsyncWhyRecords(::grpc::ClientContext* context, const ::szengine::WhyRecordsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::szengine::WhyRecordsResponse>>(AsyncWhyRecordsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::szengine::WhyRecordsResponse>> PrepareAsyncWhyRecords(::grpc::ClientContext* context, const ::szengine::WhyRecordsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::szengine::WhyRecordsResponse>>(PrepareAsyncWhyRecordsRaw(context, request, cq));
    }
    ::grpc::Status WhySearch(::grpc::ClientContext* context, const ::szengine::WhySearchRequest& request, ::szengine::WhySearchResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::szengine::WhySearchResponse>> AsyncWhySearch(::grpc::ClientContext* context, const ::szengine::WhySearchRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::szengine::WhySearchResponse>>(AsyncWhySearchRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::szengine::WhySearchResponse>> PrepareAsyncWhySearch(::grpc::ClientContext* context, const ::szengine::WhySearchRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::szengine::WhySearchResponse>>(PrepareAsyncWhySearchRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void AddRecord(::grpc::ClientContext* context, const ::szengine::AddRecordRequest* request, ::szengine::AddRecordResponse* response, std::function<void(::grpc::Status)>) override;
      void AddRecord(::grpc::ClientContext* context, const ::szengine::AddRecordRequest* request, ::szengine::AddRecordResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void CloseExportReport(::grpc::ClientContext* context, const ::szengine::CloseExportReportRequest* request, ::szengine::CloseExportReportResponse* response, std::function<void(::grpc::Status)>) override;
      void CloseExportReport(::grpc::ClientContext* context, const ::szengine::CloseExportReportRequest* request, ::szengine::CloseExportReportResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void CountRedoRecords(::grpc::ClientContext* context, const ::szengine::CountRedoRecordsRequest* request, ::szengine::CountRedoRecordsResponse* response, std::function<void(::grpc::Status)>) override;
      void CountRedoRecords(::grpc::ClientContext* context, const ::szengine::CountRedoRecordsRequest* request, ::szengine::CountRedoRecordsResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void DeleteRecord(::grpc::ClientContext* context, const ::szengine::DeleteRecordRequest* request, ::szengine::DeleteRecordResponse* response, std::function<void(::grpc::Status)>) override;
      void DeleteRecord(::grpc::ClientContext* context, const ::szengine::DeleteRecordRequest* request, ::szengine::DeleteRecordResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ExportCsvEntityReport(::grpc::ClientContext* context, const ::szengine::ExportCsvEntityReportRequest* request, ::szengine::ExportCsvEntityReportResponse* response, std::function<void(::grpc::Status)>) override;
      void ExportCsvEntityReport(::grpc::ClientContext* context, const ::szengine::ExportCsvEntityReportRequest* request, ::szengine::ExportCsvEntityReportResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ExportJsonEntityReport(::grpc::ClientContext* context, const ::szengine::ExportJsonEntityReportRequest* request, ::szengine::ExportJsonEntityReportResponse* response, std::function<void(::grpc::Status)>) override;
      void ExportJsonEntityReport(::grpc::ClientContext* context, const ::szengine::ExportJsonEntityReportRequest* request, ::szengine::ExportJsonEntityReportResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void FetchNext(::grpc::ClientContext* context, const ::szengine::FetchNextRequest* request, ::szengine::FetchNextResponse* response, std::function<void(::grpc::Status)>) override;
      void FetchNext(::grpc::ClientContext* context, const ::szengine::FetchNextRequest* request, ::szengine::FetchNextResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void FindInterestingEntitiesByEntityId(::grpc::ClientContext* context, const ::szengine::FindInterestingEntitiesByEntityIdRequest* request, ::szengine::FindInterestingEntitiesByEntityIdResponse* response, std::function<void(::grpc::Status)>) override;
      void FindInterestingEntitiesByEntityId(::grpc::ClientContext* context, const ::szengine::FindInterestingEntitiesByEntityIdRequest* request, ::szengine::FindInterestingEntitiesByEntityIdResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void FindInterestingEntitiesByRecordId(::grpc::ClientContext* context, const ::szengine::FindInterestingEntitiesByRecordIdRequest* request, ::szengine::FindInterestingEntitiesByRecordIdResponse* response, std::function<void(::grpc::Status)>) override;
      void FindInterestingEntitiesByRecordId(::grpc::ClientContext* context, const ::szengine::FindInterestingEntitiesByRecordIdRequest* request, ::szengine::FindInterestingEntitiesByRecordIdResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void FindNetworkByEntityId(::grpc::ClientContext* context, const ::szengine::FindNetworkByEntityIdRequest* request, ::szengine::FindNetworkByEntityIdResponse* response, std::function<void(::grpc::Status)>) override;
      void FindNetworkByEntityId(::grpc::ClientContext* context, const ::szengine::FindNetworkByEntityIdRequest* request, ::szengine::FindNetworkByEntityIdResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void FindNetworkByRecordId(::grpc::ClientContext* context, const ::szengine::FindNetworkByRecordIdRequest* request, ::szengine::FindNetworkByRecordIdResponse* response, std::function<void(::grpc::Status)>) override;
      void FindNetworkByRecordId(::grpc::ClientContext* context, const ::szengine::FindNetworkByRecordIdRequest* request, ::szengine::FindNetworkByRecordIdResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void FindPathByEntityId(::grpc::ClientContext* context, const ::szengine::FindPathByEntityIdRequest* request, ::szengine::FindPathByEntityIdResponse* response, std::function<void(::grpc::Status)>) override;
      void FindPathByEntityId(::grpc::ClientContext* context, const ::szengine::FindPathByEntityIdRequest* request, ::szengine::FindPathByEntityIdResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void FindPathByRecordId(::grpc::ClientContext* context, const ::szengine::FindPathByRecordIdRequest* request, ::szengine::FindPathByRecordIdResponse* response, std::function<void(::grpc::Status)>) override;
      void FindPathByRecordId(::grpc::ClientContext* context, const ::szengine::FindPathByRecordIdRequest* request, ::szengine::FindPathByRecordIdResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetActiveConfigId(::grpc::ClientContext* context, const ::szengine::GetActiveConfigIdRequest* request, ::szengine::GetActiveConfigIdResponse* response, std::function<void(::grpc::Status)>) override;
      void GetActiveConfigId(::grpc::ClientContext* context, const ::szengine::GetActiveConfigIdRequest* request, ::szengine::GetActiveConfigIdResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetEntityByEntityId(::grpc::ClientContext* context, const ::szengine::GetEntityByEntityIdRequest* request, ::szengine::GetEntityByEntityIdResponse* response, std::function<void(::grpc::Status)>) override;
      void GetEntityByEntityId(::grpc::ClientContext* context, const ::szengine::GetEntityByEntityIdRequest* request, ::szengine::GetEntityByEntityIdResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetEntityByRecordId(::grpc::ClientContext* context, const ::szengine::GetEntityByRecordIdRequest* request, ::szengine::GetEntityByRecordIdResponse* response, std::function<void(::grpc::Status)>) override;
      void GetEntityByRecordId(::grpc::ClientContext* context, const ::szengine::GetEntityByRecordIdRequest* request, ::szengine::GetEntityByRecordIdResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetRecord(::grpc::ClientContext* context, const ::szengine::GetRecordRequest* request, ::szengine::GetRecordResponse* response, std::function<void(::grpc::Status)>) override;
      void GetRecord(::grpc::ClientContext* context, const ::szengine::GetRecordRequest* request, ::szengine::GetRecordResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetRedoRecord(::grpc::ClientContext* context, const ::szengine::GetRedoRecordRequest* request, ::szengine::GetRedoRecordResponse* response, std::function<void(::grpc::Status)>) override;
      void GetRedoRecord(::grpc::ClientContext* context, const ::szengine::GetRedoRecordRequest* request, ::szengine::GetRedoRecordResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetStats(::grpc::ClientContext* context, const ::szengine::GetStatsRequest* request, ::szengine::GetStatsResponse* response, std::function<void(::grpc::Status)>) override;
      void GetStats(::grpc::ClientContext* context, const ::szengine::GetStatsRequest* request, ::szengine::GetStatsResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetVirtualEntityByRecordId(::grpc::ClientContext* context, const ::szengine::GetVirtualEntityByRecordIdRequest* request, ::szengine::GetVirtualEntityByRecordIdResponse* response, std::function<void(::grpc::Status)>) override;
      void GetVirtualEntityByRecordId(::grpc::ClientContext* context, const ::szengine::GetVirtualEntityByRecordIdRequest* request, ::szengine::GetVirtualEntityByRecordIdResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void HowEntityByEntityId(::grpc::ClientContext* context, const ::szengine::HowEntityByEntityIdRequest* request, ::szengine::HowEntityByEntityIdResponse* response, std::function<void(::grpc::Status)>) override;
      void HowEntityByEntityId(::grpc::ClientContext* context, const ::szengine::HowEntityByEntityIdRequest* request, ::szengine::HowEntityByEntityIdResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void PreprocessRecord(::grpc::ClientContext* context, const ::szengine::PreprocessRecordRequest* request, ::szengine::PreprocessRecordResponse* response, std::function<void(::grpc::Status)>) override;
      void PreprocessRecord(::grpc::ClientContext* context, const ::szengine::PreprocessRecordRequest* request, ::szengine::PreprocessRecordResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void PrimeEngine(::grpc::ClientContext* context, const ::szengine::PrimeEngineRequest* request, ::szengine::PrimeEngineResponse* response, std::function<void(::grpc::Status)>) override;
      void PrimeEngine(::grpc::ClientContext* context, const ::szengine::PrimeEngineRequest* request, ::szengine::PrimeEngineResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ProcessRedoRecord(::grpc::ClientContext* context, const ::szengine::ProcessRedoRecordRequest* request, ::szengine::ProcessRedoRecordResponse* response, std::function<void(::grpc::Status)>) override;
      void ProcessRedoRecord(::grpc::ClientContext* context, const ::szengine::ProcessRedoRecordRequest* request, ::szengine::ProcessRedoRecordResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ReevaluateEntity(::grpc::ClientContext* context, const ::szengine::ReevaluateEntityRequest* request, ::szengine::ReevaluateEntityResponse* response, std::function<void(::grpc::Status)>) override;
      void ReevaluateEntity(::grpc::ClientContext* context, const ::szengine::ReevaluateEntityRequest* request, ::szengine::ReevaluateEntityResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ReevaluateRecord(::grpc::ClientContext* context, const ::szengine::ReevaluateRecordRequest* request, ::szengine::ReevaluateRecordResponse* response, std::function<void(::grpc::Status)>) override;
      void ReevaluateRecord(::grpc::ClientContext* context, const ::szengine::ReevaluateRecordRequest* request, ::szengine::ReevaluateRecordResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void Reinitialize(::grpc::ClientContext* context, const ::szengine::ReinitializeRequest* request, ::szengine::ReinitializeResponse* response, std::function<void(::grpc::Status)>) override;
      void Reinitialize(::grpc::ClientContext* context, const ::szengine::ReinitializeRequest* request, ::szengine::ReinitializeResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void SearchByAttributes(::grpc::ClientContext* context, const ::szengine::SearchByAttributesRequest* request, ::szengine::SearchByAttributesResponse* response, std::function<void(::grpc::Status)>) override;
      void SearchByAttributes(::grpc::ClientContext* context, const ::szengine::SearchByAttributesRequest* request, ::szengine::SearchByAttributesResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void StreamExportCsvEntityReport(::grpc::ClientContext* context, const ::szengine::StreamExportCsvEntityReportRequest* request, ::grpc::ClientReadReactor< ::szengine::StreamExportCsvEntityReportResponse>* reactor) override;
      void StreamExportJsonEntityReport(::grpc::ClientContext* context, const ::szengine::StreamExportJsonEntityReportRequest* request, ::grpc::ClientReadReactor< ::szengine::StreamExportJsonEntityReportResponse>* reactor) override;
      void WhyEntities(::grpc::ClientContext* context, const ::szengine::WhyEntitiesRequest* request, ::szengine::WhyEntitiesResponse* response, std::function<void(::grpc::Status)>) override;
      void WhyEntities(::grpc::ClientContext* context, const ::szengine::WhyEntitiesRequest* request, ::szengine::WhyEntitiesResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void WhyRecordInEntity(::grpc::ClientContext* context, const ::szengine::WhyRecordInEntityRequest* request, ::szengine::WhyRecordInEntityResponse* response, std::function<void(::grpc::Status)>) override;
      void WhyRecordInEntity(::grpc::ClientContext* context, const ::szengine::WhyRecordInEntityRequest* request, ::szengine::WhyRecordInEntityResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void WhyRecords(::grpc::ClientContext* context, const ::szengine::WhyRecordsRequest* request, ::szengine::WhyRecordsResponse* response, std::function<void(::grpc::Status)>) override;
      void WhyRecords(::grpc::ClientContext* context, const ::szengine::WhyRecordsRequest* request, ::szengine::WhyRecordsResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void WhySearch(::grpc::ClientContext* context, const ::szengine::WhySearchRequest* request, ::szengine::WhySearchResponse* response, std::function<void(::grpc::Status)>) override;
      void WhySearch(::grpc::ClientContext* context, const ::szengine::WhySearchRequest* request, ::szengine::WhySearchResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::szengine::AddRecordResponse>* AsyncAddRecordRaw(::grpc::ClientContext* context, const ::szengine::AddRecordRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::szengine::AddRecordResponse>* PrepareAsyncAddRecordRaw(::grpc::ClientContext* context, const ::szengine::AddRecordRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::szengine::CloseExportReportResponse>* AsyncCloseExportReportRaw(::grpc::ClientContext* context, const ::szengine::CloseExportReportRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::szengine::CloseExportReportResponse>* PrepareAsyncCloseExportReportRaw(::grpc::ClientContext* context, const ::szengine::CloseExportReportRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::szengine::CountRedoRecordsResponse>* AsyncCountRedoRecordsRaw(::grpc::ClientContext* context, const ::szengine::CountRedoRecordsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::szengine::CountRedoRecordsResponse>* PrepareAsyncCountRedoRecordsRaw(::grpc::ClientContext* context, const ::szengine::CountRedoRecordsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::szengine::DeleteRecordResponse>* AsyncDeleteRecordRaw(::grpc::ClientContext* context, const ::szengine::DeleteRecordRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::szengine::DeleteRecordResponse>* PrepareAsyncDeleteRecordRaw(::grpc::ClientContext* context, const ::szengine::DeleteRecordRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::szengine::ExportCsvEntityReportResponse>* AsyncExportCsvEntityReportRaw(::grpc::ClientContext* context, const ::szengine::ExportCsvEntityReportRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::szengine::ExportCsvEntityReportResponse>* PrepareAsyncExportCsvEntityReportRaw(::grpc::ClientContext* context, const ::szengine::ExportCsvEntityReportRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::szengine::ExportJsonEntityReportResponse>* AsyncExportJsonEntityReportRaw(::grpc::ClientContext* context, const ::szengine::ExportJsonEntityReportRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::szengine::ExportJsonEntityReportResponse>* PrepareAsyncExportJsonEntityReportRaw(::grpc::ClientContext* context, const ::szengine::ExportJsonEntityReportRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::szengine::FetchNextResponse>* AsyncFetchNextRaw(::grpc::ClientContext* context, const ::szengine::FetchNextRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::szengine::FetchNextResponse>* PrepareAsyncFetchNextRaw(::grpc::ClientContext* context, const ::szengine::FetchNextRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::szengine::FindInterestingEntitiesByEntityIdResponse>* AsyncFindInterestingEntitiesByEntityIdRaw(::grpc::ClientContext* context, const ::szengine::FindInterestingEntitiesByEntityIdRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::szengine::FindInterestingEntitiesByEntityIdResponse>* PrepareAsyncFindInterestingEntitiesByEntityIdRaw(::grpc::ClientContext* context, const ::szengine::FindInterestingEntitiesByEntityIdRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::szengine::FindInterestingEntitiesByRecordIdResponse>* AsyncFindInterestingEntitiesByRecordIdRaw(::grpc::ClientContext* context, const ::szengine::FindInterestingEntitiesByRecordIdRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::szengine::FindInterestingEntitiesByRecordIdResponse>* PrepareAsyncFindInterestingEntitiesByRecordIdRaw(::grpc::ClientContext* context, const ::szengine::FindInterestingEntitiesByRecordIdRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::szengine::FindNetworkByEntityIdResponse>* AsyncFindNetworkByEntityIdRaw(::grpc::ClientContext* context, const ::szengine::FindNetworkByEntityIdRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::szengine::FindNetworkByEntityIdResponse>* PrepareAsyncFindNetworkByEntityIdRaw(::grpc::ClientContext* context, const ::szengine::FindNetworkByEntityIdRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::szengine::FindNetworkByRecordIdResponse>* AsyncFindNetworkByRecordIdRaw(::grpc::ClientContext* context, const ::szengine::FindNetworkByRecordIdRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::szengine::FindNetworkByRecordIdResponse>* PrepareAsyncFindNetworkByRecordIdRaw(::grpc::ClientContext* context, const ::szengine::FindNetworkByRecordIdRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::szengine::FindPathByEntityIdResponse>* AsyncFindPathByEntityIdRaw(::grpc::ClientContext* context, const ::szengine::FindPathByEntityIdRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::szengine::FindPathByEntityIdResponse>* PrepareAsyncFindPathByEntityIdRaw(::grpc::ClientContext* context, const ::szengine::FindPathByEntityIdRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::szengine::FindPathByRecordIdResponse>* AsyncFindPathByRecordIdRaw(::grpc::ClientContext* context, const ::szengine::FindPathByRecordIdRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::szengine::FindPathByRecordIdResponse>* PrepareAsyncFindPathByRecordIdRaw(::grpc::ClientContext* context, const ::szengine::FindPathByRecordIdRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::szengine::GetActiveConfigIdResponse>* AsyncGetActiveConfigIdRaw(::grpc::ClientContext* context, const ::szengine::GetActiveConfigIdRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::szengine::GetActiveConfigIdResponse>* PrepareAsyncGetActiveConfigIdRaw(::grpc::ClientContext* context, const ::szengine::GetActiveConfigIdRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::szengine::GetEntityByEntityIdResponse>* AsyncGetEntityByEntityIdRaw(::grpc::ClientContext* context, const ::szengine::GetEntityByEntityIdRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::szengine::GetEntityByEntityIdResponse>* PrepareAsyncGetEntityByEntityIdRaw(::grpc::ClientContext* context, const ::szengine::GetEntityByEntityIdRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::szengine::GetEntityByRecordIdResponse>* AsyncGetEntityByRecordIdRaw(::grpc::ClientContext* context, const ::szengine::GetEntityByRecordIdRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::szengine::GetEntityByRecordIdResponse>* PrepareAsyncGetEntityByRecordIdRaw(::grpc::ClientContext* context, const ::szengine::GetEntityByRecordIdRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::szengine::GetRecordResponse>* AsyncGetRecordRaw(::grpc::ClientContext* context, const ::szengine::GetRecordRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::szengine::GetRecordResponse>* PrepareAsyncGetRecordRaw(::grpc::ClientContext* context, const ::szengine::GetRecordRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::szengine::GetRedoRecordResponse>* AsyncGetRedoRecordRaw(::grpc::ClientContext* context, const ::szengine::GetRedoRecordRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::szengine::GetRedoRecordResponse>* PrepareAsyncGetRedoRecordRaw(::grpc::ClientContext* context, const ::szengine::GetRedoRecordRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::szengine::GetStatsResponse>* AsyncGetStatsRaw(::grpc::ClientContext* context, const ::szengine::GetStatsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::szengine::GetStatsResponse>* PrepareAsyncGetStatsRaw(::grpc::ClientContext* context, const ::szengine::GetStatsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::szengine::GetVirtualEntityByRecordIdResponse>* AsyncGetVirtualEntityByRecordIdRaw(::grpc::ClientContext* context, const ::szengine::GetVirtualEntityByRecordIdRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::szengine::GetVirtualEntityByRecordIdResponse>* PrepareAsyncGetVirtualEntityByRecordIdRaw(::grpc::ClientContext* context, const ::szengine::GetVirtualEntityByRecordIdRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::szengine::HowEntityByEntityIdResponse>* AsyncHowEntityByEntityIdRaw(::grpc::ClientContext* context, const ::szengine::HowEntityByEntityIdRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::szengine::HowEntityByEntityIdResponse>* PrepareAsyncHowEntityByEntityIdRaw(::grpc::ClientContext* context, const ::szengine::HowEntityByEntityIdRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::szengine::PreprocessRecordResponse>* AsyncPreprocessRecordRaw(::grpc::ClientContext* context, const ::szengine::PreprocessRecordRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::szengine::PreprocessRecordResponse>* PrepareAsyncPreprocessRecordRaw(::grpc::ClientContext* context, const ::szengine::PreprocessRecordRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::szengine::PrimeEngineResponse>* AsyncPrimeEngineRaw(::grpc::ClientContext* context, const ::szengine::PrimeEngineRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::szengine::PrimeEngineResponse>* PrepareAsyncPrimeEngineRaw(::grpc::ClientContext* context, const ::szengine::PrimeEngineRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::szengine::ProcessRedoRecordResponse>* AsyncProcessRedoRecordRaw(::grpc::ClientContext* context, const ::szengine::ProcessRedoRecordRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::szengine::ProcessRedoRecordResponse>* PrepareAsyncProcessRedoRecordRaw(::grpc::ClientContext* context, const ::szengine::ProcessRedoRecordRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::szengine::ReevaluateEntityResponse>* AsyncReevaluateEntityRaw(::grpc::ClientContext* context, const ::szengine::ReevaluateEntityRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::szengine::ReevaluateEntityResponse>* PrepareAsyncReevaluateEntityRaw(::grpc::ClientContext* context, const ::szengine::ReevaluateEntityRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::szengine::ReevaluateRecordResponse>* AsyncReevaluateRecordRaw(::grpc::ClientContext* context, const ::szengine::ReevaluateRecordRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::szengine::ReevaluateRecordResponse>* PrepareAsyncReevaluateRecordRaw(::grpc::ClientContext* context, const ::szengine::ReevaluateRecordRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::szengine::ReinitializeResponse>* AsyncReinitializeRaw(::grpc::ClientContext* context, const ::szengine::ReinitializeRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::szengine::ReinitializeResponse>* PrepareAsyncReinitializeRaw(::grpc::ClientContext* context, const ::szengine::ReinitializeRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::szengine::SearchByAttributesResponse>* AsyncSearchByAttributesRaw(::grpc::ClientContext* context, const ::szengine::SearchByAttributesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::szengine::SearchByAttributesResponse>* PrepareAsyncSearchByAttributesRaw(::grpc::ClientContext* context, const ::szengine::SearchByAttributesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::szengine::StreamExportCsvEntityReportResponse>* StreamExportCsvEntityReportRaw(::grpc::ClientContext* context, const ::szengine::StreamExportCsvEntityReportRequest& request) override;
    ::grpc::ClientAsyncReader< ::szengine::StreamExportCsvEntityReportResponse>* AsyncStreamExportCsvEntityReportRaw(::grpc::ClientContext* context, const ::szengine::StreamExportCsvEntityReportRequest& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::szengine::StreamExportCsvEntityReportResponse>* PrepareAsyncStreamExportCsvEntityReportRaw(::grpc::ClientContext* context, const ::szengine::StreamExportCsvEntityReportRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::szengine::StreamExportJsonEntityReportResponse>* StreamExportJsonEntityReportRaw(::grpc::ClientContext* context, const ::szengine::StreamExportJsonEntityReportRequest& request) override;
    ::grpc::ClientAsyncReader< ::szengine::StreamExportJsonEntityReportResponse>* AsyncStreamExportJsonEntityReportRaw(::grpc::ClientContext* context, const ::szengine::StreamExportJsonEntityReportRequest& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::szengine::StreamExportJsonEntityReportResponse>* PrepareAsyncStreamExportJsonEntityReportRaw(::grpc::ClientContext* context, const ::szengine::StreamExportJsonEntityReportRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::szengine::WhyEntitiesResponse>* AsyncWhyEntitiesRaw(::grpc::ClientContext* context, const ::szengine::WhyEntitiesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::szengine::WhyEntitiesResponse>* PrepareAsyncWhyEntitiesRaw(::grpc::ClientContext* context, const ::szengine::WhyEntitiesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::szengine::WhyRecordInEntityResponse>* AsyncWhyRecordInEntityRaw(::grpc::ClientContext* context, const ::szengine::WhyRecordInEntityRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::szengine::WhyRecordInEntityResponse>* PrepareAsyncWhyRecordInEntityRaw(::grpc::ClientContext* context, const ::szengine::WhyRecordInEntityRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::szengine::WhyRecordsResponse>* AsyncWhyRecordsRaw(::grpc::ClientContext* context, const ::szengine::WhyRecordsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::szengine::WhyRecordsResponse>* PrepareAsyncWhyRecordsRaw(::grpc::ClientContext* context, const ::szengine::WhyRecordsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::szengine::WhySearchResponse>* AsyncWhySearchRaw(::grpc::ClientContext* context, const ::szengine::WhySearchRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::szengine::WhySearchResponse>* PrepareAsyncWhySearchRaw(::grpc::ClientContext* context, const ::szengine::WhySearchRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_AddRecord_;
    const ::grpc::internal::RpcMethod rpcmethod_CloseExportReport_;
    const ::grpc::internal::RpcMethod rpcmethod_CountRedoRecords_;
    const ::grpc::internal::RpcMethod rpcmethod_DeleteRecord_;
    const ::grpc::internal::RpcMethod rpcmethod_ExportCsvEntityReport_;
    const ::grpc::internal::RpcMethod rpcmethod_ExportJsonEntityReport_;
    const ::grpc::internal::RpcMethod rpcmethod_FetchNext_;
    const ::grpc::internal::RpcMethod rpcmethod_FindInterestingEntitiesByEntityId_;
    const ::grpc::internal::RpcMethod rpcmethod_FindInterestingEntitiesByRecordId_;
    const ::grpc::internal::RpcMethod rpcmethod_FindNetworkByEntityId_;
    const ::grpc::internal::RpcMethod rpcmethod_FindNetworkByRecordId_;
    const ::grpc::internal::RpcMethod rpcmethod_FindPathByEntityId_;
    const ::grpc::internal::RpcMethod rpcmethod_FindPathByRecordId_;
    const ::grpc::internal::RpcMethod rpcmethod_GetActiveConfigId_;
    const ::grpc::internal::RpcMethod rpcmethod_GetEntityByEntityId_;
    const ::grpc::internal::RpcMethod rpcmethod_GetEntityByRecordId_;
    const ::grpc::internal::RpcMethod rpcmethod_GetRecord_;
    const ::grpc::internal::RpcMethod rpcmethod_GetRedoRecord_;
    const ::grpc::internal::RpcMethod rpcmethod_GetStats_;
    const ::grpc::internal::RpcMethod rpcmethod_GetVirtualEntityByRecordId_;
    const ::grpc::internal::RpcMethod rpcmethod_HowEntityByEntityId_;
    const ::grpc::internal::RpcMethod rpcmethod_PreprocessRecord_;
    const ::grpc::internal::RpcMethod rpcmethod_PrimeEngine_;
    const ::grpc::internal::RpcMethod rpcmethod_ProcessRedoRecord_;
    const ::grpc::internal::RpcMethod rpcmethod_ReevaluateEntity_;
    const ::grpc::internal::RpcMethod rpcmethod_ReevaluateRecord_;
    const ::grpc::internal::RpcMethod rpcmethod_Reinitialize_;
    const ::grpc::internal::RpcMethod rpcmethod_SearchByAttributes_;
    const ::grpc::internal::RpcMethod rpcmethod_StreamExportCsvEntityReport_;
    const ::grpc::internal::RpcMethod rpcmethod_StreamExportJsonEntityReport_;
    const ::grpc::internal::RpcMethod rpcmethod_WhyEntities_;
    const ::grpc::internal::RpcMethod rpcmethod_WhyRecordInEntity_;
    const ::grpc::internal::RpcMethod rpcmethod_WhyRecords_;
    const ::grpc::internal::RpcMethod rpcmethod_WhySearch_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status AddRecord(::grpc::ServerContext* context, const ::szengine::AddRecordRequest* request, ::szengine::AddRecordResponse* response);
    virtual ::grpc::Status CloseExportReport(::grpc::ServerContext* context, const ::szengine::CloseExportReportRequest* request, ::szengine::CloseExportReportResponse* response);
    virtual ::grpc::Status CountRedoRecords(::grpc::ServerContext* context, const ::szengine::CountRedoRecordsRequest* request, ::szengine::CountRedoRecordsResponse* response);
    virtual ::grpc::Status DeleteRecord(::grpc::ServerContext* context, const ::szengine::DeleteRecordRequest* request, ::szengine::DeleteRecordResponse* response);
    virtual ::grpc::Status ExportCsvEntityReport(::grpc::ServerContext* context, const ::szengine::ExportCsvEntityReportRequest* request, ::szengine::ExportCsvEntityReportResponse* response);
    virtual ::grpc::Status ExportJsonEntityReport(::grpc::ServerContext* context, const ::szengine::ExportJsonEntityReportRequest* request, ::szengine::ExportJsonEntityReportResponse* response);
    virtual ::grpc::Status FetchNext(::grpc::ServerContext* context, const ::szengine::FetchNextRequest* request, ::szengine::FetchNextResponse* response);
    virtual ::grpc::Status FindInterestingEntitiesByEntityId(::grpc::ServerContext* context, const ::szengine::FindInterestingEntitiesByEntityIdRequest* request, ::szengine::FindInterestingEntitiesByEntityIdResponse* response);
    virtual ::grpc::Status FindInterestingEntitiesByRecordId(::grpc::ServerContext* context, const ::szengine::FindInterestingEntitiesByRecordIdRequest* request, ::szengine::FindInterestingEntitiesByRecordIdResponse* response);
    virtual ::grpc::Status FindNetworkByEntityId(::grpc::ServerContext* context, const ::szengine::FindNetworkByEntityIdRequest* request, ::szengine::FindNetworkByEntityIdResponse* response);
    virtual ::grpc::Status FindNetworkByRecordId(::grpc::ServerContext* context, const ::szengine::FindNetworkByRecordIdRequest* request, ::szengine::FindNetworkByRecordIdResponse* response);
    virtual ::grpc::Status FindPathByEntityId(::grpc::ServerContext* context, const ::szengine::FindPathByEntityIdRequest* request, ::szengine::FindPathByEntityIdResponse* response);
    virtual ::grpc::Status FindPathByRecordId(::grpc::ServerContext* context, const ::szengine::FindPathByRecordIdRequest* request, ::szengine::FindPathByRecordIdResponse* response);
    virtual ::grpc::Status GetActiveConfigId(::grpc::ServerContext* context, const ::szengine::GetActiveConfigIdRequest* request, ::szengine::GetActiveConfigIdResponse* response);
    virtual ::grpc::Status GetEntityByEntityId(::grpc::ServerContext* context, const ::szengine::GetEntityByEntityIdRequest* request, ::szengine::GetEntityByEntityIdResponse* response);
    virtual ::grpc::Status GetEntityByRecordId(::grpc::ServerContext* context, const ::szengine::GetEntityByRecordIdRequest* request, ::szengine::GetEntityByRecordIdResponse* response);
    virtual ::grpc::Status GetRecord(::grpc::ServerContext* context, const ::szengine::GetRecordRequest* request, ::szengine::GetRecordResponse* response);
    virtual ::grpc::Status GetRedoRecord(::grpc::ServerContext* context, const ::szengine::GetRedoRecordRequest* request, ::szengine::GetRedoRecordResponse* response);
    virtual ::grpc::Status GetStats(::grpc::ServerContext* context, const ::szengine::GetStatsRequest* request, ::szengine::GetStatsResponse* response);
    virtual ::grpc::Status GetVirtualEntityByRecordId(::grpc::ServerContext* context, const ::szengine::GetVirtualEntityByRecordIdRequest* request, ::szengine::GetVirtualEntityByRecordIdResponse* response);
    virtual ::grpc::Status HowEntityByEntityId(::grpc::ServerContext* context, const ::szengine::HowEntityByEntityIdRequest* request, ::szengine::HowEntityByEntityIdResponse* response);
    virtual ::grpc::Status PreprocessRecord(::grpc::ServerContext* context, const ::szengine::PreprocessRecordRequest* request, ::szengine::PreprocessRecordResponse* response);
    virtual ::grpc::Status PrimeEngine(::grpc::ServerContext* context, const ::szengine::PrimeEngineRequest* request, ::szengine::PrimeEngineResponse* response);
    virtual ::grpc::Status ProcessRedoRecord(::grpc::ServerContext* context, const ::szengine::ProcessRedoRecordRequest* request, ::szengine::ProcessRedoRecordResponse* response);
    virtual ::grpc::Status ReevaluateEntity(::grpc::ServerContext* context, const ::szengine::ReevaluateEntityRequest* request, ::szengine::ReevaluateEntityResponse* response);
    virtual ::grpc::Status ReevaluateRecord(::grpc::ServerContext* context, const ::szengine::ReevaluateRecordRequest* request, ::szengine::ReevaluateRecordResponse* response);
    virtual ::grpc::Status Reinitialize(::grpc::ServerContext* context, const ::szengine::ReinitializeRequest* request, ::szengine::ReinitializeResponse* response);
    virtual ::grpc::Status SearchByAttributes(::grpc::ServerContext* context, const ::szengine::SearchByAttributesRequest* request, ::szengine::SearchByAttributesResponse* response);
    virtual ::grpc::Status StreamExportCsvEntityReport(::grpc::ServerContext* context, const ::szengine::StreamExportCsvEntityReportRequest* request, ::grpc::ServerWriter< ::szengine::StreamExportCsvEntityReportResponse>* writer);
    virtual ::grpc::Status StreamExportJsonEntityReport(::grpc::ServerContext* context, const ::szengine::StreamExportJsonEntityReportRequest* request, ::grpc::ServerWriter< ::szengine::StreamExportJsonEntityReportResponse>* writer);
    virtual ::grpc::Status WhyEntities(::grpc::ServerContext* context, const ::szengine::WhyEntitiesRequest* request, ::szengine::WhyEntitiesResponse* response);
    virtual ::grpc::Status WhyRecordInEntity(::grpc::ServerContext* context, const ::szengine::WhyRecordInEntityRequest* request, ::szengine::WhyRecordInEntityResponse* response);
    virtual ::grpc::Status WhyRecords(::grpc::ServerContext* context, const ::szengine::WhyRecordsRequest* request, ::szengine::WhyRecordsResponse* response);
    virtual ::grpc::Status WhySearch(::grpc::ServerContext* context, const ::szengine::WhySearchRequest* request, ::szengine::WhySearchResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_AddRecord : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_AddRecord() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_AddRecord() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddRecord(::grpc::ServerContext* /*context*/, const ::szengine::AddRecordRequest* /*request*/, ::szengine::AddRecordResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAddRecord(::grpc::ServerContext* context, ::szengine::AddRecordRequest* request, ::grpc::ServerAsyncResponseWriter< ::szengine::AddRecordResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_CloseExportReport : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_CloseExportReport() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_CloseExportReport() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CloseExportReport(::grpc::ServerContext* /*context*/, const ::szengine::CloseExportReportRequest* /*request*/, ::szengine::CloseExportReportResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCloseExportReport(::grpc::ServerContext* context, ::szengine::CloseExportReportRequest* request, ::grpc::ServerAsyncResponseWriter< ::szengine::CloseExportReportResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_CountRedoRecords : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_CountRedoRecords() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_CountRedoRecords() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CountRedoRecords(::grpc::ServerContext* /*context*/, const ::szengine::CountRedoRecordsRequest* /*request*/, ::szengine::CountRedoRecordsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCountRedoRecords(::grpc::ServerContext* context, ::szengine::CountRedoRecordsRequest* request, ::grpc::ServerAsyncResponseWriter< ::szengine::CountRedoRecordsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DeleteRecord : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DeleteRecord() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_DeleteRecord() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteRecord(::grpc::ServerContext* /*context*/, const ::szengine::DeleteRecordRequest* /*request*/, ::szengine::DeleteRecordResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteRecord(::grpc::ServerContext* context, ::szengine::DeleteRecordRequest* request, ::grpc::ServerAsyncResponseWriter< ::szengine::DeleteRecordResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ExportCsvEntityReport : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ExportCsvEntityReport() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_ExportCsvEntityReport() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ExportCsvEntityReport(::grpc::ServerContext* /*context*/, const ::szengine::ExportCsvEntityReportRequest* /*request*/, ::szengine::ExportCsvEntityReportResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestExportCsvEntityReport(::grpc::ServerContext* context, ::szengine::ExportCsvEntityReportRequest* request, ::grpc::ServerAsyncResponseWriter< ::szengine::ExportCsvEntityReportResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ExportJsonEntityReport : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ExportJsonEntityReport() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_ExportJsonEntityReport() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ExportJsonEntityReport(::grpc::ServerContext* /*context*/, const ::szengine::ExportJsonEntityReportRequest* /*request*/, ::szengine::ExportJsonEntityReportResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestExportJsonEntityReport(::grpc::ServerContext* context, ::szengine::ExportJsonEntityReportRequest* request, ::grpc::ServerAsyncResponseWriter< ::szengine::ExportJsonEntityReportResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_FetchNext : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_FetchNext() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_FetchNext() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FetchNext(::grpc::ServerContext* /*context*/, const ::szengine::FetchNextRequest* /*request*/, ::szengine::FetchNextResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestFetchNext(::grpc::ServerContext* context, ::szengine::FetchNextRequest* request, ::grpc::ServerAsyncResponseWriter< ::szengine::FetchNextResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_FindInterestingEntitiesByEntityId : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_FindInterestingEntitiesByEntityId() {
      ::grpc::Service::MarkMethodAsync(7);
    }
    ~WithAsyncMethod_FindInterestingEntitiesByEntityId() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FindInterestingEntitiesByEntityId(::grpc::ServerContext* /*context*/, const ::szengine::FindInterestingEntitiesByEntityIdRequest* /*request*/, ::szengine::FindInterestingEntitiesByEntityIdResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestFindInterestingEntitiesByEntityId(::grpc::ServerContext* context, ::szengine::FindInterestingEntitiesByEntityIdRequest* request, ::grpc::ServerAsyncResponseWriter< ::szengine::FindInterestingEntitiesByEntityIdResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_FindInterestingEntitiesByRecordId : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_FindInterestingEntitiesByRecordId() {
      ::grpc::Service::MarkMethodAsync(8);
    }
    ~WithAsyncMethod_FindInterestingEntitiesByRecordId() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FindInterestingEntitiesByRecordId(::grpc::ServerContext* /*context*/, const ::szengine::FindInterestingEntitiesByRecordIdRequest* /*request*/, ::szengine::FindInterestingEntitiesByRecordIdResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestFindInterestingEntitiesByRecordId(::grpc::ServerContext* context, ::szengine::FindInterestingEntitiesByRecordIdRequest* request, ::grpc::ServerAsyncResponseWriter< ::szengine::FindInterestingEntitiesByRecordIdResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_FindNetworkByEntityId : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_FindNetworkByEntityId() {
      ::grpc::Service::MarkMethodAsync(9);
    }
    ~WithAsyncMethod_FindNetworkByEntityId() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FindNetworkByEntityId(::grpc::ServerContext* /*context*/, const ::szengine::FindNetworkByEntityIdRequest* /*request*/, ::szengine::FindNetworkByEntityIdResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestFindNetworkByEntityId(::grpc::ServerContext* context, ::szengine::FindNetworkByEntityIdRequest* request, ::grpc::ServerAsyncResponseWriter< ::szengine::FindNetworkByEntityIdResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_FindNetworkByRecordId : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_FindNetworkByRecordId() {
      ::grpc::Service::MarkMethodAsync(10);
    }
    ~WithAsyncMethod_FindNetworkByRecordId() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FindNetworkByRecordId(::grpc::ServerContext* /*context*/, const ::szengine::FindNetworkByRecordIdRequest* /*request*/, ::szengine::FindNetworkByRecordIdResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestFindNetworkByRecordId(::grpc::ServerContext* context, ::szengine::FindNetworkByRecordIdRequest* request, ::grpc::ServerAsyncResponseWriter< ::szengine::FindNetworkByRecordIdResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(10, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_FindPathByEntityId : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_FindPathByEntityId() {
      ::grpc::Service::MarkMethodAsync(11);
    }
    ~WithAsyncMethod_FindPathByEntityId() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FindPathByEntityId(::grpc::ServerContext* /*context*/, const ::szengine::FindPathByEntityIdRequest* /*request*/, ::szengine::FindPathByEntityIdResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestFindPathByEntityId(::grpc::ServerContext* context, ::szengine::FindPathByEntityIdRequest* request, ::grpc::ServerAsyncResponseWriter< ::szengine::FindPathByEntityIdResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(11, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_FindPathByRecordId : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_FindPathByRecordId() {
      ::grpc::Service::MarkMethodAsync(12);
    }
    ~WithAsyncMethod_FindPathByRecordId() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FindPathByRecordId(::grpc::ServerContext* /*context*/, const ::szengine::FindPathByRecordIdRequest* /*request*/, ::szengine::FindPathByRecordIdResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestFindPathByRecordId(::grpc::ServerContext* context, ::szengine::FindPathByRecordIdRequest* request, ::grpc::ServerAsyncResponseWriter< ::szengine::FindPathByRecordIdResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(12, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetActiveConfigId : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetActiveConfigId() {
      ::grpc::Service::MarkMethodAsync(13);
    }
    ~WithAsyncMethod_GetActiveConfigId() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetActiveConfigId(::grpc::ServerContext* /*context*/, const ::szengine::GetActiveConfigIdRequest* /*request*/, ::szengine::GetActiveConfigIdResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetActiveConfigId(::grpc::ServerContext* context, ::szengine::GetActiveConfigIdRequest* request, ::grpc::ServerAsyncResponseWriter< ::szengine::GetActiveConfigIdResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(13, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetEntityByEntityId : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetEntityByEntityId() {
      ::grpc::Service::MarkMethodAsync(14);
    }
    ~WithAsyncMethod_GetEntityByEntityId() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetEntityByEntityId(::grpc::ServerContext* /*context*/, const ::szengine::GetEntityByEntityIdRequest* /*request*/, ::szengine::GetEntityByEntityIdResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetEntityByEntityId(::grpc::ServerContext* context, ::szengine::GetEntityByEntityIdRequest* request, ::grpc::ServerAsyncResponseWriter< ::szengine::GetEntityByEntityIdResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(14, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetEntityByRecordId : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetEntityByRecordId() {
      ::grpc::Service::MarkMethodAsync(15);
    }
    ~WithAsyncMethod_GetEntityByRecordId() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetEntityByRecordId(::grpc::ServerContext* /*context*/, const ::szengine::GetEntityByRecordIdRequest* /*request*/, ::szengine::GetEntityByRecordIdResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetEntityByRecordId(::grpc::ServerContext* context, ::szengine::GetEntityByRecordIdRequest* request, ::grpc::ServerAsyncResponseWriter< ::szengine::GetEntityByRecordIdResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(15, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetRecord : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetRecord() {
      ::grpc::Service::MarkMethodAsync(16);
    }
    ~WithAsyncMethod_GetRecord() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetRecord(::grpc::ServerContext* /*context*/, const ::szengine::GetRecordRequest* /*request*/, ::szengine::GetRecordResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetRecord(::grpc::ServerContext* context, ::szengine::GetRecordRequest* request, ::grpc::ServerAsyncResponseWriter< ::szengine::GetRecordResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(16, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetRedoRecord : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetRedoRecord() {
      ::grpc::Service::MarkMethodAsync(17);
    }
    ~WithAsyncMethod_GetRedoRecord() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetRedoRecord(::grpc::ServerContext* /*context*/, const ::szengine::GetRedoRecordRequest* /*request*/, ::szengine::GetRedoRecordResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetRedoRecord(::grpc::ServerContext* context, ::szengine::GetRedoRecordRequest* request, ::grpc::ServerAsyncResponseWriter< ::szengine::GetRedoRecordResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(17, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetStats : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetStats() {
      ::grpc::Service::MarkMethodAsync(18);
    }
    ~WithAsyncMethod_GetStats() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetStats(::grpc::ServerContext* /*context*/, const ::szengine::GetStatsRequest* /*request*/, ::szengine::GetStatsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetStats(::grpc::ServerContext* context, ::szengine::GetStatsRequest* request, ::grpc::ServerAsyncResponseWriter< ::szengine::GetStatsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(18, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetVirtualEntityByRecordId : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetVirtualEntityByRecordId() {
      ::grpc::Service::MarkMethodAsync(19);
    }
    ~WithAsyncMethod_GetVirtualEntityByRecordId() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetVirtualEntityByRecordId(::grpc::ServerContext* /*context*/, const ::szengine::GetVirtualEntityByRecordIdRequest* /*request*/, ::szengine::GetVirtualEntityByRecordIdResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetVirtualEntityByRecordId(::grpc::ServerContext* context, ::szengine::GetVirtualEntityByRecordIdRequest* request, ::grpc::ServerAsyncResponseWriter< ::szengine::GetVirtualEntityByRecordIdResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(19, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_HowEntityByEntityId : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_HowEntityByEntityId() {
      ::grpc::Service::MarkMethodAsync(20);
    }
    ~WithAsyncMethod_HowEntityByEntityId() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status HowEntityByEntityId(::grpc::ServerContext* /*context*/, const ::szengine::HowEntityByEntityIdRequest* /*request*/, ::szengine::HowEntityByEntityIdResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestHowEntityByEntityId(::grpc::ServerContext* context, ::szengine::HowEntityByEntityIdRequest* request, ::grpc::ServerAsyncResponseWriter< ::szengine::HowEntityByEntityIdResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(20, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_PreprocessRecord : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_PreprocessRecord() {
      ::grpc::Service::MarkMethodAsync(21);
    }
    ~WithAsyncMethod_PreprocessRecord() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PreprocessRecord(::grpc::ServerContext* /*context*/, const ::szengine::PreprocessRecordRequest* /*request*/, ::szengine::PreprocessRecordResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPreprocessRecord(::grpc::ServerContext* context, ::szengine::PreprocessRecordRequest* request, ::grpc::ServerAsyncResponseWriter< ::szengine::PreprocessRecordResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(21, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_PrimeEngine : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_PrimeEngine() {
      ::grpc::Service::MarkMethodAsync(22);
    }
    ~WithAsyncMethod_PrimeEngine() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PrimeEngine(::grpc::ServerContext* /*context*/, const ::szengine::PrimeEngineRequest* /*request*/, ::szengine::PrimeEngineResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPrimeEngine(::grpc::ServerContext* context, ::szengine::PrimeEngineRequest* request, ::grpc::ServerAsyncResponseWriter< ::szengine::PrimeEngineResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(22, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ProcessRedoRecord : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ProcessRedoRecord() {
      ::grpc::Service::MarkMethodAsync(23);
    }
    ~WithAsyncMethod_ProcessRedoRecord() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ProcessRedoRecord(::grpc::ServerContext* /*context*/, const ::szengine::ProcessRedoRecordRequest* /*request*/, ::szengine::ProcessRedoRecordResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestProcessRedoRecord(::grpc::ServerContext* context, ::szengine::ProcessRedoRecordRequest* request, ::grpc::ServerAsyncResponseWriter< ::szengine::ProcessRedoRecordResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(23, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ReevaluateEntity : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ReevaluateEntity() {
      ::grpc::Service::MarkMethodAsync(24);
    }
    ~WithAsyncMethod_ReevaluateEntity() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReevaluateEntity(::grpc::ServerContext* /*context*/, const ::szengine::ReevaluateEntityRequest* /*request*/, ::szengine::ReevaluateEntityResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestReevaluateEntity(::grpc::ServerContext* context, ::szengine::ReevaluateEntityRequest* request, ::grpc::ServerAsyncResponseWriter< ::szengine::ReevaluateEntityResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(24, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ReevaluateRecord : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ReevaluateRecord() {
      ::grpc::Service::MarkMethodAsync(25);
    }
    ~WithAsyncMethod_ReevaluateRecord() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReevaluateRecord(::grpc::ServerContext* /*context*/, const ::szengine::ReevaluateRecordRequest* /*request*/, ::szengine::ReevaluateRecordResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestReevaluateRecord(::grpc::ServerContext* context, ::szengine::ReevaluateRecordRequest* request, ::grpc::ServerAsyncResponseWriter< ::szengine::ReevaluateRecordResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(25, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Reinitialize : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Reinitialize() {
      ::grpc::Service::MarkMethodAsync(26);
    }
    ~WithAsyncMethod_Reinitialize() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Reinitialize(::grpc::ServerContext* /*context*/, const ::szengine::ReinitializeRequest* /*request*/, ::szengine::ReinitializeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestReinitialize(::grpc::ServerContext* context, ::szengine::ReinitializeRequest* request, ::grpc::ServerAsyncResponseWriter< ::szengine::ReinitializeResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(26, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SearchByAttributes : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SearchByAttributes() {
      ::grpc::Service::MarkMethodAsync(27);
    }
    ~WithAsyncMethod_SearchByAttributes() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SearchByAttributes(::grpc::ServerContext* /*context*/, const ::szengine::SearchByAttributesRequest* /*request*/, ::szengine::SearchByAttributesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSearchByAttributes(::grpc::ServerContext* context, ::szengine::SearchByAttributesRequest* request, ::grpc::ServerAsyncResponseWriter< ::szengine::SearchByAttributesResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(27, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_StreamExportCsvEntityReport : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_StreamExportCsvEntityReport() {
      ::grpc::Service::MarkMethodAsync(28);
    }
    ~WithAsyncMethod_StreamExportCsvEntityReport() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StreamExportCsvEntityReport(::grpc::ServerContext* /*context*/, const ::szengine::StreamExportCsvEntityReportRequest* /*request*/, ::grpc::ServerWriter< ::szengine::StreamExportCsvEntityReportResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStreamExportCsvEntityReport(::grpc::ServerContext* context, ::szengine::StreamExportCsvEntityReportRequest* request, ::grpc::ServerAsyncWriter< ::szengine::StreamExportCsvEntityReportResponse>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(28, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_StreamExportJsonEntityReport : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_StreamExportJsonEntityReport() {
      ::grpc::Service::MarkMethodAsync(29);
    }
    ~WithAsyncMethod_StreamExportJsonEntityReport() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StreamExportJsonEntityReport(::grpc::ServerContext* /*context*/, const ::szengine::StreamExportJsonEntityReportRequest* /*request*/, ::grpc::ServerWriter< ::szengine::StreamExportJsonEntityReportResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStreamExportJsonEntityReport(::grpc::ServerContext* context, ::szengine::StreamExportJsonEntityReportRequest* request, ::grpc::ServerAsyncWriter< ::szengine::StreamExportJsonEntityReportResponse>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(29, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_WhyEntities : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_WhyEntities() {
      ::grpc::Service::MarkMethodAsync(30);
    }
    ~WithAsyncMethod_WhyEntities() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status WhyEntities(::grpc::ServerContext* /*context*/, const ::szengine::WhyEntitiesRequest* /*request*/, ::szengine::WhyEntitiesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestWhyEntities(::grpc::ServerContext* context, ::szengine::WhyEntitiesRequest* request, ::grpc::ServerAsyncResponseWriter< ::szengine::WhyEntitiesResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(30, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_WhyRecordInEntity : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_WhyRecordInEntity() {
      ::grpc::Service::MarkMethodAsync(31);
    }
    ~WithAsyncMethod_WhyRecordInEntity() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status WhyRecordInEntity(::grpc::ServerContext* /*context*/, const ::szengine::WhyRecordInEntityRequest* /*request*/, ::szengine::WhyRecordInEntityResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestWhyRecordInEntity(::grpc::ServerContext* context, ::szengine::WhyRecordInEntityRequest* request, ::grpc::ServerAsyncResponseWriter< ::szengine::WhyRecordInEntityResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(31, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_WhyRecords : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_WhyRecords() {
      ::grpc::Service::MarkMethodAsync(32);
    }
    ~WithAsyncMethod_WhyRecords() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status WhyRecords(::grpc::ServerContext* /*context*/, const ::szengine::WhyRecordsRequest* /*request*/, ::szengine::WhyRecordsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestWhyRecords(::grpc::ServerContext* context, ::szengine::WhyRecordsRequest* request, ::grpc::ServerAsyncResponseWriter< ::szengine::WhyRecordsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(32, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_WhySearch : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_WhySearch() {
      ::grpc::Service::MarkMethodAsync(33);
    }
    ~WithAsyncMethod_WhySearch() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status WhySearch(::grpc::ServerContext* /*context*/, const ::szengine::WhySearchRequest* /*request*/, ::szengine::WhySearchResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestWhySearch(::grpc::ServerContext* context, ::szengine::WhySearchRequest* request, ::grpc::ServerAsyncResponseWriter< ::szengine::WhySearchResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(33, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_AddRecord<WithAsyncMethod_CloseExportReport<WithAsyncMethod_CountRedoRecords<WithAsyncMethod_DeleteRecord<WithAsyncMethod_ExportCsvEntityReport<WithAsyncMethod_ExportJsonEntityReport<WithAsyncMethod_FetchNext<WithAsyncMethod_FindInterestingEntitiesByEntityId<WithAsyncMethod_FindInterestingEntitiesByRecordId<WithAsyncMethod_FindNetworkByEntityId<WithAsyncMethod_FindNetworkByRecordId<WithAsyncMethod_FindPathByEntityId<WithAsyncMethod_FindPathByRecordId<WithAsyncMethod_GetActiveConfigId<WithAsyncMethod_GetEntityByEntityId<WithAsyncMethod_GetEntityByRecordId<WithAsyncMethod_GetRecord<WithAsyncMethod_GetRedoRecord<WithAsyncMethod_GetStats<WithAsyncMethod_GetVirtualEntityByRecordId<WithAsyncMethod_HowEntityByEntityId<WithAsyncMethod_PreprocessRecord<WithAsyncMethod_PrimeEngine<WithAsyncMethod_ProcessRedoRecord<WithAsyncMethod_ReevaluateEntity<WithAsyncMethod_ReevaluateRecord<WithAsyncMethod_Reinitialize<WithAsyncMethod_SearchByAttributes<WithAsyncMethod_StreamExportCsvEntityReport<WithAsyncMethod_StreamExportJsonEntityReport<WithAsyncMethod_WhyEntities<WithAsyncMethod_WhyRecordInEntity<WithAsyncMethod_WhyRecords<WithAsyncMethod_WhySearch<Service > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_AddRecord : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_AddRecord() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::szengine::AddRecordRequest, ::szengine::AddRecordResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::szengine::AddRecordRequest* request, ::szengine::AddRecordResponse* response) { return this->AddRecord(context, request, response); }));}
    void SetMessageAllocatorFor_AddRecord(
        ::grpc::MessageAllocator< ::szengine::AddRecordRequest, ::szengine::AddRecordResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::szengine::AddRecordRequest, ::szengine::AddRecordResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_AddRecord() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddRecord(::grpc::ServerContext* /*context*/, const ::szengine::AddRecordRequest* /*request*/, ::szengine::AddRecordResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* AddRecord(
      ::grpc::CallbackServerContext* /*context*/, const ::szengine::AddRecordRequest* /*request*/, ::szengine::AddRecordResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_CloseExportReport : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_CloseExportReport() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::szengine::CloseExportReportRequest, ::szengine::CloseExportReportResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::szengine::CloseExportReportRequest* request, ::szengine::CloseExportReportResponse* response) { return this->CloseExportReport(context, request, response); }));}
    void SetMessageAllocatorFor_CloseExportReport(
        ::grpc::MessageAllocator< ::szengine::CloseExportReportRequest, ::szengine::CloseExportReportResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::szengine::CloseExportReportRequest, ::szengine::CloseExportReportResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_CloseExportReport() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CloseExportReport(::grpc::ServerContext* /*context*/, const ::szengine::CloseExportReportRequest* /*request*/, ::szengine::CloseExportReportResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CloseExportReport(
      ::grpc::CallbackServerContext* /*context*/, const ::szengine::CloseExportReportRequest* /*request*/, ::szengine::CloseExportReportResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_CountRedoRecords : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_CountRedoRecords() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::szengine::CountRedoRecordsRequest, ::szengine::CountRedoRecordsResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::szengine::CountRedoRecordsRequest* request, ::szengine::CountRedoRecordsResponse* response) { return this->CountRedoRecords(context, request, response); }));}
    void SetMessageAllocatorFor_CountRedoRecords(
        ::grpc::MessageAllocator< ::szengine::CountRedoRecordsRequest, ::szengine::CountRedoRecordsResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::szengine::CountRedoRecordsRequest, ::szengine::CountRedoRecordsResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_CountRedoRecords() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CountRedoRecords(::grpc::ServerContext* /*context*/, const ::szengine::CountRedoRecordsRequest* /*request*/, ::szengine::CountRedoRecordsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CountRedoRecords(
      ::grpc::CallbackServerContext* /*context*/, const ::szengine::CountRedoRecordsRequest* /*request*/, ::szengine::CountRedoRecordsResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_DeleteRecord : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_DeleteRecord() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::szengine::DeleteRecordRequest, ::szengine::DeleteRecordResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::szengine::DeleteRecordRequest* request, ::szengine::DeleteRecordResponse* response) { return this->DeleteRecord(context, request, response); }));}
    void SetMessageAllocatorFor_DeleteRecord(
        ::grpc::MessageAllocator< ::szengine::DeleteRecordRequest, ::szengine::DeleteRecordResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::szengine::DeleteRecordRequest, ::szengine::DeleteRecordResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_DeleteRecord() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteRecord(::grpc::ServerContext* /*context*/, const ::szengine::DeleteRecordRequest* /*request*/, ::szengine::DeleteRecordResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DeleteRecord(
      ::grpc::CallbackServerContext* /*context*/, const ::szengine::DeleteRecordRequest* /*request*/, ::szengine::DeleteRecordResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ExportCsvEntityReport : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ExportCsvEntityReport() {
      ::grpc::Service::MarkMethodCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::szengine::ExportCsvEntityReportRequest, ::szengine::ExportCsvEntityReportResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::szengine::ExportCsvEntityReportRequest* request, ::szengine::ExportCsvEntityReportResponse* response) { return this->ExportCsvEntityReport(context, request, response); }));}
    void SetMessageAllocatorFor_ExportCsvEntityReport(
        ::grpc::MessageAllocator< ::szengine::ExportCsvEntityReportRequest, ::szengine::ExportCsvEntityReportResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::szengine::ExportCsvEntityReportRequest, ::szengine::ExportCsvEntityReportResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ExportCsvEntityReport() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ExportCsvEntityReport(::grpc::ServerContext* /*context*/, const ::szengine::ExportCsvEntityReportRequest* /*request*/, ::szengine::ExportCsvEntityReportResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ExportCsvEntityReport(
      ::grpc::CallbackServerContext* /*context*/, const ::szengine::ExportCsvEntityReportRequest* /*request*/, ::szengine::ExportCsvEntityReportResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ExportJsonEntityReport : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ExportJsonEntityReport() {
      ::grpc::Service::MarkMethodCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::szengine::ExportJsonEntityReportRequest, ::szengine::ExportJsonEntityReportResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::szengine::ExportJsonEntityReportRequest* request, ::szengine::ExportJsonEntityReportResponse* response) { return this->ExportJsonEntityReport(context, request, response); }));}
    void SetMessageAllocatorFor_ExportJsonEntityReport(
        ::grpc::MessageAllocator< ::szengine::ExportJsonEntityReportRequest, ::szengine::ExportJsonEntityReportResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(5);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::szengine::ExportJsonEntityReportRequest, ::szengine::ExportJsonEntityReportResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ExportJsonEntityReport() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ExportJsonEntityReport(::grpc::ServerContext* /*context*/, const ::szengine::ExportJsonEntityReportRequest* /*request*/, ::szengine::ExportJsonEntityReportResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ExportJsonEntityReport(
      ::grpc::CallbackServerContext* /*context*/, const ::szengine::ExportJsonEntityReportRequest* /*request*/, ::szengine::ExportJsonEntityReportResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_FetchNext : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_FetchNext() {
      ::grpc::Service::MarkMethodCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::szengine::FetchNextRequest, ::szengine::FetchNextResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::szengine::FetchNextRequest* request, ::szengine::FetchNextResponse* response) { return this->FetchNext(context, request, response); }));}
    void SetMessageAllocatorFor_FetchNext(
        ::grpc::MessageAllocator< ::szengine::FetchNextRequest, ::szengine::FetchNextResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(6);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::szengine::FetchNextRequest, ::szengine::FetchNextResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_FetchNext() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FetchNext(::grpc::ServerContext* /*context*/, const ::szengine::FetchNextRequest* /*request*/, ::szengine::FetchNextResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* FetchNext(
      ::grpc::CallbackServerContext* /*context*/, const ::szengine::FetchNextRequest* /*request*/, ::szengine::FetchNextResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_FindInterestingEntitiesByEntityId : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_FindInterestingEntitiesByEntityId() {
      ::grpc::Service::MarkMethodCallback(7,
          new ::grpc::internal::CallbackUnaryHandler< ::szengine::FindInterestingEntitiesByEntityIdRequest, ::szengine::FindInterestingEntitiesByEntityIdResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::szengine::FindInterestingEntitiesByEntityIdRequest* request, ::szengine::FindInterestingEntitiesByEntityIdResponse* response) { return this->FindInterestingEntitiesByEntityId(context, request, response); }));}
    void SetMessageAllocatorFor_FindInterestingEntitiesByEntityId(
        ::grpc::MessageAllocator< ::szengine::FindInterestingEntitiesByEntityIdRequest, ::szengine::FindInterestingEntitiesByEntityIdResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(7);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::szengine::FindInterestingEntitiesByEntityIdRequest, ::szengine::FindInterestingEntitiesByEntityIdResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_FindInterestingEntitiesByEntityId() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FindInterestingEntitiesByEntityId(::grpc::ServerContext* /*context*/, const ::szengine::FindInterestingEntitiesByEntityIdRequest* /*request*/, ::szengine::FindInterestingEntitiesByEntityIdResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* FindInterestingEntitiesByEntityId(
      ::grpc::CallbackServerContext* /*context*/, const ::szengine::FindInterestingEntitiesByEntityIdRequest* /*request*/, ::szengine::FindInterestingEntitiesByEntityIdResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_FindInterestingEntitiesByRecordId : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_FindInterestingEntitiesByRecordId() {
      ::grpc::Service::MarkMethodCallback(8,
          new ::grpc::internal::CallbackUnaryHandler< ::szengine::FindInterestingEntitiesByRecordIdRequest, ::szengine::FindInterestingEntitiesByRecordIdResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::szengine::FindInterestingEntitiesByRecordIdRequest* request, ::szengine::FindInterestingEntitiesByRecordIdResponse* response) { return this->FindInterestingEntitiesByRecordId(context, request, response); }));}
    void SetMessageAllocatorFor_FindInterestingEntitiesByRecordId(
        ::grpc::MessageAllocator< ::szengine::FindInterestingEntitiesByRecordIdRequest, ::szengine::FindInterestingEntitiesByRecordIdResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(8);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::szengine::FindInterestingEntitiesByRecordIdRequest, ::szengine::FindInterestingEntitiesByRecordIdResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_FindInterestingEntitiesByRecordId() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FindInterestingEntitiesByRecordId(::grpc::ServerContext* /*context*/, const ::szengine::FindInterestingEntitiesByRecordIdRequest* /*request*/, ::szengine::FindInterestingEntitiesByRecordIdResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* FindInterestingEntitiesByRecordId(
      ::grpc::CallbackServerContext* /*context*/, const ::szengine::FindInterestingEntitiesByRecordIdRequest* /*request*/, ::szengine::FindInterestingEntitiesByRecordIdResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_FindNetworkByEntityId : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_FindNetworkByEntityId() {
      ::grpc::Service::MarkMethodCallback(9,
          new ::grpc::internal::CallbackUnaryHandler< ::szengine::FindNetworkByEntityIdRequest, ::szengine::FindNetworkByEntityIdResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::szengine::FindNetworkByEntityIdRequest* request, ::szengine::FindNetworkByEntityIdResponse* response) { return this->FindNetworkByEntityId(context, request, response); }));}
    void SetMessageAllocatorFor_FindNetworkByEntityId(
        ::grpc::MessageAllocator< ::szengine::FindNetworkByEntityIdRequest, ::szengine::FindNetworkByEntityIdResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(9);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::szengine::FindNetworkByEntityIdRequest, ::szengine::FindNetworkByEntityIdResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_FindNetworkByEntityId() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FindNetworkByEntityId(::grpc::ServerContext* /*context*/, const ::szengine::FindNetworkByEntityIdRequest* /*request*/, ::szengine::FindNetworkByEntityIdResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* FindNetworkByEntityId(
      ::grpc::CallbackServerContext* /*context*/, const ::szengine::FindNetworkByEntityIdRequest* /*request*/, ::szengine::FindNetworkByEntityIdResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_FindNetworkByRecordId : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_FindNetworkByRecordId() {
      ::grpc::Service::MarkMethodCallback(10,
          new ::grpc::internal::CallbackUnaryHandler< ::szengine::FindNetworkByRecordIdRequest, ::szengine::FindNetworkByRecordIdResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::szengine::FindNetworkByRecordIdRequest* request, ::szengine::FindNetworkByRecordIdResponse* response) { return this->FindNetworkByRecordId(context, request, response); }));}
    void SetMessageAllocatorFor_FindNetworkByRecordId(
        ::grpc::MessageAllocator< ::szengine::FindNetworkByRecordIdRequest, ::szengine::FindNetworkByRecordIdResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(10);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::szengine::FindNetworkByRecordIdRequest, ::szengine::FindNetworkByRecordIdResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_FindNetworkByRecordId() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FindNetworkByRecordId(::grpc::ServerContext* /*context*/, const ::szengine::FindNetworkByRecordIdRequest* /*request*/, ::szengine::FindNetworkByRecordIdResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* FindNetworkByRecordId(
      ::grpc::CallbackServerContext* /*context*/, const ::szengine::FindNetworkByRecordIdRequest* /*request*/, ::szengine::FindNetworkByRecordIdResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_FindPathByEntityId : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_FindPathByEntityId() {
      ::grpc::Service::MarkMethodCallback(11,
          new ::grpc::internal::CallbackUnaryHandler< ::szengine::FindPathByEntityIdRequest, ::szengine::FindPathByEntityIdResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::szengine::FindPathByEntityIdRequest* request, ::szengine::FindPathByEntityIdResponse* response) { return this->FindPathByEntityId(context, request, response); }));}
    void SetMessageAllocatorFor_FindPathByEntityId(
        ::grpc::MessageAllocator< ::szengine::FindPathByEntityIdRequest, ::szengine::FindPathByEntityIdResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(11);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::szengine::FindPathByEntityIdRequest, ::szengine::FindPathByEntityIdResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_FindPathByEntityId() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FindPathByEntityId(::grpc::ServerContext* /*context*/, const ::szengine::FindPathByEntityIdRequest* /*request*/, ::szengine::FindPathByEntityIdResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* FindPathByEntityId(
      ::grpc::CallbackServerContext* /*context*/, const ::szengine::FindPathByEntityIdRequest* /*request*/, ::szengine::FindPathByEntityIdResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_FindPathByRecordId : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_FindPathByRecordId() {
      ::grpc::Service::MarkMethodCallback(12,
          new ::grpc::internal::CallbackUnaryHandler< ::szengine::FindPathByRecordIdRequest, ::szengine::FindPathByRecordIdResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::szengine::FindPathByRecordIdRequest* request, ::szengine::FindPathByRecordIdResponse* response) { return this->FindPathByRecordId(context, request, response); }));}
    void SetMessageAllocatorFor_FindPathByRecordId(
        ::grpc::MessageAllocator< ::szengine::FindPathByRecordIdRequest, ::szengine::FindPathByRecordIdResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(12);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::szengine::FindPathByRecordIdRequest, ::szengine::FindPathByRecordIdResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_FindPathByRecordId() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FindPathByRecordId(::grpc::ServerContext* /*context*/, const ::szengine::FindPathByRecordIdRequest* /*request*/, ::szengine::FindPathByRecordIdResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* FindPathByRecordId(
      ::grpc::CallbackServerContext* /*context*/, const ::szengine::FindPathByRecordIdRequest* /*request*/, ::szengine::FindPathByRecordIdResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetActiveConfigId : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetActiveConfigId() {
      ::grpc::Service::MarkMethodCallback(13,
          new ::grpc::internal::CallbackUnaryHandler< ::szengine::GetActiveConfigIdRequest, ::szengine::GetActiveConfigIdResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::szengine::GetActiveConfigIdRequest* request, ::szengine::GetActiveConfigIdResponse* response) { return this->GetActiveConfigId(context, request, response); }));}
    void SetMessageAllocatorFor_GetActiveConfigId(
        ::grpc::MessageAllocator< ::szengine::GetActiveConfigIdRequest, ::szengine::GetActiveConfigIdResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(13);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::szengine::GetActiveConfigIdRequest, ::szengine::GetActiveConfigIdResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetActiveConfigId() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetActiveConfigId(::grpc::ServerContext* /*context*/, const ::szengine::GetActiveConfigIdRequest* /*request*/, ::szengine::GetActiveConfigIdResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetActiveConfigId(
      ::grpc::CallbackServerContext* /*context*/, const ::szengine::GetActiveConfigIdRequest* /*request*/, ::szengine::GetActiveConfigIdResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetEntityByEntityId : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetEntityByEntityId() {
      ::grpc::Service::MarkMethodCallback(14,
          new ::grpc::internal::CallbackUnaryHandler< ::szengine::GetEntityByEntityIdRequest, ::szengine::GetEntityByEntityIdResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::szengine::GetEntityByEntityIdRequest* request, ::szengine::GetEntityByEntityIdResponse* response) { return this->GetEntityByEntityId(context, request, response); }));}
    void SetMessageAllocatorFor_GetEntityByEntityId(
        ::grpc::MessageAllocator< ::szengine::GetEntityByEntityIdRequest, ::szengine::GetEntityByEntityIdResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(14);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::szengine::GetEntityByEntityIdRequest, ::szengine::GetEntityByEntityIdResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetEntityByEntityId() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetEntityByEntityId(::grpc::ServerContext* /*context*/, const ::szengine::GetEntityByEntityIdRequest* /*request*/, ::szengine::GetEntityByEntityIdResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetEntityByEntityId(
      ::grpc::CallbackServerContext* /*context*/, const ::szengine::GetEntityByEntityIdRequest* /*request*/, ::szengine::GetEntityByEntityIdResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetEntityByRecordId : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetEntityByRecordId() {
      ::grpc::Service::MarkMethodCallback(15,
          new ::grpc::internal::CallbackUnaryHandler< ::szengine::GetEntityByRecordIdRequest, ::szengine::GetEntityByRecordIdResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::szengine::GetEntityByRecordIdRequest* request, ::szengine::GetEntityByRecordIdResponse* response) { return this->GetEntityByRecordId(context, request, response); }));}
    void SetMessageAllocatorFor_GetEntityByRecordId(
        ::grpc::MessageAllocator< ::szengine::GetEntityByRecordIdRequest, ::szengine::GetEntityByRecordIdResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(15);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::szengine::GetEntityByRecordIdRequest, ::szengine::GetEntityByRecordIdResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetEntityByRecordId() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetEntityByRecordId(::grpc::ServerContext* /*context*/, const ::szengine::GetEntityByRecordIdRequest* /*request*/, ::szengine::GetEntityByRecordIdResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetEntityByRecordId(
      ::grpc::CallbackServerContext* /*context*/, const ::szengine::GetEntityByRecordIdRequest* /*request*/, ::szengine::GetEntityByRecordIdResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetRecord : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetRecord() {
      ::grpc::Service::MarkMethodCallback(16,
          new ::grpc::internal::CallbackUnaryHandler< ::szengine::GetRecordRequest, ::szengine::GetRecordResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::szengine::GetRecordRequest* request, ::szengine::GetRecordResponse* response) { return this->GetRecord(context, request, response); }));}
    void SetMessageAllocatorFor_GetRecord(
        ::grpc::MessageAllocator< ::szengine::GetRecordRequest, ::szengine::GetRecordResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(16);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::szengine::GetRecordRequest, ::szengine::GetRecordResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetRecord() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetRecord(::grpc::ServerContext* /*context*/, const ::szengine::GetRecordRequest* /*request*/, ::szengine::GetRecordResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetRecord(
      ::grpc::CallbackServerContext* /*context*/, const ::szengine::GetRecordRequest* /*request*/, ::szengine::GetRecordResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetRedoRecord : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetRedoRecord() {
      ::grpc::Service::MarkMethodCallback(17,
          new ::grpc::internal::CallbackUnaryHandler< ::szengine::GetRedoRecordRequest, ::szengine::GetRedoRecordResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::szengine::GetRedoRecordRequest* request, ::szengine::GetRedoRecordResponse* response) { return this->GetRedoRecord(context, request, response); }));}
    void SetMessageAllocatorFor_GetRedoRecord(
        ::grpc::MessageAllocator< ::szengine::GetRedoRecordRequest, ::szengine::GetRedoRecordResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(17);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::szengine::GetRedoRecordRequest, ::szengine::GetRedoRecordResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetRedoRecord() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetRedoRecord(::grpc::ServerContext* /*context*/, const ::szengine::GetRedoRecordRequest* /*request*/, ::szengine::GetRedoRecordResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetRedoRecord(
      ::grpc::CallbackServerContext* /*context*/, const ::szengine::GetRedoRecordRequest* /*request*/, ::szengine::GetRedoRecordResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetStats : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetStats() {
      ::grpc::Service::MarkMethodCallback(18,
          new ::grpc::internal::CallbackUnaryHandler< ::szengine::GetStatsRequest, ::szengine::GetStatsResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::szengine::GetStatsRequest* request, ::szengine::GetStatsResponse* response) { return this->GetStats(context, request, response); }));}
    void SetMessageAllocatorFor_GetStats(
        ::grpc::MessageAllocator< ::szengine::GetStatsRequest, ::szengine::GetStatsResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(18);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::szengine::GetStatsRequest, ::szengine::GetStatsResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetStats() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetStats(::grpc::ServerContext* /*context*/, const ::szengine::GetStatsRequest* /*request*/, ::szengine::GetStatsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetStats(
      ::grpc::CallbackServerContext* /*context*/, const ::szengine::GetStatsRequest* /*request*/, ::szengine::GetStatsResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetVirtualEntityByRecordId : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetVirtualEntityByRecordId() {
      ::grpc::Service::MarkMethodCallback(19,
          new ::grpc::internal::CallbackUnaryHandler< ::szengine::GetVirtualEntityByRecordIdRequest, ::szengine::GetVirtualEntityByRecordIdResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::szengine::GetVirtualEntityByRecordIdRequest* request, ::szengine::GetVirtualEntityByRecordIdResponse* response) { return this->GetVirtualEntityByRecordId(context, request, response); }));}
    void SetMessageAllocatorFor_GetVirtualEntityByRecordId(
        ::grpc::MessageAllocator< ::szengine::GetVirtualEntityByRecordIdRequest, ::szengine::GetVirtualEntityByRecordIdResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(19);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::szengine::GetVirtualEntityByRecordIdRequest, ::szengine::GetVirtualEntityByRecordIdResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetVirtualEntityByRecordId() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetVirtualEntityByRecordId(::grpc::ServerContext* /*context*/, const ::szengine::GetVirtualEntityByRecordIdRequest* /*request*/, ::szengine::GetVirtualEntityByRecordIdResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetVirtualEntityByRecordId(
      ::grpc::CallbackServerContext* /*context*/, const ::szengine::GetVirtualEntityByRecordIdRequest* /*request*/, ::szengine::GetVirtualEntityByRecordIdResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_HowEntityByEntityId : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_HowEntityByEntityId() {
      ::grpc::Service::MarkMethodCallback(20,
          new ::grpc::internal::CallbackUnaryHandler< ::szengine::HowEntityByEntityIdRequest, ::szengine::HowEntityByEntityIdResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::szengine::HowEntityByEntityIdRequest* request, ::szengine::HowEntityByEntityIdResponse* response) { return this->HowEntityByEntityId(context, request, response); }));}
    void SetMessageAllocatorFor_HowEntityByEntityId(
        ::grpc::MessageAllocator< ::szengine::HowEntityByEntityIdRequest, ::szengine::HowEntityByEntityIdResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(20);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::szengine::HowEntityByEntityIdRequest, ::szengine::HowEntityByEntityIdResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_HowEntityByEntityId() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status HowEntityByEntityId(::grpc::ServerContext* /*context*/, const ::szengine::HowEntityByEntityIdRequest* /*request*/, ::szengine::HowEntityByEntityIdResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* HowEntityByEntityId(
      ::grpc::CallbackServerContext* /*context*/, const ::szengine::HowEntityByEntityIdRequest* /*request*/, ::szengine::HowEntityByEntityIdResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_PreprocessRecord : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_PreprocessRecord() {
      ::grpc::Service::MarkMethodCallback(21,
          new ::grpc::internal::CallbackUnaryHandler< ::szengine::PreprocessRecordRequest, ::szengine::PreprocessRecordResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::szengine::PreprocessRecordRequest* request, ::szengine::PreprocessRecordResponse* response) { return this->PreprocessRecord(context, request, response); }));}
    void SetMessageAllocatorFor_PreprocessRecord(
        ::grpc::MessageAllocator< ::szengine::PreprocessRecordRequest, ::szengine::PreprocessRecordResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(21);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::szengine::PreprocessRecordRequest, ::szengine::PreprocessRecordResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_PreprocessRecord() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PreprocessRecord(::grpc::ServerContext* /*context*/, const ::szengine::PreprocessRecordRequest* /*request*/, ::szengine::PreprocessRecordResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* PreprocessRecord(
      ::grpc::CallbackServerContext* /*context*/, const ::szengine::PreprocessRecordRequest* /*request*/, ::szengine::PreprocessRecordResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_PrimeEngine : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_PrimeEngine() {
      ::grpc::Service::MarkMethodCallback(22,
          new ::grpc::internal::CallbackUnaryHandler< ::szengine::PrimeEngineRequest, ::szengine::PrimeEngineResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::szengine::PrimeEngineRequest* request, ::szengine::PrimeEngineResponse* response) { return this->PrimeEngine(context, request, response); }));}
    void SetMessageAllocatorFor_PrimeEngine(
        ::grpc::MessageAllocator< ::szengine::PrimeEngineRequest, ::szengine::PrimeEngineResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(22);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::szengine::PrimeEngineRequest, ::szengine::PrimeEngineResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_PrimeEngine() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PrimeEngine(::grpc::ServerContext* /*context*/, const ::szengine::PrimeEngineRequest* /*request*/, ::szengine::PrimeEngineResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* PrimeEngine(
      ::grpc::CallbackServerContext* /*context*/, const ::szengine::PrimeEngineRequest* /*request*/, ::szengine::PrimeEngineResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ProcessRedoRecord : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ProcessRedoRecord() {
      ::grpc::Service::MarkMethodCallback(23,
          new ::grpc::internal::CallbackUnaryHandler< ::szengine::ProcessRedoRecordRequest, ::szengine::ProcessRedoRecordResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::szengine::ProcessRedoRecordRequest* request, ::szengine::ProcessRedoRecordResponse* response) { return this->ProcessRedoRecord(context, request, response); }));}
    void SetMessageAllocatorFor_ProcessRedoRecord(
        ::grpc::MessageAllocator< ::szengine::ProcessRedoRecordRequest, ::szengine::ProcessRedoRecordResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(23);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::szengine::ProcessRedoRecordRequest, ::szengine::ProcessRedoRecordResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ProcessRedoRecord() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ProcessRedoRecord(::grpc::ServerContext* /*context*/, const ::szengine::ProcessRedoRecordRequest* /*request*/, ::szengine::ProcessRedoRecordResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ProcessRedoRecord(
      ::grpc::CallbackServerContext* /*context*/, const ::szengine::ProcessRedoRecordRequest* /*request*/, ::szengine::ProcessRedoRecordResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ReevaluateEntity : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ReevaluateEntity() {
      ::grpc::Service::MarkMethodCallback(24,
          new ::grpc::internal::CallbackUnaryHandler< ::szengine::ReevaluateEntityRequest, ::szengine::ReevaluateEntityResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::szengine::ReevaluateEntityRequest* request, ::szengine::ReevaluateEntityResponse* response) { return this->ReevaluateEntity(context, request, response); }));}
    void SetMessageAllocatorFor_ReevaluateEntity(
        ::grpc::MessageAllocator< ::szengine::ReevaluateEntityRequest, ::szengine::ReevaluateEntityResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(24);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::szengine::ReevaluateEntityRequest, ::szengine::ReevaluateEntityResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ReevaluateEntity() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReevaluateEntity(::grpc::ServerContext* /*context*/, const ::szengine::ReevaluateEntityRequest* /*request*/, ::szengine::ReevaluateEntityResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ReevaluateEntity(
      ::grpc::CallbackServerContext* /*context*/, const ::szengine::ReevaluateEntityRequest* /*request*/, ::szengine::ReevaluateEntityResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ReevaluateRecord : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ReevaluateRecord() {
      ::grpc::Service::MarkMethodCallback(25,
          new ::grpc::internal::CallbackUnaryHandler< ::szengine::ReevaluateRecordRequest, ::szengine::ReevaluateRecordResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::szengine::ReevaluateRecordRequest* request, ::szengine::ReevaluateRecordResponse* response) { return this->ReevaluateRecord(context, request, response); }));}
    void SetMessageAllocatorFor_ReevaluateRecord(
        ::grpc::MessageAllocator< ::szengine::ReevaluateRecordRequest, ::szengine::ReevaluateRecordResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(25);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::szengine::ReevaluateRecordRequest, ::szengine::ReevaluateRecordResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ReevaluateRecord() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReevaluateRecord(::grpc::ServerContext* /*context*/, const ::szengine::ReevaluateRecordRequest* /*request*/, ::szengine::ReevaluateRecordResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ReevaluateRecord(
      ::grpc::CallbackServerContext* /*context*/, const ::szengine::ReevaluateRecordRequest* /*request*/, ::szengine::ReevaluateRecordResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_Reinitialize : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Reinitialize() {
      ::grpc::Service::MarkMethodCallback(26,
          new ::grpc::internal::CallbackUnaryHandler< ::szengine::ReinitializeRequest, ::szengine::ReinitializeResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::szengine::ReinitializeRequest* request, ::szengine::ReinitializeResponse* response) { return this->Reinitialize(context, request, response); }));}
    void SetMessageAllocatorFor_Reinitialize(
        ::grpc::MessageAllocator< ::szengine::ReinitializeRequest, ::szengine::ReinitializeResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(26);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::szengine::ReinitializeRequest, ::szengine::ReinitializeResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Reinitialize() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Reinitialize(::grpc::ServerContext* /*context*/, const ::szengine::ReinitializeRequest* /*request*/, ::szengine::ReinitializeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Reinitialize(
      ::grpc::CallbackServerContext* /*context*/, const ::szengine::ReinitializeRequest* /*request*/, ::szengine::ReinitializeResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_SearchByAttributes : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_SearchByAttributes() {
      ::grpc::Service::MarkMethodCallback(27,
          new ::grpc::internal::CallbackUnaryHandler< ::szengine::SearchByAttributesRequest, ::szengine::SearchByAttributesResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::szengine::SearchByAttributesRequest* request, ::szengine::SearchByAttributesResponse* response) { return this->SearchByAttributes(context, request, response); }));}
    void SetMessageAllocatorFor_SearchByAttributes(
        ::grpc::MessageAllocator< ::szengine::SearchByAttributesRequest, ::szengine::SearchByAttributesResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(27);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::szengine::SearchByAttributesRequest, ::szengine::SearchByAttributesResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_SearchByAttributes() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SearchByAttributes(::grpc::ServerContext* /*context*/, const ::szengine::SearchByAttributesRequest* /*request*/, ::szengine::SearchByAttributesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SearchByAttributes(
      ::grpc::CallbackServerContext* /*context*/, const ::szengine::SearchByAttributesRequest* /*request*/, ::szengine::SearchByAttributesResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_StreamExportCsvEntityReport : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_StreamExportCsvEntityReport() {
      ::grpc::Service::MarkMethodCallback(28,
          new ::grpc::internal::CallbackServerStreamingHandler< ::szengine::StreamExportCsvEntityReportRequest, ::szengine::StreamExportCsvEntityReportResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::szengine::StreamExportCsvEntityReportRequest* request) { return this->StreamExportCsvEntityReport(context, request); }));
    }
    ~WithCallbackMethod_StreamExportCsvEntityReport() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StreamExportCsvEntityReport(::grpc::ServerContext* /*context*/, const ::szengine::StreamExportCsvEntityReportRequest* /*request*/, ::grpc::ServerWriter< ::szengine::StreamExportCsvEntityReportResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::szengine::StreamExportCsvEntityReportResponse>* StreamExportCsvEntityReport(
      ::grpc::CallbackServerContext* /*context*/, const ::szengine::StreamExportCsvEntityReportRequest* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_StreamExportJsonEntityReport : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_StreamExportJsonEntityReport() {
      ::grpc::Service::MarkMethodCallback(29,
          new ::grpc::internal::CallbackServerStreamingHandler< ::szengine::StreamExportJsonEntityReportRequest, ::szengine::StreamExportJsonEntityReportResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::szengine::StreamExportJsonEntityReportRequest* request) { return this->StreamExportJsonEntityReport(context, request); }));
    }
    ~WithCallbackMethod_StreamExportJsonEntityReport() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StreamExportJsonEntityReport(::grpc::ServerContext* /*context*/, const ::szengine::StreamExportJsonEntityReportRequest* /*request*/, ::grpc::ServerWriter< ::szengine::StreamExportJsonEntityReportResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::szengine::StreamExportJsonEntityReportResponse>* StreamExportJsonEntityReport(
      ::grpc::CallbackServerContext* /*context*/, const ::szengine::StreamExportJsonEntityReportRequest* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_WhyEntities : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_WhyEntities() {
      ::grpc::Service::MarkMethodCallback(30,
          new ::grpc::internal::CallbackUnaryHandler< ::szengine::WhyEntitiesRequest, ::szengine::WhyEntitiesResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::szengine::WhyEntitiesRequest* request, ::szengine::WhyEntitiesResponse* response) { return this->WhyEntities(context, request, response); }));}
    void SetMessageAllocatorFor_WhyEntities(
        ::grpc::MessageAllocator< ::szengine::WhyEntitiesRequest, ::szengine::WhyEntitiesResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(30);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::szengine::WhyEntitiesRequest, ::szengine::WhyEntitiesResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_WhyEntities() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status WhyEntities(::grpc::ServerContext* /*context*/, const ::szengine::WhyEntitiesRequest* /*request*/, ::szengine::WhyEntitiesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* WhyEntities(
      ::grpc::CallbackServerContext* /*context*/, const ::szengine::WhyEntitiesRequest* /*request*/, ::szengine::WhyEntitiesResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_WhyRecordInEntity : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_WhyRecordInEntity() {
      ::grpc::Service::MarkMethodCallback(31,
          new ::grpc::internal::CallbackUnaryHandler< ::szengine::WhyRecordInEntityRequest, ::szengine::WhyRecordInEntityResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::szengine::WhyRecordInEntityRequest* request, ::szengine::WhyRecordInEntityResponse* response) { return this->WhyRecordInEntity(context, request, response); }));}
    void SetMessageAllocatorFor_WhyRecordInEntity(
        ::grpc::MessageAllocator< ::szengine::WhyRecordInEntityRequest, ::szengine::WhyRecordInEntityResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(31);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::szengine::WhyRecordInEntityRequest, ::szengine::WhyRecordInEntityResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_WhyRecordInEntity() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status WhyRecordInEntity(::grpc::ServerContext* /*context*/, const ::szengine::WhyRecordInEntityRequest* /*request*/, ::szengine::WhyRecordInEntityResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* WhyRecordInEntity(
      ::grpc::CallbackServerContext* /*context*/, const ::szengine::WhyRecordInEntityRequest* /*request*/, ::szengine::WhyRecordInEntityResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_WhyRecords : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_WhyRecords() {
      ::grpc::Service::MarkMethodCallback(32,
          new ::grpc::internal::CallbackUnaryHandler< ::szengine::WhyRecordsRequest, ::szengine::WhyRecordsResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::szengine::WhyRecordsRequest* request, ::szengine::WhyRecordsResponse* response) { return this->WhyRecords(context, request, response); }));}
    void SetMessageAllocatorFor_WhyRecords(
        ::grpc::MessageAllocator< ::szengine::WhyRecordsRequest, ::szengine::WhyRecordsResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(32);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::szengine::WhyRecordsRequest, ::szengine::WhyRecordsResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_WhyRecords() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status WhyRecords(::grpc::ServerContext* /*context*/, const ::szengine::WhyRecordsRequest* /*request*/, ::szengine::WhyRecordsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* WhyRecords(
      ::grpc::CallbackServerContext* /*context*/, const ::szengine::WhyRecordsRequest* /*request*/, ::szengine::WhyRecordsResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_WhySearch : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_WhySearch() {
      ::grpc::Service::MarkMethodCallback(33,
          new ::grpc::internal::CallbackUnaryHandler< ::szengine::WhySearchRequest, ::szengine::WhySearchResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::szengine::WhySearchRequest* request, ::szengine::WhySearchResponse* response) { return this->WhySearch(context, request, response); }));}
    void SetMessageAllocatorFor_WhySearch(
        ::grpc::MessageAllocator< ::szengine::WhySearchRequest, ::szengine::WhySearchResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(33);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::szengine::WhySearchRequest, ::szengine::WhySearchResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_WhySearch() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status WhySearch(::grpc::ServerContext* /*context*/, const ::szengine::WhySearchRequest* /*request*/, ::szengine::WhySearchResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* WhySearch(
      ::grpc::CallbackServerContext* /*context*/, const ::szengine::WhySearchRequest* /*request*/, ::szengine::WhySearchResponse* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_AddRecord<WithCallbackMethod_CloseExportReport<WithCallbackMethod_CountRedoRecords<WithCallbackMethod_DeleteRecord<WithCallbackMethod_ExportCsvEntityReport<WithCallbackMethod_ExportJsonEntityReport<WithCallbackMethod_FetchNext<WithCallbackMethod_FindInterestingEntitiesByEntityId<WithCallbackMethod_FindInterestingEntitiesByRecordId<WithCallbackMethod_FindNetworkByEntityId<WithCallbackMethod_FindNetworkByRecordId<WithCallbackMethod_FindPathByEntityId<WithCallbackMethod_FindPathByRecordId<WithCallbackMethod_GetActiveConfigId<WithCallbackMethod_GetEntityByEntityId<WithCallbackMethod_GetEntityByRecordId<WithCallbackMethod_GetRecord<WithCallbackMethod_GetRedoRecord<WithCallbackMethod_GetStats<WithCallbackMethod_GetVirtualEntityByRecordId<WithCallbackMethod_HowEntityByEntityId<WithCallbackMethod_PreprocessRecord<WithCallbackMethod_PrimeEngine<WithCallbackMethod_ProcessRedoRecord<WithCallbackMethod_ReevaluateEntity<WithCallbackMethod_ReevaluateRecord<WithCallbackMethod_Reinitialize<WithCallbackMethod_SearchByAttributes<WithCallbackMethod_StreamExportCsvEntityReport<WithCallbackMethod_StreamExportJsonEntityReport<WithCallbackMethod_WhyEntities<WithCallbackMethod_WhyRecordInEntity<WithCallbackMethod_WhyRecords<WithCallbackMethod_WhySearch<Service > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_AddRecord : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_AddRecord() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_AddRecord() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddRecord(::grpc::ServerContext* /*context*/, const ::szengine::AddRecordRequest* /*request*/, ::szengine::AddRecordResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_CloseExportReport : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_CloseExportReport() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_CloseExportReport() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CloseExportReport(::grpc::ServerContext* /*context*/, const ::szengine::CloseExportReportRequest* /*request*/, ::szengine::CloseExportReportResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_CountRedoRecords : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_CountRedoRecords() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_CountRedoRecords() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CountRedoRecords(::grpc::ServerContext* /*context*/, const ::szengine::CountRedoRecordsRequest* /*request*/, ::szengine::CountRedoRecordsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DeleteRecord : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DeleteRecord() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_DeleteRecord() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteRecord(::grpc::ServerContext* /*context*/, const ::szengine::DeleteRecordRequest* /*request*/, ::szengine::DeleteRecordResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ExportCsvEntityReport : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ExportCsvEntityReport() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_ExportCsvEntityReport() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ExportCsvEntityReport(::grpc::ServerContext* /*context*/, const ::szengine::ExportCsvEntityReportRequest* /*request*/, ::szengine::ExportCsvEntityReportResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ExportJsonEntityReport : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ExportJsonEntityReport() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_ExportJsonEntityReport() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ExportJsonEntityReport(::grpc::ServerContext* /*context*/, const ::szengine::ExportJsonEntityReportRequest* /*request*/, ::szengine::ExportJsonEntityReportResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_FetchNext : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_FetchNext() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_FetchNext() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FetchNext(::grpc::ServerContext* /*context*/, const ::szengine::FetchNextRequest* /*request*/, ::szengine::FetchNextResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_FindInterestingEntitiesByEntityId : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_FindInterestingEntitiesByEntityId() {
      ::grpc::Service::MarkMethodGeneric(7);
    }
    ~WithGenericMethod_FindInterestingEntitiesByEntityId() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FindInterestingEntitiesByEntityId(::grpc::ServerContext* /*context*/, const ::szengine::FindInterestingEntitiesByEntityIdRequest* /*request*/, ::szengine::FindInterestingEntitiesByEntityIdResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_FindInterestingEntitiesByRecordId : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_FindInterestingEntitiesByRecordId() {
      ::grpc::Service::MarkMethodGeneric(8);
    }
    ~WithGenericMethod_FindInterestingEntitiesByRecordId() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FindInterestingEntitiesByRecordId(::grpc::ServerContext* /*context*/, const ::szengine::FindInterestingEntitiesByRecordIdRequest* /*request*/, ::szengine::FindInterestingEntitiesByRecordIdResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_FindNetworkByEntityId : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_FindNetworkByEntityId() {
      ::grpc::Service::MarkMethodGeneric(9);
    }
    ~WithGenericMethod_FindNetworkByEntityId() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FindNetworkByEntityId(::grpc::ServerContext* /*context*/, const ::szengine::FindNetworkByEntityIdRequest* /*request*/, ::szengine::FindNetworkByEntityIdResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_FindNetworkByRecordId : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_FindNetworkByRecordId() {
      ::grpc::Service::MarkMethodGeneric(10);
    }
    ~WithGenericMethod_FindNetworkByRecordId() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FindNetworkByRecordId(::grpc::ServerContext* /*context*/, const ::szengine::FindNetworkByRecordIdRequest* /*request*/, ::szengine::FindNetworkByRecordIdResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_FindPathByEntityId : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_FindPathByEntityId() {
      ::grpc::Service::MarkMethodGeneric(11);
    }
    ~WithGenericMethod_FindPathByEntityId() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FindPathByEntityId(::grpc::ServerContext* /*context*/, const ::szengine::FindPathByEntityIdRequest* /*request*/, ::szengine::FindPathByEntityIdResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_FindPathByRecordId : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_FindPathByRecordId() {
      ::grpc::Service::MarkMethodGeneric(12);
    }
    ~WithGenericMethod_FindPathByRecordId() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FindPathByRecordId(::grpc::ServerContext* /*context*/, const ::szengine::FindPathByRecordIdRequest* /*request*/, ::szengine::FindPathByRecordIdResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetActiveConfigId : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetActiveConfigId() {
      ::grpc::Service::MarkMethodGeneric(13);
    }
    ~WithGenericMethod_GetActiveConfigId() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetActiveConfigId(::grpc::ServerContext* /*context*/, const ::szengine::GetActiveConfigIdRequest* /*request*/, ::szengine::GetActiveConfigIdResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetEntityByEntityId : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetEntityByEntityId() {
      ::grpc::Service::MarkMethodGeneric(14);
    }
    ~WithGenericMethod_GetEntityByEntityId() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetEntityByEntityId(::grpc::ServerContext* /*context*/, const ::szengine::GetEntityByEntityIdRequest* /*request*/, ::szengine::GetEntityByEntityIdResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetEntityByRecordId : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetEntityByRecordId() {
      ::grpc::Service::MarkMethodGeneric(15);
    }
    ~WithGenericMethod_GetEntityByRecordId() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetEntityByRecordId(::grpc::ServerContext* /*context*/, const ::szengine::GetEntityByRecordIdRequest* /*request*/, ::szengine::GetEntityByRecordIdResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetRecord : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetRecord() {
      ::grpc::Service::MarkMethodGeneric(16);
    }
    ~WithGenericMethod_GetRecord() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetRecord(::grpc::ServerContext* /*context*/, const ::szengine::GetRecordRequest* /*request*/, ::szengine::GetRecordResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetRedoRecord : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetRedoRecord() {
      ::grpc::Service::MarkMethodGeneric(17);
    }
    ~WithGenericMethod_GetRedoRecord() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetRedoRecord(::grpc::ServerContext* /*context*/, const ::szengine::GetRedoRecordRequest* /*request*/, ::szengine::GetRedoRecordResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetStats : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetStats() {
      ::grpc::Service::MarkMethodGeneric(18);
    }
    ~WithGenericMethod_GetStats() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetStats(::grpc::ServerContext* /*context*/, const ::szengine::GetStatsRequest* /*request*/, ::szengine::GetStatsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetVirtualEntityByRecordId : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetVirtualEntityByRecordId() {
      ::grpc::Service::MarkMethodGeneric(19);
    }
    ~WithGenericMethod_GetVirtualEntityByRecordId() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetVirtualEntityByRecordId(::grpc::ServerContext* /*context*/, const ::szengine::GetVirtualEntityByRecordIdRequest* /*request*/, ::szengine::GetVirtualEntityByRecordIdResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_HowEntityByEntityId : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_HowEntityByEntityId() {
      ::grpc::Service::MarkMethodGeneric(20);
    }
    ~WithGenericMethod_HowEntityByEntityId() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status HowEntityByEntityId(::grpc::ServerContext* /*context*/, const ::szengine::HowEntityByEntityIdRequest* /*request*/, ::szengine::HowEntityByEntityIdResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_PreprocessRecord : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_PreprocessRecord() {
      ::grpc::Service::MarkMethodGeneric(21);
    }
    ~WithGenericMethod_PreprocessRecord() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PreprocessRecord(::grpc::ServerContext* /*context*/, const ::szengine::PreprocessRecordRequest* /*request*/, ::szengine::PreprocessRecordResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_PrimeEngine : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_PrimeEngine() {
      ::grpc::Service::MarkMethodGeneric(22);
    }
    ~WithGenericMethod_PrimeEngine() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PrimeEngine(::grpc::ServerContext* /*context*/, const ::szengine::PrimeEngineRequest* /*request*/, ::szengine::PrimeEngineResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ProcessRedoRecord : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ProcessRedoRecord() {
      ::grpc::Service::MarkMethodGeneric(23);
    }
    ~WithGenericMethod_ProcessRedoRecord() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ProcessRedoRecord(::grpc::ServerContext* /*context*/, const ::szengine::ProcessRedoRecordRequest* /*request*/, ::szengine::ProcessRedoRecordResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ReevaluateEntity : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ReevaluateEntity() {
      ::grpc::Service::MarkMethodGeneric(24);
    }
    ~WithGenericMethod_ReevaluateEntity() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReevaluateEntity(::grpc::ServerContext* /*context*/, const ::szengine::ReevaluateEntityRequest* /*request*/, ::szengine::ReevaluateEntityResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ReevaluateRecord : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ReevaluateRecord() {
      ::grpc::Service::MarkMethodGeneric(25);
    }
    ~WithGenericMethod_ReevaluateRecord() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReevaluateRecord(::grpc::ServerContext* /*context*/, const ::szengine::ReevaluateRecordRequest* /*request*/, ::szengine::ReevaluateRecordResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Reinitialize : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Reinitialize() {
      ::grpc::Service::MarkMethodGeneric(26);
    }
    ~WithGenericMethod_Reinitialize() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Reinitialize(::grpc::ServerContext* /*context*/, const ::szengine::ReinitializeRequest* /*request*/, ::szengine::ReinitializeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SearchByAttributes : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SearchByAttributes() {
      ::grpc::Service::MarkMethodGeneric(27);
    }
    ~WithGenericMethod_SearchByAttributes() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SearchByAttributes(::grpc::ServerContext* /*context*/, const ::szengine::SearchByAttributesRequest* /*request*/, ::szengine::SearchByAttributesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_StreamExportCsvEntityReport : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_StreamExportCsvEntityReport() {
      ::grpc::Service::MarkMethodGeneric(28);
    }
    ~WithGenericMethod_StreamExportCsvEntityReport() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StreamExportCsvEntityReport(::grpc::ServerContext* /*context*/, const ::szengine::StreamExportCsvEntityReportRequest* /*request*/, ::grpc::ServerWriter< ::szengine::StreamExportCsvEntityReportResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_StreamExportJsonEntityReport : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_StreamExportJsonEntityReport() {
      ::grpc::Service::MarkMethodGeneric(29);
    }
    ~WithGenericMethod_StreamExportJsonEntityReport() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StreamExportJsonEntityReport(::grpc::ServerContext* /*context*/, const ::szengine::StreamExportJsonEntityReportRequest* /*request*/, ::grpc::ServerWriter< ::szengine::StreamExportJsonEntityReportResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_WhyEntities : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_WhyEntities() {
      ::grpc::Service::MarkMethodGeneric(30);
    }
    ~WithGenericMethod_WhyEntities() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status WhyEntities(::grpc::ServerContext* /*context*/, const ::szengine::WhyEntitiesRequest* /*request*/, ::szengine::WhyEntitiesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_WhyRecordInEntity : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_WhyRecordInEntity() {
      ::grpc::Service::MarkMethodGeneric(31);
    }
    ~WithGenericMethod_WhyRecordInEntity() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status WhyRecordInEntity(::grpc::ServerContext* /*context*/, const ::szengine::WhyRecordInEntityRequest* /*request*/, ::szengine::WhyRecordInEntityResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_WhyRecords : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_WhyRecords() {
      ::grpc::Service::MarkMethodGeneric(32);
    }
    ~WithGenericMethod_WhyRecords() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status WhyRecords(::grpc::ServerContext* /*context*/, const ::szengine::WhyRecordsRequest* /*request*/, ::szengine::WhyRecordsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_WhySearch : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_WhySearch() {
      ::grpc::Service::MarkMethodGeneric(33);
    }
    ~WithGenericMethod_WhySearch() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status WhySearch(::grpc::ServerContext* /*context*/, const ::szengine::WhySearchRequest* /*request*/, ::szengine::WhySearchResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_AddRecord : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_AddRecord() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_AddRecord() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddRecord(::grpc::ServerContext* /*context*/, const ::szengine::AddRecordRequest* /*request*/, ::szengine::AddRecordResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAddRecord(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_CloseExportReport : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_CloseExportReport() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_CloseExportReport() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CloseExportReport(::grpc::ServerContext* /*context*/, const ::szengine::CloseExportReportRequest* /*request*/, ::szengine::CloseExportReportResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCloseExportReport(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_CountRedoRecords : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_CountRedoRecords() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_CountRedoRecords() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CountRedoRecords(::grpc::ServerContext* /*context*/, const ::szengine::CountRedoRecordsRequest* /*request*/, ::szengine::CountRedoRecordsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCountRedoRecords(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DeleteRecord : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DeleteRecord() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_DeleteRecord() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteRecord(::grpc::ServerContext* /*context*/, const ::szengine::DeleteRecordRequest* /*request*/, ::szengine::DeleteRecordResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteRecord(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ExportCsvEntityReport : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ExportCsvEntityReport() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_ExportCsvEntityReport() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ExportCsvEntityReport(::grpc::ServerContext* /*context*/, const ::szengine::ExportCsvEntityReportRequest* /*request*/, ::szengine::ExportCsvEntityReportResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestExportCsvEntityReport(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ExportJsonEntityReport : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ExportJsonEntityReport() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_ExportJsonEntityReport() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ExportJsonEntityReport(::grpc::ServerContext* /*context*/, const ::szengine::ExportJsonEntityReportRequest* /*request*/, ::szengine::ExportJsonEntityReportResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestExportJsonEntityReport(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_FetchNext : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_FetchNext() {
      ::grpc::Service::MarkMethodRaw(6);
    }
    ~WithRawMethod_FetchNext() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FetchNext(::grpc::ServerContext* /*context*/, const ::szengine::FetchNextRequest* /*request*/, ::szengine::FetchNextResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestFetchNext(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_FindInterestingEntitiesByEntityId : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_FindInterestingEntitiesByEntityId() {
      ::grpc::Service::MarkMethodRaw(7);
    }
    ~WithRawMethod_FindInterestingEntitiesByEntityId() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FindInterestingEntitiesByEntityId(::grpc::ServerContext* /*context*/, const ::szengine::FindInterestingEntitiesByEntityIdRequest* /*request*/, ::szengine::FindInterestingEntitiesByEntityIdResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestFindInterestingEntitiesByEntityId(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_FindInterestingEntitiesByRecordId : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_FindInterestingEntitiesByRecordId() {
      ::grpc::Service::MarkMethodRaw(8);
    }
    ~WithRawMethod_FindInterestingEntitiesByRecordId() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FindInterestingEntitiesByRecordId(::grpc::ServerContext* /*context*/, const ::szengine::FindInterestingEntitiesByRecordIdRequest* /*request*/, ::szengine::FindInterestingEntitiesByRecordIdResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestFindInterestingEntitiesByRecordId(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_FindNetworkByEntityId : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_FindNetworkByEntityId() {
      ::grpc::Service::MarkMethodRaw(9);
    }
    ~WithRawMethod_FindNetworkByEntityId() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FindNetworkByEntityId(::grpc::ServerContext* /*context*/, const ::szengine::FindNetworkByEntityIdRequest* /*request*/, ::szengine::FindNetworkByEntityIdResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestFindNetworkByEntityId(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_FindNetworkByRecordId : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_FindNetworkByRecordId() {
      ::grpc::Service::MarkMethodRaw(10);
    }
    ~WithRawMethod_FindNetworkByRecordId() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FindNetworkByRecordId(::grpc::ServerContext* /*context*/, const ::szengine::FindNetworkByRecordIdRequest* /*request*/, ::szengine::FindNetworkByRecordIdResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestFindNetworkByRecordId(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(10, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_FindPathByEntityId : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_FindPathByEntityId() {
      ::grpc::Service::MarkMethodRaw(11);
    }
    ~WithRawMethod_FindPathByEntityId() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FindPathByEntityId(::grpc::ServerContext* /*context*/, const ::szengine::FindPathByEntityIdRequest* /*request*/, ::szengine::FindPathByEntityIdResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestFindPathByEntityId(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(11, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_FindPathByRecordId : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_FindPathByRecordId() {
      ::grpc::Service::MarkMethodRaw(12);
    }
    ~WithRawMethod_FindPathByRecordId() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FindPathByRecordId(::grpc::ServerContext* /*context*/, const ::szengine::FindPathByRecordIdRequest* /*request*/, ::szengine::FindPathByRecordIdResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestFindPathByRecordId(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(12, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetActiveConfigId : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetActiveConfigId() {
      ::grpc::Service::MarkMethodRaw(13);
    }
    ~WithRawMethod_GetActiveConfigId() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetActiveConfigId(::grpc::ServerContext* /*context*/, const ::szengine::GetActiveConfigIdRequest* /*request*/, ::szengine::GetActiveConfigIdResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetActiveConfigId(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(13, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetEntityByEntityId : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetEntityByEntityId() {
      ::grpc::Service::MarkMethodRaw(14);
    }
    ~WithRawMethod_GetEntityByEntityId() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetEntityByEntityId(::grpc::ServerContext* /*context*/, const ::szengine::GetEntityByEntityIdRequest* /*request*/, ::szengine::GetEntityByEntityIdResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetEntityByEntityId(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(14, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetEntityByRecordId : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetEntityByRecordId() {
      ::grpc::Service::MarkMethodRaw(15);
    }
    ~WithRawMethod_GetEntityByRecordId() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetEntityByRecordId(::grpc::ServerContext* /*context*/, const ::szengine::GetEntityByRecordIdRequest* /*request*/, ::szengine::GetEntityByRecordIdResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetEntityByRecordId(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(15, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetRecord : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetRecord() {
      ::grpc::Service::MarkMethodRaw(16);
    }
    ~WithRawMethod_GetRecord() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetRecord(::grpc::ServerContext* /*context*/, const ::szengine::GetRecordRequest* /*request*/, ::szengine::GetRecordResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetRecord(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(16, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetRedoRecord : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetRedoRecord() {
      ::grpc::Service::MarkMethodRaw(17);
    }
    ~WithRawMethod_GetRedoRecord() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetRedoRecord(::grpc::ServerContext* /*context*/, const ::szengine::GetRedoRecordRequest* /*request*/, ::szengine::GetRedoRecordResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetRedoRecord(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(17, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetStats : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetStats() {
      ::grpc::Service::MarkMethodRaw(18);
    }
    ~WithRawMethod_GetStats() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetStats(::grpc::ServerContext* /*context*/, const ::szengine::GetStatsRequest* /*request*/, ::szengine::GetStatsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetStats(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(18, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetVirtualEntityByRecordId : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetVirtualEntityByRecordId() {
      ::grpc::Service::MarkMethodRaw(19);
    }
    ~WithRawMethod_GetVirtualEntityByRecordId() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetVirtualEntityByRecordId(::grpc::ServerContext* /*context*/, const ::szengine::GetVirtualEntityByRecordIdRequest* /*request*/, ::szengine::GetVirtualEntityByRecordIdResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetVirtualEntityByRecordId(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(19, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_HowEntityByEntityId : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_HowEntityByEntityId() {
      ::grpc::Service::MarkMethodRaw(20);
    }
    ~WithRawMethod_HowEntityByEntityId() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status HowEntityByEntityId(::grpc::ServerContext* /*context*/, const ::szengine::HowEntityByEntityIdRequest* /*request*/, ::szengine::HowEntityByEntityIdResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestHowEntityByEntityId(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(20, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_PreprocessRecord : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_PreprocessRecord() {
      ::grpc::Service::MarkMethodRaw(21);
    }
    ~WithRawMethod_PreprocessRecord() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PreprocessRecord(::grpc::ServerContext* /*context*/, const ::szengine::PreprocessRecordRequest* /*request*/, ::szengine::PreprocessRecordResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPreprocessRecord(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(21, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_PrimeEngine : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_PrimeEngine() {
      ::grpc::Service::MarkMethodRaw(22);
    }
    ~WithRawMethod_PrimeEngine() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PrimeEngine(::grpc::ServerContext* /*context*/, const ::szengine::PrimeEngineRequest* /*request*/, ::szengine::PrimeEngineResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPrimeEngine(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(22, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ProcessRedoRecord : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ProcessRedoRecord() {
      ::grpc::Service::MarkMethodRaw(23);
    }
    ~WithRawMethod_ProcessRedoRecord() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ProcessRedoRecord(::grpc::ServerContext* /*context*/, const ::szengine::ProcessRedoRecordRequest* /*request*/, ::szengine::ProcessRedoRecordResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestProcessRedoRecord(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(23, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ReevaluateEntity : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ReevaluateEntity() {
      ::grpc::Service::MarkMethodRaw(24);
    }
    ~WithRawMethod_ReevaluateEntity() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReevaluateEntity(::grpc::ServerContext* /*context*/, const ::szengine::ReevaluateEntityRequest* /*request*/, ::szengine::ReevaluateEntityResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestReevaluateEntity(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(24, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ReevaluateRecord : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ReevaluateRecord() {
      ::grpc::Service::MarkMethodRaw(25);
    }
    ~WithRawMethod_ReevaluateRecord() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReevaluateRecord(::grpc::ServerContext* /*context*/, const ::szengine::ReevaluateRecordRequest* /*request*/, ::szengine::ReevaluateRecordResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestReevaluateRecord(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(25, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Reinitialize : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Reinitialize() {
      ::grpc::Service::MarkMethodRaw(26);
    }
    ~WithRawMethod_Reinitialize() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Reinitialize(::grpc::ServerContext* /*context*/, const ::szengine::ReinitializeRequest* /*request*/, ::szengine::ReinitializeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestReinitialize(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(26, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SearchByAttributes : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SearchByAttributes() {
      ::grpc::Service::MarkMethodRaw(27);
    }
    ~WithRawMethod_SearchByAttributes() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SearchByAttributes(::grpc::ServerContext* /*context*/, const ::szengine::SearchByAttributesRequest* /*request*/, ::szengine::SearchByAttributesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSearchByAttributes(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(27, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_StreamExportCsvEntityReport : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_StreamExportCsvEntityReport() {
      ::grpc::Service::MarkMethodRaw(28);
    }
    ~WithRawMethod_StreamExportCsvEntityReport() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StreamExportCsvEntityReport(::grpc::ServerContext* /*context*/, const ::szengine::StreamExportCsvEntityReportRequest* /*request*/, ::grpc::ServerWriter< ::szengine::StreamExportCsvEntityReportResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStreamExportCsvEntityReport(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(28, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_StreamExportJsonEntityReport : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_StreamExportJsonEntityReport() {
      ::grpc::Service::MarkMethodRaw(29);
    }
    ~WithRawMethod_StreamExportJsonEntityReport() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StreamExportJsonEntityReport(::grpc::ServerContext* /*context*/, const ::szengine::StreamExportJsonEntityReportRequest* /*request*/, ::grpc::ServerWriter< ::szengine::StreamExportJsonEntityReportResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStreamExportJsonEntityReport(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(29, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_WhyEntities : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_WhyEntities() {
      ::grpc::Service::MarkMethodRaw(30);
    }
    ~WithRawMethod_WhyEntities() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status WhyEntities(::grpc::ServerContext* /*context*/, const ::szengine::WhyEntitiesRequest* /*request*/, ::szengine::WhyEntitiesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestWhyEntities(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(30, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_WhyRecordInEntity : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_WhyRecordInEntity() {
      ::grpc::Service::MarkMethodRaw(31);
    }
    ~WithRawMethod_WhyRecordInEntity() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status WhyRecordInEntity(::grpc::ServerContext* /*context*/, const ::szengine::WhyRecordInEntityRequest* /*request*/, ::szengine::WhyRecordInEntityResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestWhyRecordInEntity(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(31, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_WhyRecords : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_WhyRecords() {
      ::grpc::Service::MarkMethodRaw(32);
    }
    ~WithRawMethod_WhyRecords() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status WhyRecords(::grpc::ServerContext* /*context*/, const ::szengine::WhyRecordsRequest* /*request*/, ::szengine::WhyRecordsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestWhyRecords(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(32, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_WhySearch : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_WhySearch() {
      ::grpc::Service::MarkMethodRaw(33);
    }
    ~WithRawMethod_WhySearch() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status WhySearch(::grpc::ServerContext* /*context*/, const ::szengine::WhySearchRequest* /*request*/, ::szengine::WhySearchResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestWhySearch(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(33, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_AddRecord : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_AddRecord() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->AddRecord(context, request, response); }));
    }
    ~WithRawCallbackMethod_AddRecord() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddRecord(::grpc::ServerContext* /*context*/, const ::szengine::AddRecordRequest* /*request*/, ::szengine::AddRecordResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* AddRecord(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_CloseExportReport : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_CloseExportReport() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->CloseExportReport(context, request, response); }));
    }
    ~WithRawCallbackMethod_CloseExportReport() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CloseExportReport(::grpc::ServerContext* /*context*/, const ::szengine::CloseExportReportRequest* /*request*/, ::szengine::CloseExportReportResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CloseExportReport(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_CountRedoRecords : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_CountRedoRecords() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->CountRedoRecords(context, request, response); }));
    }
    ~WithRawCallbackMethod_CountRedoRecords() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CountRedoRecords(::grpc::ServerContext* /*context*/, const ::szengine::CountRedoRecordsRequest* /*request*/, ::szengine::CountRedoRecordsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CountRedoRecords(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_DeleteRecord : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_DeleteRecord() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DeleteRecord(context, request, response); }));
    }
    ~WithRawCallbackMethod_DeleteRecord() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteRecord(::grpc::ServerContext* /*context*/, const ::szengine::DeleteRecordRequest* /*request*/, ::szengine::DeleteRecordResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DeleteRecord(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ExportCsvEntityReport : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ExportCsvEntityReport() {
      ::grpc::Service::MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ExportCsvEntityReport(context, request, response); }));
    }
    ~WithRawCallbackMethod_ExportCsvEntityReport() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ExportCsvEntityReport(::grpc::ServerContext* /*context*/, const ::szengine::ExportCsvEntityReportRequest* /*request*/, ::szengine::ExportCsvEntityReportResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ExportCsvEntityReport(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ExportJsonEntityReport : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ExportJsonEntityReport() {
      ::grpc::Service::MarkMethodRawCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ExportJsonEntityReport(context, request, response); }));
    }
    ~WithRawCallbackMethod_ExportJsonEntityReport() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ExportJsonEntityReport(::grpc::ServerContext* /*context*/, const ::szengine::ExportJsonEntityReportRequest* /*request*/, ::szengine::ExportJsonEntityReportResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ExportJsonEntityReport(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_FetchNext : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_FetchNext() {
      ::grpc::Service::MarkMethodRawCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->FetchNext(context, request, response); }));
    }
    ~WithRawCallbackMethod_FetchNext() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FetchNext(::grpc::ServerContext* /*context*/, const ::szengine::FetchNextRequest* /*request*/, ::szengine::FetchNextResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* FetchNext(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_FindInterestingEntitiesByEntityId : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_FindInterestingEntitiesByEntityId() {
      ::grpc::Service::MarkMethodRawCallback(7,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->FindInterestingEntitiesByEntityId(context, request, response); }));
    }
    ~WithRawCallbackMethod_FindInterestingEntitiesByEntityId() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FindInterestingEntitiesByEntityId(::grpc::ServerContext* /*context*/, const ::szengine::FindInterestingEntitiesByEntityIdRequest* /*request*/, ::szengine::FindInterestingEntitiesByEntityIdResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* FindInterestingEntitiesByEntityId(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_FindInterestingEntitiesByRecordId : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_FindInterestingEntitiesByRecordId() {
      ::grpc::Service::MarkMethodRawCallback(8,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->FindInterestingEntitiesByRecordId(context, request, response); }));
    }
    ~WithRawCallbackMethod_FindInterestingEntitiesByRecordId() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FindInterestingEntitiesByRecordId(::grpc::ServerContext* /*context*/, const ::szengine::FindInterestingEntitiesByRecordIdRequest* /*request*/, ::szengine::FindInterestingEntitiesByRecordIdResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* FindInterestingEntitiesByRecordId(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_FindNetworkByEntityId : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_FindNetworkByEntityId() {
      ::grpc::Service::MarkMethodRawCallback(9,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->FindNetworkByEntityId(context, request, response); }));
    }
    ~WithRawCallbackMethod_FindNetworkByEntityId() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FindNetworkByEntityId(::grpc::ServerContext* /*context*/, const ::szengine::FindNetworkByEntityIdRequest* /*request*/, ::szengine::FindNetworkByEntityIdResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* FindNetworkByEntityId(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_FindNetworkByRecordId : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_FindNetworkByRecordId() {
      ::grpc::Service::MarkMethodRawCallback(10,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->FindNetworkByRecordId(context, request, response); }));
    }
    ~WithRawCallbackMethod_FindNetworkByRecordId() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FindNetworkByRecordId(::grpc::ServerContext* /*context*/, const ::szengine::FindNetworkByRecordIdRequest* /*request*/, ::szengine::FindNetworkByRecordIdResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* FindNetworkByRecordId(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_FindPathByEntityId : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_FindPathByEntityId() {
      ::grpc::Service::MarkMethodRawCallback(11,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->FindPathByEntityId(context, request, response); }));
    }
    ~WithRawCallbackMethod_FindPathByEntityId() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FindPathByEntityId(::grpc::ServerContext* /*context*/, const ::szengine::FindPathByEntityIdRequest* /*request*/, ::szengine::FindPathByEntityIdResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* FindPathByEntityId(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_FindPathByRecordId : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_FindPathByRecordId() {
      ::grpc::Service::MarkMethodRawCallback(12,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->FindPathByRecordId(context, request, response); }));
    }
    ~WithRawCallbackMethod_FindPathByRecordId() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FindPathByRecordId(::grpc::ServerContext* /*context*/, const ::szengine::FindPathByRecordIdRequest* /*request*/, ::szengine::FindPathByRecordIdResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* FindPathByRecordId(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetActiveConfigId : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetActiveConfigId() {
      ::grpc::Service::MarkMethodRawCallback(13,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetActiveConfigId(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetActiveConfigId() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetActiveConfigId(::grpc::ServerContext* /*context*/, const ::szengine::GetActiveConfigIdRequest* /*request*/, ::szengine::GetActiveConfigIdResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetActiveConfigId(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetEntityByEntityId : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetEntityByEntityId() {
      ::grpc::Service::MarkMethodRawCallback(14,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetEntityByEntityId(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetEntityByEntityId() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetEntityByEntityId(::grpc::ServerContext* /*context*/, const ::szengine::GetEntityByEntityIdRequest* /*request*/, ::szengine::GetEntityByEntityIdResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetEntityByEntityId(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetEntityByRecordId : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetEntityByRecordId() {
      ::grpc::Service::MarkMethodRawCallback(15,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetEntityByRecordId(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetEntityByRecordId() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetEntityByRecordId(::grpc::ServerContext* /*context*/, const ::szengine::GetEntityByRecordIdRequest* /*request*/, ::szengine::GetEntityByRecordIdResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetEntityByRecordId(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetRecord : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetRecord() {
      ::grpc::Service::MarkMethodRawCallback(16,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetRecord(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetRecord() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetRecord(::grpc::ServerContext* /*context*/, const ::szengine::GetRecordRequest* /*request*/, ::szengine::GetRecordResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetRecord(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetRedoRecord : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetRedoRecord() {
      ::grpc::Service::MarkMethodRawCallback(17,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetRedoRecord(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetRedoRecord() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetRedoRecord(::grpc::ServerContext* /*context*/, const ::szengine::GetRedoRecordRequest* /*request*/, ::szengine::GetRedoRecordResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetRedoRecord(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetStats : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetStats() {
      ::grpc::Service::MarkMethodRawCallback(18,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetStats(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetStats() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetStats(::grpc::ServerContext* /*context*/, const ::szengine::GetStatsRequest* /*request*/, ::szengine::GetStatsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetStats(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetVirtualEntityByRecordId : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetVirtualEntityByRecordId() {
      ::grpc::Service::MarkMethodRawCallback(19,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetVirtualEntityByRecordId(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetVirtualEntityByRecordId() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetVirtualEntityByRecordId(::grpc::ServerContext* /*context*/, const ::szengine::GetVirtualEntityByRecordIdRequest* /*request*/, ::szengine::GetVirtualEntityByRecordIdResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetVirtualEntityByRecordId(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_HowEntityByEntityId : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_HowEntityByEntityId() {
      ::grpc::Service::MarkMethodRawCallback(20,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->HowEntityByEntityId(context, request, response); }));
    }
    ~WithRawCallbackMethod_HowEntityByEntityId() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status HowEntityByEntityId(::grpc::ServerContext* /*context*/, const ::szengine::HowEntityByEntityIdRequest* /*request*/, ::szengine::HowEntityByEntityIdResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* HowEntityByEntityId(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_PreprocessRecord : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_PreprocessRecord() {
      ::grpc::Service::MarkMethodRawCallback(21,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->PreprocessRecord(context, request, response); }));
    }
    ~WithRawCallbackMethod_PreprocessRecord() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PreprocessRecord(::grpc::ServerContext* /*context*/, const ::szengine::PreprocessRecordRequest* /*request*/, ::szengine::PreprocessRecordResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* PreprocessRecord(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_PrimeEngine : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_PrimeEngine() {
      ::grpc::Service::MarkMethodRawCallback(22,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->PrimeEngine(context, request, response); }));
    }
    ~WithRawCallbackMethod_PrimeEngine() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PrimeEngine(::grpc::ServerContext* /*context*/, const ::szengine::PrimeEngineRequest* /*request*/, ::szengine::PrimeEngineResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* PrimeEngine(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ProcessRedoRecord : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ProcessRedoRecord() {
      ::grpc::Service::MarkMethodRawCallback(23,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ProcessRedoRecord(context, request, response); }));
    }
    ~WithRawCallbackMethod_ProcessRedoRecord() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ProcessRedoRecord(::grpc::ServerContext* /*context*/, const ::szengine::ProcessRedoRecordRequest* /*request*/, ::szengine::ProcessRedoRecordResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ProcessRedoRecord(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ReevaluateEntity : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ReevaluateEntity() {
      ::grpc::Service::MarkMethodRawCallback(24,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ReevaluateEntity(context, request, response); }));
    }
    ~WithRawCallbackMethod_ReevaluateEntity() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReevaluateEntity(::grpc::ServerContext* /*context*/, const ::szengine::ReevaluateEntityRequest* /*request*/, ::szengine::ReevaluateEntityResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ReevaluateEntity(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ReevaluateRecord : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ReevaluateRecord() {
      ::grpc::Service::MarkMethodRawCallback(25,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ReevaluateRecord(context, request, response); }));
    }
    ~WithRawCallbackMethod_ReevaluateRecord() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReevaluateRecord(::grpc::ServerContext* /*context*/, const ::szengine::ReevaluateRecordRequest* /*request*/, ::szengine::ReevaluateRecordResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ReevaluateRecord(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Reinitialize : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Reinitialize() {
      ::grpc::Service::MarkMethodRawCallback(26,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Reinitialize(context, request, response); }));
    }
    ~WithRawCallbackMethod_Reinitialize() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Reinitialize(::grpc::ServerContext* /*context*/, const ::szengine::ReinitializeRequest* /*request*/, ::szengine::ReinitializeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Reinitialize(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_SearchByAttributes : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_SearchByAttributes() {
      ::grpc::Service::MarkMethodRawCallback(27,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SearchByAttributes(context, request, response); }));
    }
    ~WithRawCallbackMethod_SearchByAttributes() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SearchByAttributes(::grpc::ServerContext* /*context*/, const ::szengine::SearchByAttributesRequest* /*request*/, ::szengine::SearchByAttributesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SearchByAttributes(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_StreamExportCsvEntityReport : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_StreamExportCsvEntityReport() {
      ::grpc::Service::MarkMethodRawCallback(28,
          new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const::grpc::ByteBuffer* request) { return this->StreamExportCsvEntityReport(context, request); }));
    }
    ~WithRawCallbackMethod_StreamExportCsvEntityReport() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StreamExportCsvEntityReport(::grpc::ServerContext* /*context*/, const ::szengine::StreamExportCsvEntityReportRequest* /*request*/, ::grpc::ServerWriter< ::szengine::StreamExportCsvEntityReportResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* StreamExportCsvEntityReport(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_StreamExportJsonEntityReport : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_StreamExportJsonEntityReport() {
      ::grpc::Service::MarkMethodRawCallback(29,
          new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const::grpc::ByteBuffer* request) { return this->StreamExportJsonEntityReport(context, request); }));
    }
    ~WithRawCallbackMethod_StreamExportJsonEntityReport() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StreamExportJsonEntityReport(::grpc::ServerContext* /*context*/, const ::szengine::StreamExportJsonEntityReportRequest* /*request*/, ::grpc::ServerWriter< ::szengine::StreamExportJsonEntityReportResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* StreamExportJsonEntityReport(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_WhyEntities : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_WhyEntities() {
      ::grpc::Service::MarkMethodRawCallback(30,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->WhyEntities(context, request, response); }));
    }
    ~WithRawCallbackMethod_WhyEntities() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status WhyEntities(::grpc::ServerContext* /*context*/, const ::szengine::WhyEntitiesRequest* /*request*/, ::szengine::WhyEntitiesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* WhyEntities(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_WhyRecordInEntity : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_WhyRecordInEntity() {
      ::grpc::Service::MarkMethodRawCallback(31,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->WhyRecordInEntity(context, request, response); }));
    }
    ~WithRawCallbackMethod_WhyRecordInEntity() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status WhyRecordInEntity(::grpc::ServerContext* /*context*/, const ::szengine::WhyRecordInEntityRequest* /*request*/, ::szengine::WhyRecordInEntityResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* WhyRecordInEntity(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_WhyRecords : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_WhyRecords() {
      ::grpc::Service::MarkMethodRawCallback(32,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->WhyRecords(context, request, response); }));
    }
    ~WithRawCallbackMethod_WhyRecords() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status WhyRecords(::grpc::ServerContext* /*context*/, const ::szengine::WhyRecordsRequest* /*request*/, ::szengine::WhyRecordsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* WhyRecords(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_WhySearch : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_WhySearch() {
      ::grpc::Service::MarkMethodRawCallback(33,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->WhySearch(context, request, response); }));
    }
    ~WithRawCallbackMethod_WhySearch() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status WhySearch(::grpc::ServerContext* /*context*/, const ::szengine::WhySearchRequest* /*request*/, ::szengine::WhySearchResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* WhySearch(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_AddRecord : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_AddRecord() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::szengine::AddRecordRequest, ::szengine::AddRecordResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::szengine::AddRecordRequest, ::szengine::AddRecordResponse>* streamer) {
                       return this->StreamedAddRecord(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_AddRecord() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status AddRecord(::grpc::ServerContext* /*context*/, const ::szengine::AddRecordRequest* /*request*/, ::szengine::AddRecordResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedAddRecord(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::szengine::AddRecordRequest,::szengine::AddRecordResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CloseExportReport : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_CloseExportReport() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::szengine::CloseExportReportRequest, ::szengine::CloseExportReportResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::szengine::CloseExportReportRequest, ::szengine::CloseExportReportResponse>* streamer) {
                       return this->StreamedCloseExportReport(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_CloseExportReport() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CloseExportReport(::grpc::ServerContext* /*context*/, const ::szengine::CloseExportReportRequest* /*request*/, ::szengine::CloseExportReportResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCloseExportReport(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::szengine::CloseExportReportRequest,::szengine::CloseExportReportResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CountRedoRecords : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_CountRedoRecords() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::szengine::CountRedoRecordsRequest, ::szengine::CountRedoRecordsResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::szengine::CountRedoRecordsRequest, ::szengine::CountRedoRecordsResponse>* streamer) {
                       return this->StreamedCountRedoRecords(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_CountRedoRecords() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CountRedoRecords(::grpc::ServerContext* /*context*/, const ::szengine::CountRedoRecordsRequest* /*request*/, ::szengine::CountRedoRecordsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCountRedoRecords(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::szengine::CountRedoRecordsRequest,::szengine::CountRedoRecordsResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DeleteRecord : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DeleteRecord() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::szengine::DeleteRecordRequest, ::szengine::DeleteRecordResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::szengine::DeleteRecordRequest, ::szengine::DeleteRecordResponse>* streamer) {
                       return this->StreamedDeleteRecord(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_DeleteRecord() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DeleteRecord(::grpc::ServerContext* /*context*/, const ::szengine::DeleteRecordRequest* /*request*/, ::szengine::DeleteRecordResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDeleteRecord(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::szengine::DeleteRecordRequest,::szengine::DeleteRecordResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ExportCsvEntityReport : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ExportCsvEntityReport() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::szengine::ExportCsvEntityReportRequest, ::szengine::ExportCsvEntityReportResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::szengine::ExportCsvEntityReportRequest, ::szengine::ExportCsvEntityReportResponse>* streamer) {
                       return this->StreamedExportCsvEntityReport(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ExportCsvEntityReport() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ExportCsvEntityReport(::grpc::ServerContext* /*context*/, const ::szengine::ExportCsvEntityReportRequest* /*request*/, ::szengine::ExportCsvEntityReportResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedExportCsvEntityReport(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::szengine::ExportCsvEntityReportRequest,::szengine::ExportCsvEntityReportResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ExportJsonEntityReport : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ExportJsonEntityReport() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler<
          ::szengine::ExportJsonEntityReportRequest, ::szengine::ExportJsonEntityReportResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::szengine::ExportJsonEntityReportRequest, ::szengine::ExportJsonEntityReportResponse>* streamer) {
                       return this->StreamedExportJsonEntityReport(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ExportJsonEntityReport() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ExportJsonEntityReport(::grpc::ServerContext* /*context*/, const ::szengine::ExportJsonEntityReportRequest* /*request*/, ::szengine::ExportJsonEntityReportResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedExportJsonEntityReport(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::szengine::ExportJsonEntityReportRequest,::szengine::ExportJsonEntityReportResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_FetchNext : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_FetchNext() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::internal::StreamedUnaryHandler<
          ::szengine::FetchNextRequest, ::szengine::FetchNextResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::szengine::FetchNextRequest, ::szengine::FetchNextResponse>* streamer) {
                       return this->StreamedFetchNext(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_FetchNext() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status FetchNext(::grpc::ServerContext* /*context*/, const ::szengine::FetchNextRequest* /*request*/, ::szengine::FetchNextResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedFetchNext(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::szengine::FetchNextRequest,::szengine::FetchNextResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_FindInterestingEntitiesByEntityId : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_FindInterestingEntitiesByEntityId() {
      ::grpc::Service::MarkMethodStreamed(7,
        new ::grpc::internal::StreamedUnaryHandler<
          ::szengine::FindInterestingEntitiesByEntityIdRequest, ::szengine::FindInterestingEntitiesByEntityIdResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::szengine::FindInterestingEntitiesByEntityIdRequest, ::szengine::FindInterestingEntitiesByEntityIdResponse>* streamer) {
                       return this->StreamedFindInterestingEntitiesByEntityId(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_FindInterestingEntitiesByEntityId() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status FindInterestingEntitiesByEntityId(::grpc::ServerContext* /*context*/, const ::szengine::FindInterestingEntitiesByEntityIdRequest* /*request*/, ::szengine::FindInterestingEntitiesByEntityIdResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedFindInterestingEntitiesByEntityId(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::szengine::FindInterestingEntitiesByEntityIdRequest,::szengine::FindInterestingEntitiesByEntityIdResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_FindInterestingEntitiesByRecordId : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_FindInterestingEntitiesByRecordId() {
      ::grpc::Service::MarkMethodStreamed(8,
        new ::grpc::internal::StreamedUnaryHandler<
          ::szengine::FindInterestingEntitiesByRecordIdRequest, ::szengine::FindInterestingEntitiesByRecordIdResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::szengine::FindInterestingEntitiesByRecordIdRequest, ::szengine::FindInterestingEntitiesByRecordIdResponse>* streamer) {
                       return this->StreamedFindInterestingEntitiesByRecordId(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_FindInterestingEntitiesByRecordId() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status FindInterestingEntitiesByRecordId(::grpc::ServerContext* /*context*/, const ::szengine::FindInterestingEntitiesByRecordIdRequest* /*request*/, ::szengine::FindInterestingEntitiesByRecordIdResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedFindInterestingEntitiesByRecordId(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::szengine::FindInterestingEntitiesByRecordIdRequest,::szengine::FindInterestingEntitiesByRecordIdResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_FindNetworkByEntityId : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_FindNetworkByEntityId() {
      ::grpc::Service::MarkMethodStreamed(9,
        new ::grpc::internal::StreamedUnaryHandler<
          ::szengine::FindNetworkByEntityIdRequest, ::szengine::FindNetworkByEntityIdResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::szengine::FindNetworkByEntityIdRequest, ::szengine::FindNetworkByEntityIdResponse>* streamer) {
                       return this->StreamedFindNetworkByEntityId(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_FindNetworkByEntityId() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status FindNetworkByEntityId(::grpc::ServerContext* /*context*/, const ::szengine::FindNetworkByEntityIdRequest* /*request*/, ::szengine::FindNetworkByEntityIdResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedFindNetworkByEntityId(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::szengine::FindNetworkByEntityIdRequest,::szengine::FindNetworkByEntityIdResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_FindNetworkByRecordId : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_FindNetworkByRecordId() {
      ::grpc::Service::MarkMethodStreamed(10,
        new ::grpc::internal::StreamedUnaryHandler<
          ::szengine::FindNetworkByRecordIdRequest, ::szengine::FindNetworkByRecordIdResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::szengine::FindNetworkByRecordIdRequest, ::szengine::FindNetworkByRecordIdResponse>* streamer) {
                       return this->StreamedFindNetworkByRecordId(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_FindNetworkByRecordId() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status FindNetworkByRecordId(::grpc::ServerContext* /*context*/, const ::szengine::FindNetworkByRecordIdRequest* /*request*/, ::szengine::FindNetworkByRecordIdResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedFindNetworkByRecordId(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::szengine::FindNetworkByRecordIdRequest,::szengine::FindNetworkByRecordIdResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_FindPathByEntityId : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_FindPathByEntityId() {
      ::grpc::Service::MarkMethodStreamed(11,
        new ::grpc::internal::StreamedUnaryHandler<
          ::szengine::FindPathByEntityIdRequest, ::szengine::FindPathByEntityIdResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::szengine::FindPathByEntityIdRequest, ::szengine::FindPathByEntityIdResponse>* streamer) {
                       return this->StreamedFindPathByEntityId(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_FindPathByEntityId() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status FindPathByEntityId(::grpc::ServerContext* /*context*/, const ::szengine::FindPathByEntityIdRequest* /*request*/, ::szengine::FindPathByEntityIdResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedFindPathByEntityId(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::szengine::FindPathByEntityIdRequest,::szengine::FindPathByEntityIdResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_FindPathByRecordId : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_FindPathByRecordId() {
      ::grpc::Service::MarkMethodStreamed(12,
        new ::grpc::internal::StreamedUnaryHandler<
          ::szengine::FindPathByRecordIdRequest, ::szengine::FindPathByRecordIdResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::szengine::FindPathByRecordIdRequest, ::szengine::FindPathByRecordIdResponse>* streamer) {
                       return this->StreamedFindPathByRecordId(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_FindPathByRecordId() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status FindPathByRecordId(::grpc::ServerContext* /*context*/, const ::szengine::FindPathByRecordIdRequest* /*request*/, ::szengine::FindPathByRecordIdResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedFindPathByRecordId(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::szengine::FindPathByRecordIdRequest,::szengine::FindPathByRecordIdResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetActiveConfigId : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetActiveConfigId() {
      ::grpc::Service::MarkMethodStreamed(13,
        new ::grpc::internal::StreamedUnaryHandler<
          ::szengine::GetActiveConfigIdRequest, ::szengine::GetActiveConfigIdResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::szengine::GetActiveConfigIdRequest, ::szengine::GetActiveConfigIdResponse>* streamer) {
                       return this->StreamedGetActiveConfigId(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetActiveConfigId() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetActiveConfigId(::grpc::ServerContext* /*context*/, const ::szengine::GetActiveConfigIdRequest* /*request*/, ::szengine::GetActiveConfigIdResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetActiveConfigId(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::szengine::GetActiveConfigIdRequest,::szengine::GetActiveConfigIdResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetEntityByEntityId : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetEntityByEntityId() {
      ::grpc::Service::MarkMethodStreamed(14,
        new ::grpc::internal::StreamedUnaryHandler<
          ::szengine::GetEntityByEntityIdRequest, ::szengine::GetEntityByEntityIdResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::szengine::GetEntityByEntityIdRequest, ::szengine::GetEntityByEntityIdResponse>* streamer) {
                       return this->StreamedGetEntityByEntityId(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetEntityByEntityId() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetEntityByEntityId(::grpc::ServerContext* /*context*/, const ::szengine::GetEntityByEntityIdRequest* /*request*/, ::szengine::GetEntityByEntityIdResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetEntityByEntityId(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::szengine::GetEntityByEntityIdRequest,::szengine::GetEntityByEntityIdResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetEntityByRecordId : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetEntityByRecordId() {
      ::grpc::Service::MarkMethodStreamed(15,
        new ::grpc::internal::StreamedUnaryHandler<
          ::szengine::GetEntityByRecordIdRequest, ::szengine::GetEntityByRecordIdResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::szengine::GetEntityByRecordIdRequest, ::szengine::GetEntityByRecordIdResponse>* streamer) {
                       return this->StreamedGetEntityByRecordId(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetEntityByRecordId() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetEntityByRecordId(::grpc::ServerContext* /*context*/, const ::szengine::GetEntityByRecordIdRequest* /*request*/, ::szengine::GetEntityByRecordIdResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetEntityByRecordId(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::szengine::GetEntityByRecordIdRequest,::szengine::GetEntityByRecordIdResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetRecord : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetRecord() {
      ::grpc::Service::MarkMethodStreamed(16,
        new ::grpc::internal::StreamedUnaryHandler<
          ::szengine::GetRecordRequest, ::szengine::GetRecordResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::szengine::GetRecordRequest, ::szengine::GetRecordResponse>* streamer) {
                       return this->StreamedGetRecord(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetRecord() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetRecord(::grpc::ServerContext* /*context*/, const ::szengine::GetRecordRequest* /*request*/, ::szengine::GetRecordResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetRecord(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::szengine::GetRecordRequest,::szengine::GetRecordResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetRedoRecord : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetRedoRecord() {
      ::grpc::Service::MarkMethodStreamed(17,
        new ::grpc::internal::StreamedUnaryHandler<
          ::szengine::GetRedoRecordRequest, ::szengine::GetRedoRecordResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::szengine::GetRedoRecordRequest, ::szengine::GetRedoRecordResponse>* streamer) {
                       return this->StreamedGetRedoRecord(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetRedoRecord() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetRedoRecord(::grpc::ServerContext* /*context*/, const ::szengine::GetRedoRecordRequest* /*request*/, ::szengine::GetRedoRecordResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetRedoRecord(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::szengine::GetRedoRecordRequest,::szengine::GetRedoRecordResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetStats : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetStats() {
      ::grpc::Service::MarkMethodStreamed(18,
        new ::grpc::internal::StreamedUnaryHandler<
          ::szengine::GetStatsRequest, ::szengine::GetStatsResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::szengine::GetStatsRequest, ::szengine::GetStatsResponse>* streamer) {
                       return this->StreamedGetStats(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetStats() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetStats(::grpc::ServerContext* /*context*/, const ::szengine::GetStatsRequest* /*request*/, ::szengine::GetStatsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetStats(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::szengine::GetStatsRequest,::szengine::GetStatsResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetVirtualEntityByRecordId : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetVirtualEntityByRecordId() {
      ::grpc::Service::MarkMethodStreamed(19,
        new ::grpc::internal::StreamedUnaryHandler<
          ::szengine::GetVirtualEntityByRecordIdRequest, ::szengine::GetVirtualEntityByRecordIdResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::szengine::GetVirtualEntityByRecordIdRequest, ::szengine::GetVirtualEntityByRecordIdResponse>* streamer) {
                       return this->StreamedGetVirtualEntityByRecordId(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetVirtualEntityByRecordId() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetVirtualEntityByRecordId(::grpc::ServerContext* /*context*/, const ::szengine::GetVirtualEntityByRecordIdRequest* /*request*/, ::szengine::GetVirtualEntityByRecordIdResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetVirtualEntityByRecordId(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::szengine::GetVirtualEntityByRecordIdRequest,::szengine::GetVirtualEntityByRecordIdResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_HowEntityByEntityId : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_HowEntityByEntityId() {
      ::grpc::Service::MarkMethodStreamed(20,
        new ::grpc::internal::StreamedUnaryHandler<
          ::szengine::HowEntityByEntityIdRequest, ::szengine::HowEntityByEntityIdResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::szengine::HowEntityByEntityIdRequest, ::szengine::HowEntityByEntityIdResponse>* streamer) {
                       return this->StreamedHowEntityByEntityId(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_HowEntityByEntityId() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status HowEntityByEntityId(::grpc::ServerContext* /*context*/, const ::szengine::HowEntityByEntityIdRequest* /*request*/, ::szengine::HowEntityByEntityIdResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedHowEntityByEntityId(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::szengine::HowEntityByEntityIdRequest,::szengine::HowEntityByEntityIdResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_PreprocessRecord : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_PreprocessRecord() {
      ::grpc::Service::MarkMethodStreamed(21,
        new ::grpc::internal::StreamedUnaryHandler<
          ::szengine::PreprocessRecordRequest, ::szengine::PreprocessRecordResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::szengine::PreprocessRecordRequest, ::szengine::PreprocessRecordResponse>* streamer) {
                       return this->StreamedPreprocessRecord(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_PreprocessRecord() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status PreprocessRecord(::grpc::ServerContext* /*context*/, const ::szengine::PreprocessRecordRequest* /*request*/, ::szengine::PreprocessRecordResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedPreprocessRecord(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::szengine::PreprocessRecordRequest,::szengine::PreprocessRecordResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_PrimeEngine : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_PrimeEngine() {
      ::grpc::Service::MarkMethodStreamed(22,
        new ::grpc::internal::StreamedUnaryHandler<
          ::szengine::PrimeEngineRequest, ::szengine::PrimeEngineResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::szengine::PrimeEngineRequest, ::szengine::PrimeEngineResponse>* streamer) {
                       return this->StreamedPrimeEngine(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_PrimeEngine() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status PrimeEngine(::grpc::ServerContext* /*context*/, const ::szengine::PrimeEngineRequest* /*request*/, ::szengine::PrimeEngineResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedPrimeEngine(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::szengine::PrimeEngineRequest,::szengine::PrimeEngineResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ProcessRedoRecord : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ProcessRedoRecord() {
      ::grpc::Service::MarkMethodStreamed(23,
        new ::grpc::internal::StreamedUnaryHandler<
          ::szengine::ProcessRedoRecordRequest, ::szengine::ProcessRedoRecordResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::szengine::ProcessRedoRecordRequest, ::szengine::ProcessRedoRecordResponse>* streamer) {
                       return this->StreamedProcessRedoRecord(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ProcessRedoRecord() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ProcessRedoRecord(::grpc::ServerContext* /*context*/, const ::szengine::ProcessRedoRecordRequest* /*request*/, ::szengine::ProcessRedoRecordResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedProcessRedoRecord(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::szengine::ProcessRedoRecordRequest,::szengine::ProcessRedoRecordResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ReevaluateEntity : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ReevaluateEntity() {
      ::grpc::Service::MarkMethodStreamed(24,
        new ::grpc::internal::StreamedUnaryHandler<
          ::szengine::ReevaluateEntityRequest, ::szengine::ReevaluateEntityResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::szengine::ReevaluateEntityRequest, ::szengine::ReevaluateEntityResponse>* streamer) {
                       return this->StreamedReevaluateEntity(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ReevaluateEntity() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ReevaluateEntity(::grpc::ServerContext* /*context*/, const ::szengine::ReevaluateEntityRequest* /*request*/, ::szengine::ReevaluateEntityResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedReevaluateEntity(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::szengine::ReevaluateEntityRequest,::szengine::ReevaluateEntityResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ReevaluateRecord : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ReevaluateRecord() {
      ::grpc::Service::MarkMethodStreamed(25,
        new ::grpc::internal::StreamedUnaryHandler<
          ::szengine::ReevaluateRecordRequest, ::szengine::ReevaluateRecordResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::szengine::ReevaluateRecordRequest, ::szengine::ReevaluateRecordResponse>* streamer) {
                       return this->StreamedReevaluateRecord(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ReevaluateRecord() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ReevaluateRecord(::grpc::ServerContext* /*context*/, const ::szengine::ReevaluateRecordRequest* /*request*/, ::szengine::ReevaluateRecordResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedReevaluateRecord(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::szengine::ReevaluateRecordRequest,::szengine::ReevaluateRecordResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Reinitialize : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Reinitialize() {
      ::grpc::Service::MarkMethodStreamed(26,
        new ::grpc::internal::StreamedUnaryHandler<
          ::szengine::ReinitializeRequest, ::szengine::ReinitializeResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::szengine::ReinitializeRequest, ::szengine::ReinitializeResponse>* streamer) {
                       return this->StreamedReinitialize(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Reinitialize() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Reinitialize(::grpc::ServerContext* /*context*/, const ::szengine::ReinitializeRequest* /*request*/, ::szengine::ReinitializeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedReinitialize(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::szengine::ReinitializeRequest,::szengine::ReinitializeResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SearchByAttributes : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SearchByAttributes() {
      ::grpc::Service::MarkMethodStreamed(27,
        new ::grpc::internal::StreamedUnaryHandler<
          ::szengine::SearchByAttributesRequest, ::szengine::SearchByAttributesResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::szengine::SearchByAttributesRequest, ::szengine::SearchByAttributesResponse>* streamer) {
                       return this->StreamedSearchByAttributes(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SearchByAttributes() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SearchByAttributes(::grpc::ServerContext* /*context*/, const ::szengine::SearchByAttributesRequest* /*request*/, ::szengine::SearchByAttributesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSearchByAttributes(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::szengine::SearchByAttributesRequest,::szengine::SearchByAttributesResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_WhyEntities : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_WhyEntities() {
      ::grpc::Service::MarkMethodStreamed(30,
        new ::grpc::internal::StreamedUnaryHandler<
          ::szengine::WhyEntitiesRequest, ::szengine::WhyEntitiesResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::szengine::WhyEntitiesRequest, ::szengine::WhyEntitiesResponse>* streamer) {
                       return this->StreamedWhyEntities(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_WhyEntities() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status WhyEntities(::grpc::ServerContext* /*context*/, const ::szengine::WhyEntitiesRequest* /*request*/, ::szengine::WhyEntitiesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedWhyEntities(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::szengine::WhyEntitiesRequest,::szengine::WhyEntitiesResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_WhyRecordInEntity : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_WhyRecordInEntity() {
      ::grpc::Service::MarkMethodStreamed(31,
        new ::grpc::internal::StreamedUnaryHandler<
          ::szengine::WhyRecordInEntityRequest, ::szengine::WhyRecordInEntityResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::szengine::WhyRecordInEntityRequest, ::szengine::WhyRecordInEntityResponse>* streamer) {
                       return this->StreamedWhyRecordInEntity(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_WhyRecordInEntity() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status WhyRecordInEntity(::grpc::ServerContext* /*context*/, const ::szengine::WhyRecordInEntityRequest* /*request*/, ::szengine::WhyRecordInEntityResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedWhyRecordInEntity(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::szengine::WhyRecordInEntityRequest,::szengine::WhyRecordInEntityResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_WhyRecords : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_WhyRecords() {
      ::grpc::Service::MarkMethodStreamed(32,
        new ::grpc::internal::StreamedUnaryHandler<
          ::szengine::WhyRecordsRequest, ::szengine::WhyRecordsResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::szengine::WhyRecordsRequest, ::szengine::WhyRecordsResponse>* streamer) {
                       return this->StreamedWhyRecords(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_WhyRecords() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status WhyRecords(::grpc::ServerContext* /*context*/, const ::szengine::WhyRecordsRequest* /*request*/, ::szengine::WhyRecordsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedWhyRecords(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::szengine::WhyRecordsRequest,::szengine::WhyRecordsResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_WhySearch : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_WhySearch() {
      ::grpc::Service::MarkMethodStreamed(33,
        new ::grpc::internal::StreamedUnaryHandler<
          ::szengine::WhySearchRequest, ::szengine::WhySearchResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::szengine::WhySearchRequest, ::szengine::WhySearchResponse>* streamer) {
                       return this->StreamedWhySearch(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_WhySearch() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status WhySearch(::grpc::ServerContext* /*context*/, const ::szengine::WhySearchRequest* /*request*/, ::szengine::WhySearchResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedWhySearch(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::szengine::WhySearchRequest,::szengine::WhySearchResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_AddRecord<WithStreamedUnaryMethod_CloseExportReport<WithStreamedUnaryMethod_CountRedoRecords<WithStreamedUnaryMethod_DeleteRecord<WithStreamedUnaryMethod_ExportCsvEntityReport<WithStreamedUnaryMethod_ExportJsonEntityReport<WithStreamedUnaryMethod_FetchNext<WithStreamedUnaryMethod_FindInterestingEntitiesByEntityId<WithStreamedUnaryMethod_FindInterestingEntitiesByRecordId<WithStreamedUnaryMethod_FindNetworkByEntityId<WithStreamedUnaryMethod_FindNetworkByRecordId<WithStreamedUnaryMethod_FindPathByEntityId<WithStreamedUnaryMethod_FindPathByRecordId<WithStreamedUnaryMethod_GetActiveConfigId<WithStreamedUnaryMethod_GetEntityByEntityId<WithStreamedUnaryMethod_GetEntityByRecordId<WithStreamedUnaryMethod_GetRecord<WithStreamedUnaryMethod_GetRedoRecord<WithStreamedUnaryMethod_GetStats<WithStreamedUnaryMethod_GetVirtualEntityByRecordId<WithStreamedUnaryMethod_HowEntityByEntityId<WithStreamedUnaryMethod_PreprocessRecord<WithStreamedUnaryMethod_PrimeEngine<WithStreamedUnaryMethod_ProcessRedoRecord<WithStreamedUnaryMethod_ReevaluateEntity<WithStreamedUnaryMethod_ReevaluateRecord<WithStreamedUnaryMethod_Reinitialize<WithStreamedUnaryMethod_SearchByAttributes<WithStreamedUnaryMethod_WhyEntities<WithStreamedUnaryMethod_WhyRecordInEntity<WithStreamedUnaryMethod_WhyRecords<WithStreamedUnaryMethod_WhySearch<Service > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > StreamedUnaryService;
  template <class BaseClass>
  class WithSplitStreamingMethod_StreamExportCsvEntityReport : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_StreamExportCsvEntityReport() {
      ::grpc::Service::MarkMethodStreamed(28,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::szengine::StreamExportCsvEntityReportRequest, ::szengine::StreamExportCsvEntityReportResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerSplitStreamer<
                     ::szengine::StreamExportCsvEntityReportRequest, ::szengine::StreamExportCsvEntityReportResponse>* streamer) {
                       return this->StreamedStreamExportCsvEntityReport(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_StreamExportCsvEntityReport() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status StreamExportCsvEntityReport(::grpc::ServerContext* /*context*/, const ::szengine::StreamExportCsvEntityReportRequest* /*request*/, ::grpc::ServerWriter< ::szengine::StreamExportCsvEntityReportResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedStreamExportCsvEntityReport(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::szengine::StreamExportCsvEntityReportRequest,::szengine::StreamExportCsvEntityReportResponse>* server_split_streamer) = 0;
  };
  template <class BaseClass>
  class WithSplitStreamingMethod_StreamExportJsonEntityReport : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_StreamExportJsonEntityReport() {
      ::grpc::Service::MarkMethodStreamed(29,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::szengine::StreamExportJsonEntityReportRequest, ::szengine::StreamExportJsonEntityReportResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerSplitStreamer<
                     ::szengine::StreamExportJsonEntityReportRequest, ::szengine::StreamExportJsonEntityReportResponse>* streamer) {
                       return this->StreamedStreamExportJsonEntityReport(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_StreamExportJsonEntityReport() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status StreamExportJsonEntityReport(::grpc::ServerContext* /*context*/, const ::szengine::StreamExportJsonEntityReportRequest* /*request*/, ::grpc::ServerWriter< ::szengine::StreamExportJsonEntityReportResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedStreamExportJsonEntityReport(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::szengine::StreamExportJsonEntityReportRequest,::szengine::StreamExportJsonEntityReportResponse>* server_split_streamer) = 0;
  };
  typedef WithSplitStreamingMethod_StreamExportCsvEntityReport<WithSplitStreamingMethod_StreamExportJsonEntityReport<Service > > SplitStreamedService;
  typedef WithStreamedUnaryMethod_AddRecord<WithStreamedUnaryMethod_CloseExportReport<WithStreamedUnaryMethod_CountRedoRecords<WithStreamedUnaryMethod_DeleteRecord<WithStreamedUnaryMethod_ExportCsvEntityReport<WithStreamedUnaryMethod_ExportJsonEntityReport<WithStreamedUnaryMethod_FetchNext<WithStreamedUnaryMethod_FindInterestingEntitiesByEntityId<WithStreamedUnaryMethod_FindInterestingEntitiesByRecordId<WithStreamedUnaryMethod_FindNetworkByEntityId<WithStreamedUnaryMethod_FindNetworkByRecordId<WithStreamedUnaryMethod_FindPathByEntityId<WithStreamedUnaryMethod_FindPathByRecordId<WithStreamedUnaryMethod_GetActiveConfigId<WithStreamedUnaryMethod_GetEntityByEntityId<WithStreamedUnaryMethod_GetEntityByRecordId<WithStreamedUnaryMethod_GetRecord<WithStreamedUnaryMethod_GetRedoRecord<WithStreamedUnaryMethod_GetStats<WithStreamedUnaryMethod_GetVirtualEntityByRecordId<WithStreamedUnaryMethod_HowEntityByEntityId<WithStreamedUnaryMethod_PreprocessRecord<WithStreamedUnaryMethod_PrimeEngine<WithStreamedUnaryMethod_ProcessRedoRecord<WithStreamedUnaryMethod_ReevaluateEntity<WithStreamedUnaryMethod_ReevaluateRecord<WithStreamedUnaryMethod_Reinitialize<WithStreamedUnaryMethod_SearchByAttributes<WithSplitStreamingMethod_StreamExportCsvEntityReport<WithSplitStreamingMethod_StreamExportJsonEntityReport<WithStreamedUnaryMethod_WhyEntities<WithStreamedUnaryMethod_WhyRecordInEntity<WithStreamedUnaryMethod_WhyRecords<WithStreamedUnaryMethod_WhySearch<Service > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > StreamedService;
};

}  // namespace szengine


#endif  // GRPC_szengine_2eproto__INCLUDED
