// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: szproduct.proto

#include "szproduct.pb.h"
#include "szproduct.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace szproduct {

static const char* SzProduct_method_names[] = {
  "/szproduct.SzProduct/GetLicense",
  "/szproduct.SzProduct/GetVersion",
};

std::unique_ptr< SzProduct::Stub> SzProduct::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< SzProduct::Stub> stub(new SzProduct::Stub(channel));
  return stub;
}

SzProduct::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_GetLicense_(SzProduct_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetVersion_(SzProduct_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status SzProduct::Stub::GetLicense(::grpc::ClientContext* context, const ::szproduct::GetLicenseRequest& request, ::szproduct::GetLicenseResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetLicense_, context, request, response);
}

void SzProduct::Stub::experimental_async::GetLicense(::grpc::ClientContext* context, const ::szproduct::GetLicenseRequest* request, ::szproduct::GetLicenseResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetLicense_, context, request, response, std::move(f));
}

void SzProduct::Stub::experimental_async::GetLicense(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::szproduct::GetLicenseResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetLicense_, context, request, response, std::move(f));
}

void SzProduct::Stub::experimental_async::GetLicense(::grpc::ClientContext* context, const ::szproduct::GetLicenseRequest* request, ::szproduct::GetLicenseResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetLicense_, context, request, response, reactor);
}

void SzProduct::Stub::experimental_async::GetLicense(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::szproduct::GetLicenseResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetLicense_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::szproduct::GetLicenseResponse>* SzProduct::Stub::AsyncGetLicenseRaw(::grpc::ClientContext* context, const ::szproduct::GetLicenseRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::szproduct::GetLicenseResponse>::Create(channel_.get(), cq, rpcmethod_GetLicense_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::szproduct::GetLicenseResponse>* SzProduct::Stub::PrepareAsyncGetLicenseRaw(::grpc::ClientContext* context, const ::szproduct::GetLicenseRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::szproduct::GetLicenseResponse>::Create(channel_.get(), cq, rpcmethod_GetLicense_, context, request, false);
}

::grpc::Status SzProduct::Stub::GetVersion(::grpc::ClientContext* context, const ::szproduct::GetVersionRequest& request, ::szproduct::GetVersionResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetVersion_, context, request, response);
}

void SzProduct::Stub::experimental_async::GetVersion(::grpc::ClientContext* context, const ::szproduct::GetVersionRequest* request, ::szproduct::GetVersionResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetVersion_, context, request, response, std::move(f));
}

void SzProduct::Stub::experimental_async::GetVersion(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::szproduct::GetVersionResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetVersion_, context, request, response, std::move(f));
}

void SzProduct::Stub::experimental_async::GetVersion(::grpc::ClientContext* context, const ::szproduct::GetVersionRequest* request, ::szproduct::GetVersionResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetVersion_, context, request, response, reactor);
}

void SzProduct::Stub::experimental_async::GetVersion(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::szproduct::GetVersionResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetVersion_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::szproduct::GetVersionResponse>* SzProduct::Stub::AsyncGetVersionRaw(::grpc::ClientContext* context, const ::szproduct::GetVersionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::szproduct::GetVersionResponse>::Create(channel_.get(), cq, rpcmethod_GetVersion_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::szproduct::GetVersionResponse>* SzProduct::Stub::PrepareAsyncGetVersionRaw(::grpc::ClientContext* context, const ::szproduct::GetVersionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::szproduct::GetVersionResponse>::Create(channel_.get(), cq, rpcmethod_GetVersion_, context, request, false);
}

SzProduct::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SzProduct_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SzProduct::Service, ::szproduct::GetLicenseRequest, ::szproduct::GetLicenseResponse>(
          [](SzProduct::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::szproduct::GetLicenseRequest* req,
             ::szproduct::GetLicenseResponse* resp) {
               return service->GetLicense(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SzProduct_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SzProduct::Service, ::szproduct::GetVersionRequest, ::szproduct::GetVersionResponse>(
          [](SzProduct::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::szproduct::GetVersionRequest* req,
             ::szproduct::GetVersionResponse* resp) {
               return service->GetVersion(ctx, req, resp);
             }, this)));
}

SzProduct::Service::~Service() {
}

::grpc::Status SzProduct::Service::GetLicense(::grpc::ServerContext* context, const ::szproduct::GetLicenseRequest* request, ::szproduct::GetLicenseResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SzProduct::Service::GetVersion(::grpc::ServerContext* context, const ::szproduct::GetVersionRequest* request, ::szproduct::GetVersionResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace szproduct

